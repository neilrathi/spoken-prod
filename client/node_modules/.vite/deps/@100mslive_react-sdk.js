import {
  require_react_dom
} from "./chunk-OAXIQSNW.js";
import {
  __commonJS,
  __export,
  __toESM,
  init_define_process_env,
  require_react
} from "./chunk-E3QRQ6KH.js";

// node_modules/ua-parser-js/src/ua-parser.js
var require_ua_parser = __commonJS({
  "node_modules/ua-parser-js/src/ua-parser.js"(exports, module) {
    init_define_process_env();
    (function(window2, undefined2) {
      "use strict";
      var LIBVERSION = "1.0.35", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 350;
      var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", VIERA = "Viera", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS";
      var extend = function(regexes2, extensions) {
        var mergedRegexes = {};
        for (var i10 in regexes2) {
          if (extensions[i10] && extensions[i10].length % 2 === 0) {
            mergedRegexes[i10] = extensions[i10].concat(regexes2[i10]);
          } else {
            mergedRegexes[i10] = regexes2[i10];
          }
        }
        return mergedRegexes;
      }, enumerize = function(arr) {
        var enums = {};
        for (var i10 = 0; i10 < arr.length; i10++) {
          enums[arr[i10].toUpperCase()] = arr[i10];
        }
        return enums;
      }, has = function(str1, str2) {
        return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
      }, lowerize = function(str) {
        return str.toLowerCase();
      }, majorize = function(version) {
        return typeof version === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined2;
      }, trim = function(str, len) {
        if (typeof str === STR_TYPE) {
          str = str.replace(/^\s\s*/, EMPTY);
          return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
      };
      var rgxMapper = function(ua, arrays) {
        var i10 = 0, j4, k4, p4, q3, matches, match;
        while (i10 < arrays.length && !matches) {
          var regex = arrays[i10], props = arrays[i10 + 1];
          j4 = k4 = 0;
          while (j4 < regex.length && !matches) {
            if (!regex[j4]) {
              break;
            }
            matches = regex[j4++].exec(ua);
            if (!!matches) {
              for (p4 = 0; p4 < props.length; p4++) {
                match = matches[++k4];
                q3 = props[p4];
                if (typeof q3 === OBJ_TYPE && q3.length > 0) {
                  if (q3.length === 2) {
                    if (typeof q3[1] == FUNC_TYPE) {
                      this[q3[0]] = q3[1].call(this, match);
                    } else {
                      this[q3[0]] = q3[1];
                    }
                  } else if (q3.length === 3) {
                    if (typeof q3[1] === FUNC_TYPE && !(q3[1].exec && q3[1].test)) {
                      this[q3[0]] = match ? q3[1].call(this, match, q3[2]) : undefined2;
                    } else {
                      this[q3[0]] = match ? match.replace(q3[1], q3[2]) : undefined2;
                    }
                  } else if (q3.length === 4) {
                    this[q3[0]] = match ? q3[3].call(this, match.replace(q3[1], q3[2])) : undefined2;
                  }
                } else {
                  this[q3] = match ? match : undefined2;
                }
              }
            }
          }
          i10 += 2;
        }
      }, strMapper = function(str, map) {
        for (var i10 in map) {
          if (typeof map[i10] === OBJ_TYPE && map[i10].length > 0) {
            for (var j4 = 0; j4 < map[i10].length; j4++) {
              if (has(map[i10][j4], str)) {
                return i10 === UNKNOWN ? undefined2 : i10;
              }
            }
          } else if (has(map[i10], str)) {
            return i10 === UNKNOWN ? undefined2 : i10;
          }
        }
        return str;
      };
      var oldSafariMap = {
        "1.0": "/8",
        "1.2": "/1",
        "1.3": "/3",
        "2.0": "/412",
        "2.0.2": "/416",
        "2.0.3": "/417",
        "2.0.4": "/419",
        "?": "/"
      }, windowsVersionMap = {
        "ME": "4.90",
        "NT 3.11": "NT3.51",
        "NT 4.0": "NT4.0",
        "2000": "NT 5.0",
        "XP": ["NT 5.1", "NT 5.2"],
        "Vista": "NT 6.0",
        "7": "NT 6.1",
        "8": "NT 6.2",
        "8.1": "NT 6.3",
        "10": ["NT 6.4", "NT 10.0"],
        "RT": "ARM"
      };
      var regexes = {
        browser: [
          [
            /\b(?:crmo|crios)\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "Chrome"]],
          [
            /edg(?:e|ios|a)?\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "Edge"]],
          [
            /(opera mini)\/([-\w\.]+)/i,
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
          ],
          [NAME, VERSION],
          [
            /opios[\/ ]+([\w\.]+)/i
          ],
          [VERSION, [NAME, OPERA + " Mini"]],
          [
            /\bopr\/([\w\.]+)/i
          ],
          [VERSION, [NAME, OPERA]],
          [
            /(kindle)\/([\w\.]+)/i,
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
            /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
            /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
            /(?:ms|\()(ie) ([\w\.]+)/i,
            /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
            /(heytap|ovi)browser\/([\d\.]+)/i,
            /(weibo)__([\d\.]+)/i
          ],
          [NAME, VERSION],
          [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i
          ],
          [VERSION, [NAME, "UC" + BROWSER]],
          [
            /microm.+\bqbcore\/([\w\.]+)/i,
            /\bqbcore\/([\w\.]+).+microm/i
          ],
          [VERSION, [NAME, "WeChat(Win) Desktop"]],
          [
            /micromessenger\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "WeChat"]],
          [
            /konqueror\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "Konqueror"]],
          [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i
          ],
          [VERSION, [NAME, "IE"]],
          [
            /ya(?:search)?browser\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "Yandex"]],
          [
            /(avast|avg)\/([\w\.]+)/i
          ],
          [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION],
          [
            /\bfocus\/([\w\.]+)/i
          ],
          [VERSION, [NAME, FIREFOX + " Focus"]],
          [
            /\bopt\/([\w\.]+)/i
          ],
          [VERSION, [NAME, OPERA + " Touch"]],
          [
            /coc_coc\w+\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "Coc Coc"]],
          [
            /dolfin\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "Dolphin"]],
          [
            /coast\/([\w\.]+)/i
          ],
          [VERSION, [NAME, OPERA + " Coast"]],
          [
            /miuibrowser\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "MIUI " + BROWSER]],
          [
            /fxios\/([-\w\.]+)/i
          ],
          [VERSION, [NAME, FIREFOX]],
          [
            /\bqihu|(qi?ho?o?|360)browser/i
          ],
          [[NAME, "360 " + BROWSER]],
          [
            /(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i
          ],
          [[NAME, /(.+)/, "$1 " + BROWSER], VERSION],
          [
            /(comodo_dragon)\/([\w\.]+)/i
          ],
          [[NAME, /_/g, " "], VERSION],
          [
            /(electron)\/([\w\.]+) safari/i,
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
            /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i
          ],
          [NAME, VERSION],
          [
            /(metasr)[\/ ]?([\w\.]+)/i,
            /(lbbrowser)/i,
            /\[(linkedin)app\]/i
          ],
          [NAME],
          [
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
          ],
          [[NAME, FACEBOOK], VERSION],
          [
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
            /safari (line)\/([\w\.]+)/i,
            /\b(line)\/([\w\.]+)\/iab/i,
            /(chromium|instagram)[\/ ]([-\w\.]+)/i
          ],
          [NAME, VERSION],
          [
            /\bgsa\/([\w\.]+) .*safari\//i
          ],
          [VERSION, [NAME, "GSA"]],
          [
            /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i
          ],
          [VERSION, [NAME, "TikTok"]],
          [
            /headlesschrome(?:\/([\w\.]+)| )/i
          ],
          [VERSION, [NAME, CHROME + " Headless"]],
          [
            / wv\).+(chrome)\/([\w\.]+)/i
          ],
          [[NAME, CHROME + " WebView"], VERSION],
          [
            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i
          ],
          [VERSION, [NAME, "Android " + BROWSER]],
          [
            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
          ],
          [NAME, VERSION],
          [
            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i
          ],
          [VERSION, [NAME, "Mobile Safari"]],
          [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i
          ],
          [VERSION, NAME],
          [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i
          ],
          [NAME, [VERSION, strMapper, oldSafariMap]],
          [
            /(webkit|khtml)\/([\w\.]+)/i
          ],
          [NAME, VERSION],
          [
            /(navigator|netscape\d?)\/([-\w\.]+)/i
          ],
          [[NAME, "Netscape"], VERSION],
          [
            /mobile vr; rv:([\w\.]+)\).+firefox/i
          ],
          [VERSION, [NAME, FIREFOX + " Reality"]],
          [
            /ekiohf.+(flow)\/([\w\.]+)/i,
            /(swiftfox)/i,
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
            /(firefox)\/([\w\.]+)/i,
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
            /(links) \(([\w\.]+)/i,
            /panasonic;(viera)/i
          ],
          [NAME, VERSION],
          [
            /(cobalt)\/([\w\.]+)/i
          ],
          [NAME, [VERSION, /master.|lts./, ""]]
        ],
        cpu: [
          [
            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i
          ],
          [[ARCHITECTURE, "amd64"]],
          [
            /(ia32(?=;))/i
          ],
          [[ARCHITECTURE, lowerize]],
          [
            /((?:i[346]|x)86)[;\)]/i
          ],
          [[ARCHITECTURE, "ia32"]],
          [
            /\b(aarch64|arm(v?8e?l?|_?64))\b/i
          ],
          [[ARCHITECTURE, "arm64"]],
          [
            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i
          ],
          [[ARCHITECTURE, "armhf"]],
          [
            /windows (ce|mobile); ppc;/i
          ],
          [[ARCHITECTURE, "arm"]],
          [
            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i
          ],
          [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
          [
            /(sun4\w)[;\)]/i
          ],
          [[ARCHITECTURE, "sparc"]],
          [
            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
          ],
          [[ARCHITECTURE, lowerize]]
        ],
        device: [
          [
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
          [
            /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]([-\w]+)/i,
            /sec-(sgh\w+)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
          [
            /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
          [
            /\((ipad);[-\w\),; ]+apple/i,
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
          [
            /(macintosh);/i
          ],
          [MODEL, [VENDOR, APPLE]],
          [
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
          ],
          [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
          [
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
          [
            /(?:huawei|honor)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
          [
            /\b(poco[\w ]+)(?: bui|\))/i,
            /\b; (\w+) build\/hm\1/i,
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
          ],
          [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, MOBILE]],
          [
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
          ],
          [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, TABLET]],
          [
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
          ],
          [MODEL, [VENDOR, "OPPO"], [TYPE, MOBILE]],
          [
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
          ],
          [MODEL, [VENDOR, "Vivo"], [TYPE, MOBILE]],
          [
            /\b(rmx[12]\d{3})(?: bui|;|\))/i
          ],
          [MODEL, [VENDOR, "Realme"], [TYPE, MOBILE]],
          [
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
          [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
          [
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
          ],
          [MODEL, [VENDOR, LG], [TYPE, TABLET]],
          [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
          ],
          [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
          [
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
          ],
          [MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
          [
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
          ],
          [[MODEL, /_/g, " "], [VENDOR, "Nokia"], [TYPE, MOBILE]],
          [
            /(pixel c)\b/i
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
          [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
          [
            /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
          ],
          [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
          [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
          ],
          [[MODEL, "Xperia Tablet"], [VENDOR, SONY], [TYPE, TABLET]],
          [
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
          ],
          [MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
          [
            /(alexa)webm/i,
            /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
            /(kf[a-z]+)( bui|\)).+silk\//i
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
          [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i
          ],
          [[MODEL, /(.+)/g, "Fire Phone $1"], [VENDOR, AMAZON], [TYPE, MOBILE]],
          [
            /(playbook);[-\w\),; ]+(rim)/i
          ],
          [MODEL, VENDOR, [TYPE, TABLET]],
          [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i
          ],
          [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
          [
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
          [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
          [
            /(nexus 9)/i
          ],
          [MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
          [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
          ],
          [VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
          [
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
          ],
          [MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
          [
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
          ],
          [MODEL, [VENDOR, "Meizu"], [TYPE, MOBILE]],
          [
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
            /(hp) ([\w ]+\w)/i,
            /(asus)-?(\w+)/i,
            /(microsoft); (lumia[\w ]+)/i,
            /(lenovo)[-_ ]?([-\w]+)/i,
            /(jolla)/i,
            /(oppo) ?([\w ]+) bui/i
          ],
          [VENDOR, MODEL, [TYPE, MOBILE]],
          [
            /(kobo)\s(ereader|touch)/i,
            /(archos) (gamepad2?)/i,
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,
            /(kindle)\/([\w\.]+)/i,
            /(nook)[\w ]+build\/(\w+)/i,
            /(dell) (strea[kpr\d ]*[\dko])/i,
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
            /(trinity)[- ]*(t\d{3}) bui/i,
            /(gigaset)[- ]+(q\w{1,9}) bui/i,
            /(vodafone) ([\w ]+)(?:\)| bui)/i
          ],
          [VENDOR, MODEL, [TYPE, TABLET]],
          [
            /(surface duo)/i
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
          [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i
          ],
          [MODEL, [VENDOR, "Fairphone"], [TYPE, MOBILE]],
          [
            /(u304aa)/i
          ],
          [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
          [
            /\bsie-(\w*)/i
          ],
          [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
          [
            /\b(rct\w+) b/i
          ],
          [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
          [
            /\b(venue[\d ]{2,7}) b/i
          ],
          [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
          [
            /\b(q(?:mv|ta)\w+) b/i
          ],
          [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
          [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
          ],
          [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
          [
            /\b(tm\d{3}\w+) b/i
          ],
          [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
          [
            /\b(k88) b/i
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
          [
            /\b(nx\d{3}j) b/i
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
          [
            /\b(gen\d{3}) b.+49h/i
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
          [
            /\b(zur\d{3}) b/i
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
          [
            /\b((zeki)?tb.*\b) b/i
          ],
          [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
          [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i
          ],
          [[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
          [
            /\b(ns-?\w{0,9}) b/i
          ],
          [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
          [
            /\b((nxa|next)-?\w{0,9}) b/i
          ],
          [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
          [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
          ],
          [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
          [
            /\b(lvtel\-)?(v1[12]) b/i
          ],
          [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
          [
            /\b(ph-1) /i
          ],
          [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
          [
            /\b(v(100md|700na|7011|917g).*\b) b/i
          ],
          [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
          [
            /\b(trio[-\w\. ]+) b/i
          ],
          [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
          [
            /\btu_(1491) b/i
          ],
          [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
          [
            /(shield[\w ]+) b/i
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE, TABLET]],
          [
            /(sprint) (\w+)/i
          ],
          [VENDOR, MODEL, [TYPE, MOBILE]],
          [
            /(kin\.[onetw]{3})/i
          ],
          [[MODEL, /\./g, " "], [VENDOR, MICROSOFT], [TYPE, MOBILE]],
          [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
          [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
          [
            /smart-tv.+(samsung)/i
          ],
          [VENDOR, [TYPE, SMARTTV]],
          [
            /hbbtv.+maple;(\d+)/i
          ],
          [[MODEL, /^/, "SmartTV"], [VENDOR, SAMSUNG], [TYPE, SMARTTV]],
          [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
          ],
          [[VENDOR, LG], [TYPE, SMARTTV]],
          [
            /(apple) ?tv/i
          ],
          [VENDOR, [MODEL, APPLE + " TV"], [TYPE, SMARTTV]],
          [
            /crkey/i
          ],
          [[MODEL, CHROME + "cast"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],
          [
            /droid.+aft(\w)( bui|\))/i
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
          [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i
          ],
          [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
          [
            /(bravia[\w ]+)( bui|\))/i
          ],
          [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
          [
            /(mitv-\w{5}) bui/i
          ],
          [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
          [
            /Hbbtv.*(technisat) (.*);/i
          ],
          [VENDOR, MODEL, [TYPE, SMARTTV]],
          [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
          ],
          [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]],
          [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i
          ],
          [[TYPE, SMARTTV]],
          [
            /(ouya)/i,
            /(nintendo) ([wids3utch]+)/i
          ],
          [VENDOR, MODEL, [TYPE, CONSOLE]],
          [
            /droid.+; (shield) bui/i
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
          [
            /(playstation [345portablevi]+)/i
          ],
          [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
          [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
          [
            /((pebble))app/i
          ],
          [VENDOR, MODEL, [TYPE, WEARABLE]],
          [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
          [
            /droid.+; (glass) \d/i
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
          [
            /droid.+; (wt63?0{2,3})\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
          [
            /(quest( 2| pro)?)/i
          ],
          [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
          [
            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i
          ],
          [VENDOR, [TYPE, EMBEDDED]],
          [
            /(aeobc)\b/i
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],
          [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i
          ],
          [MODEL, [TYPE, MOBILE]],
          [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
          ],
          [MODEL, [TYPE, TABLET]],
          [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i
          ],
          [[TYPE, TABLET]],
          [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
          ],
          [[TYPE, MOBILE]],
          [
            /(android[-\w\. ]{0,9});.+buil/i
          ],
          [MODEL, [VENDOR, "Generic"]]
        ],
        engine: [
          [
            /windows.+ edge\/([\w\.]+)/i
          ],
          [VERSION, [NAME, EDGE + "HTML"]],
          [
            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i
          ],
          [VERSION, [NAME, "Blink"]],
          [
            /(presto)\/([\w\.]+)/i,
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
            /ekioh(flow)\/([\w\.]+)/i,
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
            /(icab)[\/ ]([23]\.[\d\.]+)/i,
            /\b(libweb)/i
          ],
          [NAME, VERSION],
          [
            /rv\:([\w\.]{1,9})\b.+(gecko)/i
          ],
          [VERSION, NAME]
        ],
        os: [
          [
            /microsoft (windows) (vista|xp)/i
          ],
          [NAME, VERSION],
          [
            /(windows) nt 6\.2; (arm)/i,
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
            /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
          ],
          [NAME, [VERSION, strMapper, windowsVersionMap]],
          [
            /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
          ],
          [[NAME, "Windows"], [VERSION, strMapper, windowsVersionMap]],
          [
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
            /ios;fbsv\/([\d\.]+)/i,
            /cfnetwork\/.+darwin/i
          ],
          [[VERSION, /_/g, "."], [NAME, "iOS"]],
          [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i
          ],
          [[NAME, MAC_OS], [VERSION, /_/g, "."]],
          [
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i
          ],
          [VERSION, NAME],
          [
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,
            /(tizen|kaios)[\/ ]([\w\.]+)/i,
            /\((series40);/i
          ],
          [NAME, VERSION],
          [
            /\(bb(10);/i
          ],
          [VERSION, [NAME, BLACKBERRY]],
          [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i
          ],
          [VERSION, [NAME, "Symbian"]],
          [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
          ],
          [VERSION, [NAME, FIREFOX + " OS"]],
          [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i
          ],
          [VERSION, [NAME, "webOS"]],
          [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i
          ],
          [VERSION, [NAME, "watchOS"]],
          [
            /crkey\/([\d\.]+)/i
          ],
          [VERSION, [NAME, CHROME + "cast"]],
          [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i
          ],
          [[NAME, CHROMIUM_OS], VERSION],
          [
            /panasonic;(viera)/i,
            /(netrange)mmh/i,
            /(nettv)\/(\d+\.[\w\.]+)/i,
            /(nintendo|playstation) ([wids345portablevuch]+)/i,
            /(xbox); +xbox ([^\);]+)/i,
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
            /(mint)[\/\(\) ]?(\w*)/i,
            /(mageia|vectorlinux)[; ]/i,
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
            /(hurd|linux) ?([\w\.]*)/i,
            /(gnu) ?([\w\.]*)/i,
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
            /(haiku) (\w+)/i
          ],
          [NAME, VERSION],
          [
            /(sunos) ?([\w\.\d]*)/i
          ],
          [[NAME, "Solaris"], VERSION],
          [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
            /(unix) ?([\w\.]*)/i
          ],
          [NAME, VERSION]
        ]
      };
      var UAParser = function(ua, extensions) {
        if (typeof ua === OBJ_TYPE) {
          extensions = ua;
          ua = undefined2;
        }
        if (!(this instanceof UAParser)) {
          return new UAParser(ua, extensions).getResult();
        }
        var _navigator = typeof window2 !== UNDEF_TYPE && window2.navigator ? window2.navigator : undefined2;
        var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
        var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined2;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;
        this.getBrowser = function() {
          var _browser = {};
          _browser[NAME] = undefined2;
          _browser[VERSION] = undefined2;
          rgxMapper.call(_browser, _ua, _rgxmap.browser);
          _browser[MAJOR] = majorize(_browser[VERSION]);
          if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
            _browser[NAME] = "Brave";
          }
          return _browser;
        };
        this.getCPU = function() {
          var _cpu = {};
          _cpu[ARCHITECTURE] = undefined2;
          rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
          return _cpu;
        };
        this.getDevice = function() {
          var _device = {};
          _device[VENDOR] = undefined2;
          _device[MODEL] = undefined2;
          _device[TYPE] = undefined2;
          rgxMapper.call(_device, _ua, _rgxmap.device);
          if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
            _device[TYPE] = MOBILE;
          }
          if (_isSelfNav && _device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
            _device[MODEL] = "iPad";
            _device[TYPE] = TABLET;
          }
          return _device;
        };
        this.getEngine = function() {
          var _engine = {};
          _engine[NAME] = undefined2;
          _engine[VERSION] = undefined2;
          rgxMapper.call(_engine, _ua, _rgxmap.engine);
          return _engine;
        };
        this.getOS = function() {
          var _os = {};
          _os[NAME] = undefined2;
          _os[VERSION] = undefined2;
          rgxMapper.call(_os, _ua, _rgxmap.os);
          if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != "Unknown") {
            _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS);
          }
          return _os;
        };
        this.getResult = function() {
          return {
            ua: this.getUA(),
            browser: this.getBrowser(),
            engine: this.getEngine(),
            os: this.getOS(),
            device: this.getDevice(),
            cpu: this.getCPU()
          };
        };
        this.getUA = function() {
          return _ua;
        };
        this.setUA = function(ua2) {
          _ua = typeof ua2 === STR_TYPE && ua2.length > UA_MAX_LENGTH ? trim(ua2, UA_MAX_LENGTH) : ua2;
          return this;
        };
        this.setUA(_ua);
        return this;
      };
      UAParser.VERSION = LIBVERSION;
      UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
      UAParser.CPU = enumerize([ARCHITECTURE]);
      UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
      UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);
      if (typeof exports !== UNDEF_TYPE) {
        if (typeof module !== UNDEF_TYPE && module.exports) {
          exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
      } else {
        if (typeof define === FUNC_TYPE && define.amd) {
          define(function() {
            return UAParser;
          });
        } else if (typeof window2 !== UNDEF_TYPE) {
          window2.UAParser = UAParser;
        }
      }
      var $3 = typeof window2 !== UNDEF_TYPE && (window2.jQuery || window2.Zepto);
      if ($3 && !$3.ua) {
        var parser = new UAParser();
        $3.ua = parser.getResult();
        $3.ua.get = function() {
          return parser.getUA();
        };
        $3.ua.set = function(ua) {
          parser.setUA(ua);
          var result = parser.getResult();
          for (var prop in result) {
            $3.ua[prop] = result[prop];
          }
        };
      }
    })(typeof window === "object" ? window : exports);
  }
});

// node_modules/sdp/sdp.js
var require_sdp = __commonJS({
  "node_modules/sdp/sdp.js"(exports, module) {
    "use strict";
    init_define_process_env();
    var SDPUtils2 = {};
    SDPUtils2.generateIdentifier = function() {
      return Math.random().toString(36).substring(2, 12);
    };
    SDPUtils2.localCName = SDPUtils2.generateIdentifier();
    SDPUtils2.splitLines = function(blob) {
      return blob.trim().split("\n").map((line) => line.trim());
    };
    SDPUtils2.splitSections = function(blob) {
      const parts = blob.split("\nm=");
      return parts.map((part, index) => (index > 0 ? "m=" + part : part).trim() + "\r\n");
    };
    SDPUtils2.getDescription = function(blob) {
      const sections = SDPUtils2.splitSections(blob);
      return sections && sections[0];
    };
    SDPUtils2.getMediaSections = function(blob) {
      const sections = SDPUtils2.splitSections(blob);
      sections.shift();
      return sections;
    };
    SDPUtils2.matchPrefix = function(blob, prefix) {
      return SDPUtils2.splitLines(blob).filter((line) => line.indexOf(prefix) === 0);
    };
    SDPUtils2.parseCandidate = function(line) {
      let parts;
      if (line.indexOf("a=candidate:") === 0) {
        parts = line.substring(12).split(" ");
      } else {
        parts = line.substring(10).split(" ");
      }
      const candidate = {
        foundation: parts[0],
        component: { 1: "rtp", 2: "rtcp" }[parts[1]] || parts[1],
        protocol: parts[2].toLowerCase(),
        priority: parseInt(parts[3], 10),
        ip: parts[4],
        address: parts[4],
        port: parseInt(parts[5], 10),
        type: parts[7]
      };
      for (let i10 = 8; i10 < parts.length; i10 += 2) {
        switch (parts[i10]) {
          case "raddr":
            candidate.relatedAddress = parts[i10 + 1];
            break;
          case "rport":
            candidate.relatedPort = parseInt(parts[i10 + 1], 10);
            break;
          case "tcptype":
            candidate.tcpType = parts[i10 + 1];
            break;
          case "ufrag":
            candidate.ufrag = parts[i10 + 1];
            candidate.usernameFragment = parts[i10 + 1];
            break;
          default:
            if (candidate[parts[i10]] === void 0) {
              candidate[parts[i10]] = parts[i10 + 1];
            }
            break;
        }
      }
      return candidate;
    };
    SDPUtils2.writeCandidate = function(candidate) {
      const sdp2 = [];
      sdp2.push(candidate.foundation);
      const component = candidate.component;
      if (component === "rtp") {
        sdp2.push(1);
      } else if (component === "rtcp") {
        sdp2.push(2);
      } else {
        sdp2.push(component);
      }
      sdp2.push(candidate.protocol.toUpperCase());
      sdp2.push(candidate.priority);
      sdp2.push(candidate.address || candidate.ip);
      sdp2.push(candidate.port);
      const type = candidate.type;
      sdp2.push("typ");
      sdp2.push(type);
      if (type !== "host" && candidate.relatedAddress && candidate.relatedPort) {
        sdp2.push("raddr");
        sdp2.push(candidate.relatedAddress);
        sdp2.push("rport");
        sdp2.push(candidate.relatedPort);
      }
      if (candidate.tcpType && candidate.protocol.toLowerCase() === "tcp") {
        sdp2.push("tcptype");
        sdp2.push(candidate.tcpType);
      }
      if (candidate.usernameFragment || candidate.ufrag) {
        sdp2.push("ufrag");
        sdp2.push(candidate.usernameFragment || candidate.ufrag);
      }
      return "candidate:" + sdp2.join(" ");
    };
    SDPUtils2.parseIceOptions = function(line) {
      return line.substring(14).split(" ");
    };
    SDPUtils2.parseRtpMap = function(line) {
      let parts = line.substring(9).split(" ");
      const parsed = {
        payloadType: parseInt(parts.shift(), 10)
      };
      parts = parts[0].split("/");
      parsed.name = parts[0];
      parsed.clockRate = parseInt(parts[1], 10);
      parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
      parsed.numChannels = parsed.channels;
      return parsed;
    };
    SDPUtils2.writeRtpMap = function(codec) {
      let pt3 = codec.payloadType;
      if (codec.preferredPayloadType !== void 0) {
        pt3 = codec.preferredPayloadType;
      }
      const channels = codec.channels || codec.numChannels || 1;
      return "a=rtpmap:" + pt3 + " " + codec.name + "/" + codec.clockRate + (channels !== 1 ? "/" + channels : "") + "\r\n";
    };
    SDPUtils2.parseExtmap = function(line) {
      const parts = line.substring(9).split(" ");
      return {
        id: parseInt(parts[0], 10),
        direction: parts[0].indexOf("/") > 0 ? parts[0].split("/")[1] : "sendrecv",
        uri: parts[1],
        attributes: parts.slice(2).join(" ")
      };
    };
    SDPUtils2.writeExtmap = function(headerExtension) {
      return "a=extmap:" + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== "sendrecv" ? "/" + headerExtension.direction : "") + " " + headerExtension.uri + (headerExtension.attributes ? " " + headerExtension.attributes : "") + "\r\n";
    };
    SDPUtils2.parseFmtp = function(line) {
      const parsed = {};
      let kv;
      const parts = line.substring(line.indexOf(" ") + 1).split(";");
      for (let j4 = 0; j4 < parts.length; j4++) {
        kv = parts[j4].trim().split("=");
        parsed[kv[0].trim()] = kv[1];
      }
      return parsed;
    };
    SDPUtils2.writeFmtp = function(codec) {
      let line = "";
      let pt3 = codec.payloadType;
      if (codec.preferredPayloadType !== void 0) {
        pt3 = codec.preferredPayloadType;
      }
      if (codec.parameters && Object.keys(codec.parameters).length) {
        const params = [];
        Object.keys(codec.parameters).forEach((param) => {
          if (codec.parameters[param] !== void 0) {
            params.push(param + "=" + codec.parameters[param]);
          } else {
            params.push(param);
          }
        });
        line += "a=fmtp:" + pt3 + " " + params.join(";") + "\r\n";
      }
      return line;
    };
    SDPUtils2.parseRtcpFb = function(line) {
      const parts = line.substring(line.indexOf(" ") + 1).split(" ");
      return {
        type: parts.shift(),
        parameter: parts.join(" ")
      };
    };
    SDPUtils2.writeRtcpFb = function(codec) {
      let lines = "";
      let pt3 = codec.payloadType;
      if (codec.preferredPayloadType !== void 0) {
        pt3 = codec.preferredPayloadType;
      }
      if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
        codec.rtcpFeedback.forEach((fb) => {
          lines += "a=rtcp-fb:" + pt3 + " " + fb.type + (fb.parameter && fb.parameter.length ? " " + fb.parameter : "") + "\r\n";
        });
      }
      return lines;
    };
    SDPUtils2.parseSsrcMedia = function(line) {
      const sp = line.indexOf(" ");
      const parts = {
        ssrc: parseInt(line.substring(7, sp), 10)
      };
      const colon = line.indexOf(":", sp);
      if (colon > -1) {
        parts.attribute = line.substring(sp + 1, colon);
        parts.value = line.substring(colon + 1);
      } else {
        parts.attribute = line.substring(sp + 1);
      }
      return parts;
    };
    SDPUtils2.parseSsrcGroup = function(line) {
      const parts = line.substring(13).split(" ");
      return {
        semantics: parts.shift(),
        ssrcs: parts.map((ssrc) => parseInt(ssrc, 10))
      };
    };
    SDPUtils2.getMid = function(mediaSection) {
      const mid = SDPUtils2.matchPrefix(mediaSection, "a=mid:")[0];
      if (mid) {
        return mid.substring(6);
      }
    };
    SDPUtils2.parseFingerprint = function(line) {
      const parts = line.substring(14).split(" ");
      return {
        algorithm: parts[0].toLowerCase(),
        value: parts[1].toUpperCase()
      };
    };
    SDPUtils2.getDtlsParameters = function(mediaSection, sessionpart) {
      const lines = SDPUtils2.matchPrefix(
        mediaSection + sessionpart,
        "a=fingerprint:"
      );
      return {
        role: "auto",
        fingerprints: lines.map(SDPUtils2.parseFingerprint)
      };
    };
    SDPUtils2.writeDtlsParameters = function(params, setupType) {
      let sdp2 = "a=setup:" + setupType + "\r\n";
      params.fingerprints.forEach((fp) => {
        sdp2 += "a=fingerprint:" + fp.algorithm + " " + fp.value + "\r\n";
      });
      return sdp2;
    };
    SDPUtils2.parseCryptoLine = function(line) {
      const parts = line.substring(9).split(" ");
      return {
        tag: parseInt(parts[0], 10),
        cryptoSuite: parts[1],
        keyParams: parts[2],
        sessionParams: parts.slice(3)
      };
    };
    SDPUtils2.writeCryptoLine = function(parameters) {
      return "a=crypto:" + parameters.tag + " " + parameters.cryptoSuite + " " + (typeof parameters.keyParams === "object" ? SDPUtils2.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? " " + parameters.sessionParams.join(" ") : "") + "\r\n";
    };
    SDPUtils2.parseCryptoKeyParams = function(keyParams) {
      if (keyParams.indexOf("inline:") !== 0) {
        return null;
      }
      const parts = keyParams.substring(7).split("|");
      return {
        keyMethod: "inline",
        keySalt: parts[0],
        lifeTime: parts[1],
        mkiValue: parts[2] ? parts[2].split(":")[0] : void 0,
        mkiLength: parts[2] ? parts[2].split(":")[1] : void 0
      };
    };
    SDPUtils2.writeCryptoKeyParams = function(keyParams) {
      return keyParams.keyMethod + ":" + keyParams.keySalt + (keyParams.lifeTime ? "|" + keyParams.lifeTime : "") + (keyParams.mkiValue && keyParams.mkiLength ? "|" + keyParams.mkiValue + ":" + keyParams.mkiLength : "");
    };
    SDPUtils2.getCryptoParameters = function(mediaSection, sessionpart) {
      const lines = SDPUtils2.matchPrefix(
        mediaSection + sessionpart,
        "a=crypto:"
      );
      return lines.map(SDPUtils2.parseCryptoLine);
    };
    SDPUtils2.getIceParameters = function(mediaSection, sessionpart) {
      const ufrag = SDPUtils2.matchPrefix(
        mediaSection + sessionpart,
        "a=ice-ufrag:"
      )[0];
      const pwd = SDPUtils2.matchPrefix(
        mediaSection + sessionpart,
        "a=ice-pwd:"
      )[0];
      if (!(ufrag && pwd)) {
        return null;
      }
      return {
        usernameFragment: ufrag.substring(12),
        password: pwd.substring(10)
      };
    };
    SDPUtils2.writeIceParameters = function(params) {
      let sdp2 = "a=ice-ufrag:" + params.usernameFragment + "\r\na=ice-pwd:" + params.password + "\r\n";
      if (params.iceLite) {
        sdp2 += "a=ice-lite\r\n";
      }
      return sdp2;
    };
    SDPUtils2.parseRtpParameters = function(mediaSection) {
      const description = {
        codecs: [],
        headerExtensions: [],
        fecMechanisms: [],
        rtcp: []
      };
      const lines = SDPUtils2.splitLines(mediaSection);
      const mline = lines[0].split(" ");
      description.profile = mline[2];
      for (let i10 = 3; i10 < mline.length; i10++) {
        const pt3 = mline[i10];
        const rtpmapline = SDPUtils2.matchPrefix(
          mediaSection,
          "a=rtpmap:" + pt3 + " "
        )[0];
        if (rtpmapline) {
          const codec = SDPUtils2.parseRtpMap(rtpmapline);
          const fmtps = SDPUtils2.matchPrefix(
            mediaSection,
            "a=fmtp:" + pt3 + " "
          );
          codec.parameters = fmtps.length ? SDPUtils2.parseFmtp(fmtps[0]) : {};
          codec.rtcpFeedback = SDPUtils2.matchPrefix(
            mediaSection,
            "a=rtcp-fb:" + pt3 + " "
          ).map(SDPUtils2.parseRtcpFb);
          description.codecs.push(codec);
          switch (codec.name.toUpperCase()) {
            case "RED":
            case "ULPFEC":
              description.fecMechanisms.push(codec.name.toUpperCase());
              break;
            default:
              break;
          }
        }
      }
      SDPUtils2.matchPrefix(mediaSection, "a=extmap:").forEach((line) => {
        description.headerExtensions.push(SDPUtils2.parseExtmap(line));
      });
      const wildcardRtcpFb = SDPUtils2.matchPrefix(mediaSection, "a=rtcp-fb:* ").map(SDPUtils2.parseRtcpFb);
      description.codecs.forEach((codec) => {
        wildcardRtcpFb.forEach((fb) => {
          const duplicate = codec.rtcpFeedback.find((existingFeedback) => {
            return existingFeedback.type === fb.type && existingFeedback.parameter === fb.parameter;
          });
          if (!duplicate) {
            codec.rtcpFeedback.push(fb);
          }
        });
      });
      return description;
    };
    SDPUtils2.writeRtpDescription = function(kind, caps) {
      let sdp2 = "";
      sdp2 += "m=" + kind + " ";
      sdp2 += caps.codecs.length > 0 ? "9" : "0";
      sdp2 += " " + (caps.profile || "UDP/TLS/RTP/SAVPF") + " ";
      sdp2 += caps.codecs.map((codec) => {
        if (codec.preferredPayloadType !== void 0) {
          return codec.preferredPayloadType;
        }
        return codec.payloadType;
      }).join(" ") + "\r\n";
      sdp2 += "c=IN IP4 0.0.0.0\r\n";
      sdp2 += "a=rtcp:9 IN IP4 0.0.0.0\r\n";
      caps.codecs.forEach((codec) => {
        sdp2 += SDPUtils2.writeRtpMap(codec);
        sdp2 += SDPUtils2.writeFmtp(codec);
        sdp2 += SDPUtils2.writeRtcpFb(codec);
      });
      let maxptime = 0;
      caps.codecs.forEach((codec) => {
        if (codec.maxptime > maxptime) {
          maxptime = codec.maxptime;
        }
      });
      if (maxptime > 0) {
        sdp2 += "a=maxptime:" + maxptime + "\r\n";
      }
      if (caps.headerExtensions) {
        caps.headerExtensions.forEach((extension) => {
          sdp2 += SDPUtils2.writeExtmap(extension);
        });
      }
      return sdp2;
    };
    SDPUtils2.parseRtpEncodingParameters = function(mediaSection) {
      const encodingParameters = [];
      const description = SDPUtils2.parseRtpParameters(mediaSection);
      const hasRed = description.fecMechanisms.indexOf("RED") !== -1;
      const hasUlpfec = description.fecMechanisms.indexOf("ULPFEC") !== -1;
      const ssrcs = SDPUtils2.matchPrefix(mediaSection, "a=ssrc:").map((line) => SDPUtils2.parseSsrcMedia(line)).filter((parts) => parts.attribute === "cname");
      const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
      let secondarySsrc;
      const flows = SDPUtils2.matchPrefix(mediaSection, "a=ssrc-group:FID").map((line) => {
        const parts = line.substring(17).split(" ");
        return parts.map((part) => parseInt(part, 10));
      });
      if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
        secondarySsrc = flows[0][1];
      }
      description.codecs.forEach((codec) => {
        if (codec.name.toUpperCase() === "RTX" && codec.parameters.apt) {
          let encParam = {
            ssrc: primarySsrc,
            codecPayloadType: parseInt(codec.parameters.apt, 10)
          };
          if (primarySsrc && secondarySsrc) {
            encParam.rtx = { ssrc: secondarySsrc };
          }
          encodingParameters.push(encParam);
          if (hasRed) {
            encParam = JSON.parse(JSON.stringify(encParam));
            encParam.fec = {
              ssrc: primarySsrc,
              mechanism: hasUlpfec ? "red+ulpfec" : "red"
            };
            encodingParameters.push(encParam);
          }
        }
      });
      if (encodingParameters.length === 0 && primarySsrc) {
        encodingParameters.push({
          ssrc: primarySsrc
        });
      }
      let bandwidth = SDPUtils2.matchPrefix(mediaSection, "b=");
      if (bandwidth.length) {
        if (bandwidth[0].indexOf("b=TIAS:") === 0) {
          bandwidth = parseInt(bandwidth[0].substring(7), 10);
        } else if (bandwidth[0].indexOf("b=AS:") === 0) {
          bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1e3 * 0.95 - 50 * 40 * 8;
        } else {
          bandwidth = void 0;
        }
        encodingParameters.forEach((params) => {
          params.maxBitrate = bandwidth;
        });
      }
      return encodingParameters;
    };
    SDPUtils2.parseRtcpParameters = function(mediaSection) {
      const rtcpParameters = {};
      const remoteSsrc = SDPUtils2.matchPrefix(mediaSection, "a=ssrc:").map((line) => SDPUtils2.parseSsrcMedia(line)).filter((obj) => obj.attribute === "cname")[0];
      if (remoteSsrc) {
        rtcpParameters.cname = remoteSsrc.value;
        rtcpParameters.ssrc = remoteSsrc.ssrc;
      }
      const rsize = SDPUtils2.matchPrefix(mediaSection, "a=rtcp-rsize");
      rtcpParameters.reducedSize = rsize.length > 0;
      rtcpParameters.compound = rsize.length === 0;
      const mux = SDPUtils2.matchPrefix(mediaSection, "a=rtcp-mux");
      rtcpParameters.mux = mux.length > 0;
      return rtcpParameters;
    };
    SDPUtils2.writeRtcpParameters = function(rtcpParameters) {
      let sdp2 = "";
      if (rtcpParameters.reducedSize) {
        sdp2 += "a=rtcp-rsize\r\n";
      }
      if (rtcpParameters.mux) {
        sdp2 += "a=rtcp-mux\r\n";
      }
      if (rtcpParameters.ssrc !== void 0 && rtcpParameters.cname) {
        sdp2 += "a=ssrc:" + rtcpParameters.ssrc + " cname:" + rtcpParameters.cname + "\r\n";
      }
      return sdp2;
    };
    SDPUtils2.parseMsid = function(mediaSection) {
      let parts;
      const spec = SDPUtils2.matchPrefix(mediaSection, "a=msid:");
      if (spec.length === 1) {
        parts = spec[0].substring(7).split(" ");
        return { stream: parts[0], track: parts[1] };
      }
      const planB = SDPUtils2.matchPrefix(mediaSection, "a=ssrc:").map((line) => SDPUtils2.parseSsrcMedia(line)).filter((msidParts) => msidParts.attribute === "msid");
      if (planB.length > 0) {
        parts = planB[0].value.split(" ");
        return { stream: parts[0], track: parts[1] };
      }
    };
    SDPUtils2.parseSctpDescription = function(mediaSection) {
      const mline = SDPUtils2.parseMLine(mediaSection);
      const maxSizeLine = SDPUtils2.matchPrefix(mediaSection, "a=max-message-size:");
      let maxMessageSize;
      if (maxSizeLine.length > 0) {
        maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
      }
      if (isNaN(maxMessageSize)) {
        maxMessageSize = 65536;
      }
      const sctpPort = SDPUtils2.matchPrefix(mediaSection, "a=sctp-port:");
      if (sctpPort.length > 0) {
        return {
          port: parseInt(sctpPort[0].substring(12), 10),
          protocol: mline.fmt,
          maxMessageSize
        };
      }
      const sctpMapLines = SDPUtils2.matchPrefix(mediaSection, "a=sctpmap:");
      if (sctpMapLines.length > 0) {
        const parts = sctpMapLines[0].substring(10).split(" ");
        return {
          port: parseInt(parts[0], 10),
          protocol: parts[1],
          maxMessageSize
        };
      }
    };
    SDPUtils2.writeSctpDescription = function(media, sctp) {
      let output = [];
      if (media.protocol !== "DTLS/SCTP") {
        output = [
          "m=" + media.kind + " 9 " + media.protocol + " " + sctp.protocol + "\r\n",
          "c=IN IP4 0.0.0.0\r\n",
          "a=sctp-port:" + sctp.port + "\r\n"
        ];
      } else {
        output = [
          "m=" + media.kind + " 9 " + media.protocol + " " + sctp.port + "\r\n",
          "c=IN IP4 0.0.0.0\r\n",
          "a=sctpmap:" + sctp.port + " " + sctp.protocol + " 65535\r\n"
        ];
      }
      if (sctp.maxMessageSize !== void 0) {
        output.push("a=max-message-size:" + sctp.maxMessageSize + "\r\n");
      }
      return output.join("");
    };
    SDPUtils2.generateSessionId = function() {
      return Math.random().toString().substr(2, 22);
    };
    SDPUtils2.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
      let sessionId;
      const version = sessVer !== void 0 ? sessVer : 2;
      if (sessId) {
        sessionId = sessId;
      } else {
        sessionId = SDPUtils2.generateSessionId();
      }
      const user = sessUser || "thisisadapterortc";
      return "v=0\r\no=" + user + " " + sessionId + " " + version + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n";
    };
    SDPUtils2.getDirection = function(mediaSection, sessionpart) {
      const lines = SDPUtils2.splitLines(mediaSection);
      for (let i10 = 0; i10 < lines.length; i10++) {
        switch (lines[i10]) {
          case "a=sendrecv":
          case "a=sendonly":
          case "a=recvonly":
          case "a=inactive":
            return lines[i10].substring(2);
          default:
        }
      }
      if (sessionpart) {
        return SDPUtils2.getDirection(sessionpart);
      }
      return "sendrecv";
    };
    SDPUtils2.getKind = function(mediaSection) {
      const lines = SDPUtils2.splitLines(mediaSection);
      const mline = lines[0].split(" ");
      return mline[0].substring(2);
    };
    SDPUtils2.isRejected = function(mediaSection) {
      return mediaSection.split(" ", 2)[1] === "0";
    };
    SDPUtils2.parseMLine = function(mediaSection) {
      const lines = SDPUtils2.splitLines(mediaSection);
      const parts = lines[0].substring(2).split(" ");
      return {
        kind: parts[0],
        port: parseInt(parts[1], 10),
        protocol: parts[2],
        fmt: parts.slice(3).join(" ")
      };
    };
    SDPUtils2.parseOLine = function(mediaSection) {
      const line = SDPUtils2.matchPrefix(mediaSection, "o=")[0];
      const parts = line.substring(2).split(" ");
      return {
        username: parts[0],
        sessionId: parts[1],
        sessionVersion: parseInt(parts[2], 10),
        netType: parts[3],
        addressType: parts[4],
        address: parts[5]
      };
    };
    SDPUtils2.isValidSDP = function(blob) {
      if (typeof blob !== "string" || blob.length === 0) {
        return false;
      }
      const lines = SDPUtils2.splitLines(blob);
      for (let i10 = 0; i10 < lines.length; i10++) {
        if (lines[i10].length < 2 || lines[i10].charAt(1) !== "=") {
          return false;
        }
      }
      return true;
    };
    if (typeof module === "object") {
      module.exports = SDPUtils2;
    }
  }
});

// node_modules/eventemitter2/lib/eventemitter2.js
var require_eventemitter2 = __commonJS({
  "node_modules/eventemitter2/lib/eventemitter2.js"(exports, module) {
    init_define_process_env();
    !function(undefined2) {
      var hasOwnProperty2 = Object.hasOwnProperty;
      var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
        return Object.prototype.toString.call(obj) === "[object Array]";
      };
      var defaultMaxListeners = 10;
      var nextTickSupported = typeof process == "object" && typeof process.nextTick == "function";
      var symbolsSupported = typeof Symbol === "function";
      var reflectSupported = typeof Reflect === "object";
      var setImmediateSupported = typeof setImmediate === "function";
      var _setImmediate = setImmediateSupported ? setImmediate : setTimeout;
      var ownKeys = symbolsSupported ? reflectSupported && typeof Reflect.ownKeys === "function" ? Reflect.ownKeys : function(obj) {
        var arr = Object.getOwnPropertyNames(obj);
        arr.push.apply(arr, Object.getOwnPropertySymbols(obj));
        return arr;
      } : Object.keys;
      function init() {
        this._events = {};
        if (this._conf) {
          configure.call(this, this._conf);
        }
      }
      function configure(conf) {
        if (conf) {
          this._conf = conf;
          conf.delimiter && (this.delimiter = conf.delimiter);
          if (conf.maxListeners !== undefined2) {
            this._maxListeners = conf.maxListeners;
          }
          conf.wildcard && (this.wildcard = conf.wildcard);
          conf.newListener && (this._newListener = conf.newListener);
          conf.removeListener && (this._removeListener = conf.removeListener);
          conf.verboseMemoryLeak && (this.verboseMemoryLeak = conf.verboseMemoryLeak);
          conf.ignoreErrors && (this.ignoreErrors = conf.ignoreErrors);
          if (this.wildcard) {
            this.listenerTree = {};
          }
        }
      }
      function logPossibleMemoryLeak(count, eventName) {
        var errorMsg = "(node) warning: possible EventEmitter memory leak detected. " + count + " listeners added. Use emitter.setMaxListeners() to increase limit.";
        if (this.verboseMemoryLeak) {
          errorMsg += " Event name: " + eventName + ".";
        }
        if (typeof process !== "undefined" && process.emitWarning) {
          var e14 = new Error(errorMsg);
          e14.name = "MaxListenersExceededWarning";
          e14.emitter = this;
          e14.count = count;
          process.emitWarning(e14);
        } else {
          console.error(errorMsg);
          if (console.trace) {
            console.trace();
          }
        }
      }
      var toArray = function(a4, b4, c5) {
        var n18 = arguments.length;
        switch (n18) {
          case 0:
            return [];
          case 1:
            return [a4];
          case 2:
            return [a4, b4];
          case 3:
            return [a4, b4, c5];
          default:
            var arr = new Array(n18);
            while (n18--) {
              arr[n18] = arguments[n18];
            }
            return arr;
        }
      };
      function toObject(keys, values) {
        var obj = {};
        var key;
        var len = keys.length;
        var valuesCount = values ? values.length : 0;
        for (var i10 = 0; i10 < len; i10++) {
          key = keys[i10];
          obj[key] = i10 < valuesCount ? values[i10] : undefined2;
        }
        return obj;
      }
      function TargetObserver(emitter, target, options) {
        this._emitter = emitter;
        this._target = target;
        this._listeners = {};
        this._listenersCount = 0;
        var on2, off;
        if (options.on || options.off) {
          on2 = options.on;
          off = options.off;
        }
        if (target.addEventListener) {
          on2 = target.addEventListener;
          off = target.removeEventListener;
        } else if (target.addListener) {
          on2 = target.addListener;
          off = target.removeListener;
        } else if (target.on) {
          on2 = target.on;
          off = target.off;
        }
        if (!on2 && !off) {
          throw Error("target does not implement any known event API");
        }
        if (typeof on2 !== "function") {
          throw TypeError("on method must be a function");
        }
        if (typeof off !== "function") {
          throw TypeError("off method must be a function");
        }
        this._on = on2;
        this._off = off;
        var _observers = emitter._observers;
        if (_observers) {
          _observers.push(this);
        } else {
          emitter._observers = [this];
        }
      }
      Object.assign(TargetObserver.prototype, {
        subscribe: function(event, localEvent, reducer) {
          var observer = this;
          var target = this._target;
          var emitter = this._emitter;
          var listeners = this._listeners;
          var handler = function() {
            var args = toArray.apply(null, arguments);
            var eventObj = {
              data: args,
              name: localEvent,
              original: event
            };
            if (reducer) {
              var result = reducer.call(target, eventObj);
              if (result !== false) {
                emitter.emit.apply(emitter, [eventObj.name].concat(args));
              }
              return;
            }
            emitter.emit.apply(emitter, [localEvent].concat(args));
          };
          if (listeners[event]) {
            throw Error("Event '" + event + "' is already listening");
          }
          this._listenersCount++;
          if (emitter._newListener && emitter._removeListener && !observer._onNewListener) {
            this._onNewListener = function(_event) {
              if (_event === localEvent && listeners[event] === null) {
                listeners[event] = handler;
                observer._on.call(target, event, handler);
              }
            };
            emitter.on("newListener", this._onNewListener);
            this._onRemoveListener = function(_event) {
              if (_event === localEvent && !emitter.hasListeners(_event) && listeners[event]) {
                listeners[event] = null;
                observer._off.call(target, event, handler);
              }
            };
            listeners[event] = null;
            emitter.on("removeListener", this._onRemoveListener);
          } else {
            listeners[event] = handler;
            observer._on.call(target, event, handler);
          }
        },
        unsubscribe: function(event) {
          var observer = this;
          var listeners = this._listeners;
          var emitter = this._emitter;
          var handler;
          var events;
          var off = this._off;
          var target = this._target;
          var i10;
          if (event && typeof event !== "string") {
            throw TypeError("event must be a string");
          }
          function clearRefs() {
            if (observer._onNewListener) {
              emitter.off("newListener", observer._onNewListener);
              emitter.off("removeListener", observer._onRemoveListener);
              observer._onNewListener = null;
              observer._onRemoveListener = null;
            }
            var index = findTargetIndex.call(emitter, observer);
            emitter._observers.splice(index, 1);
          }
          if (event) {
            handler = listeners[event];
            if (!handler)
              return;
            off.call(target, event, handler);
            delete listeners[event];
            if (!--this._listenersCount) {
              clearRefs();
            }
          } else {
            events = ownKeys(listeners);
            i10 = events.length;
            while (i10-- > 0) {
              event = events[i10];
              off.call(target, event, listeners[event]);
            }
            this._listeners = {};
            this._listenersCount = 0;
            clearRefs();
          }
        }
      });
      function resolveOptions(options, schema, reducers, allowUnknown) {
        var computedOptions = Object.assign({}, schema);
        if (!options)
          return computedOptions;
        if (typeof options !== "object") {
          throw TypeError("options must be an object");
        }
        var keys = Object.keys(options);
        var length = keys.length;
        var option, value;
        var reducer;
        function reject(reason) {
          throw Error('Invalid "' + option + '" option value' + (reason ? ". Reason: " + reason : ""));
        }
        for (var i10 = 0; i10 < length; i10++) {
          option = keys[i10];
          if (!allowUnknown && !hasOwnProperty2.call(schema, option)) {
            throw Error('Unknown "' + option + '" option');
          }
          value = options[option];
          if (value !== undefined2) {
            reducer = reducers[option];
            computedOptions[option] = reducer ? reducer(value, reject) : value;
          }
        }
        return computedOptions;
      }
      function constructorReducer(value, reject) {
        if (typeof value !== "function" || !value.hasOwnProperty("prototype")) {
          reject("value must be a constructor");
        }
        return value;
      }
      function makeTypeReducer(types) {
        var message = "value must be type of " + types.join("|");
        var len = types.length;
        var firstType = types[0];
        var secondType = types[1];
        if (len === 1) {
          return function(v10, reject) {
            if (typeof v10 === firstType) {
              return v10;
            }
            reject(message);
          };
        }
        if (len === 2) {
          return function(v10, reject) {
            var kind = typeof v10;
            if (kind === firstType || kind === secondType)
              return v10;
            reject(message);
          };
        }
        return function(v10, reject) {
          var kind = typeof v10;
          var i10 = len;
          while (i10-- > 0) {
            if (kind === types[i10])
              return v10;
          }
          reject(message);
        };
      }
      var functionReducer = makeTypeReducer(["function"]);
      var objectFunctionReducer = makeTypeReducer(["object", "function"]);
      function makeCancelablePromise(Promise2, executor, options) {
        var isCancelable;
        var callbacks;
        var timer = 0;
        var subscriptionClosed;
        var promise = new Promise2(function(resolve, reject, onCancel) {
          options = resolveOptions(options, {
            timeout: 0,
            overload: false
          }, {
            timeout: function(value, reject2) {
              value *= 1;
              if (typeof value !== "number" || value < 0 || !Number.isFinite(value)) {
                reject2("timeout must be a positive number");
              }
              return value;
            }
          });
          isCancelable = !options.overload && typeof Promise2.prototype.cancel === "function" && typeof onCancel === "function";
          function cleanup() {
            if (callbacks) {
              callbacks = null;
            }
            if (timer) {
              clearTimeout(timer);
              timer = 0;
            }
          }
          var _resolve = function(value) {
            cleanup();
            resolve(value);
          };
          var _reject = function(err) {
            cleanup();
            reject(err);
          };
          if (isCancelable) {
            executor(_resolve, _reject, onCancel);
          } else {
            callbacks = [function(reason) {
              _reject(reason || Error("canceled"));
            }];
            executor(_resolve, _reject, function(cb) {
              if (subscriptionClosed) {
                throw Error("Unable to subscribe on cancel event asynchronously");
              }
              if (typeof cb !== "function") {
                throw TypeError("onCancel callback must be a function");
              }
              callbacks.push(cb);
            });
            subscriptionClosed = true;
          }
          if (options.timeout > 0) {
            timer = setTimeout(function() {
              var reason = Error("timeout");
              reason.code = "ETIMEDOUT";
              timer = 0;
              promise.cancel(reason);
              reject(reason);
            }, options.timeout);
          }
        });
        if (!isCancelable) {
          promise.cancel = function(reason) {
            if (!callbacks) {
              return;
            }
            var length = callbacks.length;
            for (var i10 = 1; i10 < length; i10++) {
              callbacks[i10](reason);
            }
            callbacks[0](reason);
            callbacks = null;
          };
        }
        return promise;
      }
      function findTargetIndex(observer) {
        var observers = this._observers;
        if (!observers) {
          return -1;
        }
        var len = observers.length;
        for (var i10 = 0; i10 < len; i10++) {
          if (observers[i10]._target === observer)
            return i10;
        }
        return -1;
      }
      function searchListenerTree(handlers, type, tree, i10, typeLength) {
        if (!tree) {
          return null;
        }
        if (i10 === 0) {
          var kind = typeof type;
          if (kind === "string") {
            var ns2, n18, l5 = 0, j4 = 0, delimiter = this.delimiter, dl = delimiter.length;
            if ((n18 = type.indexOf(delimiter)) !== -1) {
              ns2 = new Array(5);
              do {
                ns2[l5++] = type.slice(j4, n18);
                j4 = n18 + dl;
              } while ((n18 = type.indexOf(delimiter, j4)) !== -1);
              ns2[l5++] = type.slice(j4);
              type = ns2;
              typeLength = l5;
            } else {
              type = [type];
              typeLength = 1;
            }
          } else if (kind === "object") {
            typeLength = type.length;
          } else {
            type = [type];
            typeLength = 1;
          }
        }
        var listeners = null, branch, xTree, xxTree, isolatedBranch, endReached, currentType = type[i10], nextType = type[i10 + 1], branches, _listeners;
        if (i10 === typeLength) {
          if (tree._listeners) {
            if (typeof tree._listeners === "function") {
              handlers && handlers.push(tree._listeners);
              listeners = [tree];
            } else {
              handlers && handlers.push.apply(handlers, tree._listeners);
              listeners = [tree];
            }
          }
        } else {
          if (currentType === "*") {
            branches = ownKeys(tree);
            n18 = branches.length;
            while (n18-- > 0) {
              branch = branches[n18];
              if (branch !== "_listeners") {
                _listeners = searchListenerTree(handlers, type, tree[branch], i10 + 1, typeLength);
                if (_listeners) {
                  if (listeners) {
                    listeners.push.apply(listeners, _listeners);
                  } else {
                    listeners = _listeners;
                  }
                }
              }
            }
            return listeners;
          } else if (currentType === "**") {
            endReached = i10 + 1 === typeLength || i10 + 2 === typeLength && nextType === "*";
            if (endReached && tree._listeners) {
              listeners = searchListenerTree(handlers, type, tree, typeLength, typeLength);
            }
            branches = ownKeys(tree);
            n18 = branches.length;
            while (n18-- > 0) {
              branch = branches[n18];
              if (branch !== "_listeners") {
                if (branch === "*" || branch === "**") {
                  if (tree[branch]._listeners && !endReached) {
                    _listeners = searchListenerTree(handlers, type, tree[branch], typeLength, typeLength);
                    if (_listeners) {
                      if (listeners) {
                        listeners.push.apply(listeners, _listeners);
                      } else {
                        listeners = _listeners;
                      }
                    }
                  }
                  _listeners = searchListenerTree(handlers, type, tree[branch], i10, typeLength);
                } else if (branch === nextType) {
                  _listeners = searchListenerTree(handlers, type, tree[branch], i10 + 2, typeLength);
                } else {
                  _listeners = searchListenerTree(handlers, type, tree[branch], i10, typeLength);
                }
                if (_listeners) {
                  if (listeners) {
                    listeners.push.apply(listeners, _listeners);
                  } else {
                    listeners = _listeners;
                  }
                }
              }
            }
            return listeners;
          } else if (tree[currentType]) {
            listeners = searchListenerTree(handlers, type, tree[currentType], i10 + 1, typeLength);
          }
        }
        xTree = tree["*"];
        if (xTree) {
          searchListenerTree(handlers, type, xTree, i10 + 1, typeLength);
        }
        xxTree = tree["**"];
        if (xxTree) {
          if (i10 < typeLength) {
            if (xxTree._listeners) {
              searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
            }
            branches = ownKeys(xxTree);
            n18 = branches.length;
            while (n18-- > 0) {
              branch = branches[n18];
              if (branch !== "_listeners") {
                if (branch === nextType) {
                  searchListenerTree(handlers, type, xxTree[branch], i10 + 2, typeLength);
                } else if (branch === currentType) {
                  searchListenerTree(handlers, type, xxTree[branch], i10 + 1, typeLength);
                } else {
                  isolatedBranch = {};
                  isolatedBranch[branch] = xxTree[branch];
                  searchListenerTree(handlers, type, { "**": isolatedBranch }, i10 + 1, typeLength);
                }
              }
            }
          } else if (xxTree._listeners) {
            searchListenerTree(handlers, type, xxTree, typeLength, typeLength);
          } else if (xxTree["*"] && xxTree["*"]._listeners) {
            searchListenerTree(handlers, type, xxTree["*"], typeLength, typeLength);
          }
        }
        return listeners;
      }
      function growListenerTree(type, listener, prepend) {
        var len = 0, j4 = 0, i10, delimiter = this.delimiter, dl = delimiter.length, ns2;
        if (typeof type === "string") {
          if ((i10 = type.indexOf(delimiter)) !== -1) {
            ns2 = new Array(5);
            do {
              ns2[len++] = type.slice(j4, i10);
              j4 = i10 + dl;
            } while ((i10 = type.indexOf(delimiter, j4)) !== -1);
            ns2[len++] = type.slice(j4);
          } else {
            ns2 = [type];
            len = 1;
          }
        } else {
          ns2 = type;
          len = type.length;
        }
        if (len > 1) {
          for (i10 = 0; i10 + 1 < len; i10++) {
            if (ns2[i10] === "**" && ns2[i10 + 1] === "**") {
              return;
            }
          }
        }
        var tree = this.listenerTree, name;
        for (i10 = 0; i10 < len; i10++) {
          name = ns2[i10];
          tree = tree[name] || (tree[name] = {});
          if (i10 === len - 1) {
            if (!tree._listeners) {
              tree._listeners = listener;
            } else {
              if (typeof tree._listeners === "function") {
                tree._listeners = [tree._listeners];
              }
              if (prepend) {
                tree._listeners.unshift(listener);
              } else {
                tree._listeners.push(listener);
              }
              if (!tree._listeners.warned && this._maxListeners > 0 && tree._listeners.length > this._maxListeners) {
                tree._listeners.warned = true;
                logPossibleMemoryLeak.call(this, tree._listeners.length, name);
              }
            }
            return true;
          }
        }
        return true;
      }
      function collectTreeEvents(tree, events, root2, asArray) {
        var branches = ownKeys(tree);
        var i10 = branches.length;
        var branch, branchName, path;
        var hasListeners = tree["_listeners"];
        var isArrayPath;
        while (i10-- > 0) {
          branchName = branches[i10];
          branch = tree[branchName];
          if (branchName === "_listeners") {
            path = root2;
          } else {
            path = root2 ? root2.concat(branchName) : [branchName];
          }
          isArrayPath = asArray || typeof branchName === "symbol";
          hasListeners && events.push(isArrayPath ? path : path.join(this.delimiter));
          if (typeof branch === "object") {
            collectTreeEvents.call(this, branch, events, path, isArrayPath);
          }
        }
        return events;
      }
      function recursivelyGarbageCollect(root2) {
        var keys = ownKeys(root2);
        var i10 = keys.length;
        var obj, key, flag;
        while (i10-- > 0) {
          key = keys[i10];
          obj = root2[key];
          if (obj) {
            flag = true;
            if (key !== "_listeners" && !recursivelyGarbageCollect(obj)) {
              delete root2[key];
            }
          }
        }
        return flag;
      }
      function Listener(emitter, event, listener) {
        this.emitter = emitter;
        this.event = event;
        this.listener = listener;
      }
      Listener.prototype.off = function() {
        this.emitter.off(this.event, this.listener);
        return this;
      };
      function setupListener(event, listener, options) {
        if (options === true) {
          promisify = true;
        } else if (options === false) {
          async = true;
        } else {
          if (!options || typeof options !== "object") {
            throw TypeError("options should be an object or true");
          }
          var async = options.async;
          var promisify = options.promisify;
          var nextTick = options.nextTick;
          var objectify = options.objectify;
        }
        if (async || nextTick || promisify) {
          var _listener = listener;
          var _origin = listener._origin || listener;
          if (nextTick && !nextTickSupported) {
            throw Error("process.nextTick is not supported");
          }
          if (promisify === undefined2) {
            promisify = listener.constructor.name === "AsyncFunction";
          }
          listener = function() {
            var args = arguments;
            var context = this;
            var event2 = this.event;
            return promisify ? nextTick ? Promise.resolve() : new Promise(function(resolve) {
              _setImmediate(resolve);
            }).then(function() {
              context.event = event2;
              return _listener.apply(context, args);
            }) : (nextTick ? process.nextTick : _setImmediate)(function() {
              context.event = event2;
              _listener.apply(context, args);
            });
          };
          listener._async = true;
          listener._origin = _origin;
        }
        return [listener, objectify ? new Listener(this, event, listener) : this];
      }
      function EventEmitter(conf) {
        this._events = {};
        this._newListener = false;
        this._removeListener = false;
        this.verboseMemoryLeak = false;
        configure.call(this, conf);
      }
      EventEmitter.EventEmitter2 = EventEmitter;
      EventEmitter.prototype.listenTo = function(target, events, options) {
        if (typeof target !== "object") {
          throw TypeError("target musts be an object");
        }
        var emitter = this;
        options = resolveOptions(options, {
          on: undefined2,
          off: undefined2,
          reducers: undefined2
        }, {
          on: functionReducer,
          off: functionReducer,
          reducers: objectFunctionReducer
        });
        function listen(events2) {
          if (typeof events2 !== "object") {
            throw TypeError("events must be an object");
          }
          var reducers = options.reducers;
          var index = findTargetIndex.call(emitter, target);
          var observer;
          if (index === -1) {
            observer = new TargetObserver(emitter, target, options);
          } else {
            observer = emitter._observers[index];
          }
          var keys = ownKeys(events2);
          var len = keys.length;
          var event;
          var isSingleReducer = typeof reducers === "function";
          for (var i10 = 0; i10 < len; i10++) {
            event = keys[i10];
            observer.subscribe(
              event,
              events2[event] || event,
              isSingleReducer ? reducers : reducers && reducers[event]
            );
          }
        }
        isArray(events) ? listen(toObject(events)) : typeof events === "string" ? listen(toObject(events.split(/\s+/))) : listen(events);
        return this;
      };
      EventEmitter.prototype.stopListeningTo = function(target, event) {
        var observers = this._observers;
        if (!observers) {
          return false;
        }
        var i10 = observers.length;
        var observer;
        var matched = false;
        if (target && typeof target !== "object") {
          throw TypeError("target should be an object");
        }
        while (i10-- > 0) {
          observer = observers[i10];
          if (!target || observer._target === target) {
            observer.unsubscribe(event);
            matched = true;
          }
        }
        return matched;
      };
      EventEmitter.prototype.delimiter = ".";
      EventEmitter.prototype.setMaxListeners = function(n18) {
        if (n18 !== undefined2) {
          this._maxListeners = n18;
          if (!this._conf)
            this._conf = {};
          this._conf.maxListeners = n18;
        }
      };
      EventEmitter.prototype.getMaxListeners = function() {
        return this._maxListeners;
      };
      EventEmitter.prototype.event = "";
      EventEmitter.prototype.once = function(event, fn2, options) {
        return this._once(event, fn2, false, options);
      };
      EventEmitter.prototype.prependOnceListener = function(event, fn2, options) {
        return this._once(event, fn2, true, options);
      };
      EventEmitter.prototype._once = function(event, fn2, prepend, options) {
        return this._many(event, 1, fn2, prepend, options);
      };
      EventEmitter.prototype.many = function(event, ttl, fn2, options) {
        return this._many(event, ttl, fn2, false, options);
      };
      EventEmitter.prototype.prependMany = function(event, ttl, fn2, options) {
        return this._many(event, ttl, fn2, true, options);
      };
      EventEmitter.prototype._many = function(event, ttl, fn2, prepend, options) {
        var self2 = this;
        if (typeof fn2 !== "function") {
          throw new Error("many only accepts instances of Function");
        }
        function listener() {
          if (--ttl === 0) {
            self2.off(event, listener);
          }
          return fn2.apply(this, arguments);
        }
        listener._origin = fn2;
        return this._on(event, listener, prepend, options);
      };
      EventEmitter.prototype.emit = function() {
        if (!this._events && !this._all) {
          return false;
        }
        this._events || init.call(this);
        var type = arguments[0], ns2, wildcard = this.wildcard;
        var args, l5, i10, j4, containsSymbol;
        if (type === "newListener" && !this._newListener) {
          if (!this._events.newListener) {
            return false;
          }
        }
        if (wildcard) {
          ns2 = type;
          if (type !== "newListener" && type !== "removeListener") {
            if (typeof type === "object") {
              l5 = type.length;
              if (symbolsSupported) {
                for (i10 = 0; i10 < l5; i10++) {
                  if (typeof type[i10] === "symbol") {
                    containsSymbol = true;
                    break;
                  }
                }
              }
              if (!containsSymbol) {
                type = type.join(this.delimiter);
              }
            }
          }
        }
        var al = arguments.length;
        var handler;
        if (this._all && this._all.length) {
          handler = this._all.slice();
          for (i10 = 0, l5 = handler.length; i10 < l5; i10++) {
            this.event = type;
            switch (al) {
              case 1:
                handler[i10].call(this, type);
                break;
              case 2:
                handler[i10].call(this, type, arguments[1]);
                break;
              case 3:
                handler[i10].call(this, type, arguments[1], arguments[2]);
                break;
              default:
                handler[i10].apply(this, arguments);
            }
          }
        }
        if (wildcard) {
          handler = [];
          searchListenerTree.call(this, handler, ns2, this.listenerTree, 0, l5);
        } else {
          handler = this._events[type];
          if (typeof handler === "function") {
            this.event = type;
            switch (al) {
              case 1:
                handler.call(this);
                break;
              case 2:
                handler.call(this, arguments[1]);
                break;
              case 3:
                handler.call(this, arguments[1], arguments[2]);
                break;
              default:
                args = new Array(al - 1);
                for (j4 = 1; j4 < al; j4++)
                  args[j4 - 1] = arguments[j4];
                handler.apply(this, args);
            }
            return true;
          } else if (handler) {
            handler = handler.slice();
          }
        }
        if (handler && handler.length) {
          if (al > 3) {
            args = new Array(al - 1);
            for (j4 = 1; j4 < al; j4++)
              args[j4 - 1] = arguments[j4];
          }
          for (i10 = 0, l5 = handler.length; i10 < l5; i10++) {
            this.event = type;
            switch (al) {
              case 1:
                handler[i10].call(this);
                break;
              case 2:
                handler[i10].call(this, arguments[1]);
                break;
              case 3:
                handler[i10].call(this, arguments[1], arguments[2]);
                break;
              default:
                handler[i10].apply(this, args);
            }
          }
          return true;
        } else if (!this.ignoreErrors && !this._all && type === "error") {
          if (arguments[1] instanceof Error) {
            throw arguments[1];
          } else {
            throw new Error("Uncaught, unspecified 'error' event.");
          }
        }
        return !!this._all;
      };
      EventEmitter.prototype.emitAsync = function() {
        if (!this._events && !this._all) {
          return false;
        }
        this._events || init.call(this);
        var type = arguments[0], wildcard = this.wildcard, ns2, containsSymbol;
        var args, l5, i10, j4;
        if (type === "newListener" && !this._newListener) {
          if (!this._events.newListener) {
            return Promise.resolve([false]);
          }
        }
        if (wildcard) {
          ns2 = type;
          if (type !== "newListener" && type !== "removeListener") {
            if (typeof type === "object") {
              l5 = type.length;
              if (symbolsSupported) {
                for (i10 = 0; i10 < l5; i10++) {
                  if (typeof type[i10] === "symbol") {
                    containsSymbol = true;
                    break;
                  }
                }
              }
              if (!containsSymbol) {
                type = type.join(this.delimiter);
              }
            }
          }
        }
        var promises = [];
        var al = arguments.length;
        var handler;
        if (this._all) {
          for (i10 = 0, l5 = this._all.length; i10 < l5; i10++) {
            this.event = type;
            switch (al) {
              case 1:
                promises.push(this._all[i10].call(this, type));
                break;
              case 2:
                promises.push(this._all[i10].call(this, type, arguments[1]));
                break;
              case 3:
                promises.push(this._all[i10].call(this, type, arguments[1], arguments[2]));
                break;
              default:
                promises.push(this._all[i10].apply(this, arguments));
            }
          }
        }
        if (wildcard) {
          handler = [];
          searchListenerTree.call(this, handler, ns2, this.listenerTree, 0);
        } else {
          handler = this._events[type];
        }
        if (typeof handler === "function") {
          this.event = type;
          switch (al) {
            case 1:
              promises.push(handler.call(this));
              break;
            case 2:
              promises.push(handler.call(this, arguments[1]));
              break;
            case 3:
              promises.push(handler.call(this, arguments[1], arguments[2]));
              break;
            default:
              args = new Array(al - 1);
              for (j4 = 1; j4 < al; j4++)
                args[j4 - 1] = arguments[j4];
              promises.push(handler.apply(this, args));
          }
        } else if (handler && handler.length) {
          handler = handler.slice();
          if (al > 3) {
            args = new Array(al - 1);
            for (j4 = 1; j4 < al; j4++)
              args[j4 - 1] = arguments[j4];
          }
          for (i10 = 0, l5 = handler.length; i10 < l5; i10++) {
            this.event = type;
            switch (al) {
              case 1:
                promises.push(handler[i10].call(this));
                break;
              case 2:
                promises.push(handler[i10].call(this, arguments[1]));
                break;
              case 3:
                promises.push(handler[i10].call(this, arguments[1], arguments[2]));
                break;
              default:
                promises.push(handler[i10].apply(this, args));
            }
          }
        } else if (!this.ignoreErrors && !this._all && type === "error") {
          if (arguments[1] instanceof Error) {
            return Promise.reject(arguments[1]);
          } else {
            return Promise.reject("Uncaught, unspecified 'error' event.");
          }
        }
        return Promise.all(promises);
      };
      EventEmitter.prototype.on = function(type, listener, options) {
        return this._on(type, listener, false, options);
      };
      EventEmitter.prototype.prependListener = function(type, listener, options) {
        return this._on(type, listener, true, options);
      };
      EventEmitter.prototype.onAny = function(fn2) {
        return this._onAny(fn2, false);
      };
      EventEmitter.prototype.prependAny = function(fn2) {
        return this._onAny(fn2, true);
      };
      EventEmitter.prototype.addListener = EventEmitter.prototype.on;
      EventEmitter.prototype._onAny = function(fn2, prepend) {
        if (typeof fn2 !== "function") {
          throw new Error("onAny only accepts instances of Function");
        }
        if (!this._all) {
          this._all = [];
        }
        if (prepend) {
          this._all.unshift(fn2);
        } else {
          this._all.push(fn2);
        }
        return this;
      };
      EventEmitter.prototype._on = function(type, listener, prepend, options) {
        if (typeof type === "function") {
          this._onAny(type, listener);
          return this;
        }
        if (typeof listener !== "function") {
          throw new Error("on only accepts instances of Function");
        }
        this._events || init.call(this);
        var returnValue = this, temp;
        if (options !== undefined2) {
          temp = setupListener.call(this, type, listener, options);
          listener = temp[0];
          returnValue = temp[1];
        }
        if (this._newListener) {
          this.emit("newListener", type, listener);
        }
        if (this.wildcard) {
          growListenerTree.call(this, type, listener, prepend);
          return returnValue;
        }
        if (!this._events[type]) {
          this._events[type] = listener;
        } else {
          if (typeof this._events[type] === "function") {
            this._events[type] = [this._events[type]];
          }
          if (prepend) {
            this._events[type].unshift(listener);
          } else {
            this._events[type].push(listener);
          }
          if (!this._events[type].warned && this._maxListeners > 0 && this._events[type].length > this._maxListeners) {
            this._events[type].warned = true;
            logPossibleMemoryLeak.call(this, this._events[type].length, type);
          }
        }
        return returnValue;
      };
      EventEmitter.prototype.off = function(type, listener) {
        if (typeof listener !== "function") {
          throw new Error("removeListener only takes instances of Function");
        }
        var handlers, leafs = [];
        if (this.wildcard) {
          var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
          leafs = searchListenerTree.call(this, null, ns2, this.listenerTree, 0);
          if (!leafs)
            return this;
        } else {
          if (!this._events[type])
            return this;
          handlers = this._events[type];
          leafs.push({ _listeners: handlers });
        }
        for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {
          var leaf = leafs[iLeaf];
          handlers = leaf._listeners;
          if (isArray(handlers)) {
            var position = -1;
            for (var i10 = 0, length = handlers.length; i10 < length; i10++) {
              if (handlers[i10] === listener || handlers[i10].listener && handlers[i10].listener === listener || handlers[i10]._origin && handlers[i10]._origin === listener) {
                position = i10;
                break;
              }
            }
            if (position < 0) {
              continue;
            }
            if (this.wildcard) {
              leaf._listeners.splice(position, 1);
            } else {
              this._events[type].splice(position, 1);
            }
            if (handlers.length === 0) {
              if (this.wildcard) {
                delete leaf._listeners;
              } else {
                delete this._events[type];
              }
            }
            if (this._removeListener)
              this.emit("removeListener", type, listener);
            return this;
          } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {
            if (this.wildcard) {
              delete leaf._listeners;
            } else {
              delete this._events[type];
            }
            if (this._removeListener)
              this.emit("removeListener", type, listener);
          }
        }
        this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
        return this;
      };
      EventEmitter.prototype.offAny = function(fn2) {
        var i10 = 0, l5 = 0, fns;
        if (fn2 && this._all && this._all.length > 0) {
          fns = this._all;
          for (i10 = 0, l5 = fns.length; i10 < l5; i10++) {
            if (fn2 === fns[i10]) {
              fns.splice(i10, 1);
              if (this._removeListener)
                this.emit("removeListenerAny", fn2);
              return this;
            }
          }
        } else {
          fns = this._all;
          if (this._removeListener) {
            for (i10 = 0, l5 = fns.length; i10 < l5; i10++)
              this.emit("removeListenerAny", fns[i10]);
          }
          this._all = [];
        }
        return this;
      };
      EventEmitter.prototype.removeListener = EventEmitter.prototype.off;
      EventEmitter.prototype.removeAllListeners = function(type) {
        if (type === undefined2) {
          !this._events || init.call(this);
          return this;
        }
        if (this.wildcard) {
          var leafs = searchListenerTree.call(this, null, type, this.listenerTree, 0), leaf, i10;
          if (!leafs)
            return this;
          for (i10 = 0; i10 < leafs.length; i10++) {
            leaf = leafs[i10];
            leaf._listeners = null;
          }
          this.listenerTree && recursivelyGarbageCollect(this.listenerTree);
        } else if (this._events) {
          this._events[type] = null;
        }
        return this;
      };
      EventEmitter.prototype.listeners = function(type) {
        var _events = this._events;
        var keys, listeners, allListeners;
        var i10;
        var listenerTree;
        if (type === undefined2) {
          if (this.wildcard) {
            throw Error("event name required for wildcard emitter");
          }
          if (!_events) {
            return [];
          }
          keys = ownKeys(_events);
          i10 = keys.length;
          allListeners = [];
          while (i10-- > 0) {
            listeners = _events[keys[i10]];
            if (typeof listeners === "function") {
              allListeners.push(listeners);
            } else {
              allListeners.push.apply(allListeners, listeners);
            }
          }
          return allListeners;
        } else {
          if (this.wildcard) {
            listenerTree = this.listenerTree;
            if (!listenerTree)
              return [];
            var handlers = [];
            var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
            searchListenerTree.call(this, handlers, ns2, listenerTree, 0);
            return handlers;
          }
          if (!_events) {
            return [];
          }
          listeners = _events[type];
          if (!listeners) {
            return [];
          }
          return typeof listeners === "function" ? [listeners] : listeners;
        }
      };
      EventEmitter.prototype.eventNames = function(nsAsArray) {
        var _events = this._events;
        return this.wildcard ? collectTreeEvents.call(this, this.listenerTree, [], null, nsAsArray) : _events ? ownKeys(_events) : [];
      };
      EventEmitter.prototype.listenerCount = function(type) {
        return this.listeners(type).length;
      };
      EventEmitter.prototype.hasListeners = function(type) {
        if (this.wildcard) {
          var handlers = [];
          var ns2 = typeof type === "string" ? type.split(this.delimiter) : type.slice();
          searchListenerTree.call(this, handlers, ns2, this.listenerTree, 0);
          return handlers.length > 0;
        }
        var _events = this._events;
        var _all = this._all;
        return !!(_all && _all.length || _events && (type === undefined2 ? ownKeys(_events).length : _events[type]));
      };
      EventEmitter.prototype.listenersAny = function() {
        if (this._all) {
          return this._all;
        } else {
          return [];
        }
      };
      EventEmitter.prototype.waitFor = function(event, options) {
        var self2 = this;
        var type = typeof options;
        if (type === "number") {
          options = { timeout: options };
        } else if (type === "function") {
          options = { filter: options };
        }
        options = resolveOptions(options, {
          timeout: 0,
          filter: undefined2,
          handleError: false,
          Promise,
          overload: false
        }, {
          filter: functionReducer,
          Promise: constructorReducer
        });
        return makeCancelablePromise(options.Promise, function(resolve, reject, onCancel) {
          function listener() {
            var filter = options.filter;
            if (filter && !filter.apply(self2, arguments)) {
              return;
            }
            self2.off(event, listener);
            if (options.handleError) {
              var err = arguments[0];
              err ? reject(err) : resolve(toArray.apply(null, arguments).slice(1));
            } else {
              resolve(toArray.apply(null, arguments));
            }
          }
          onCancel(function() {
            self2.off(event, listener);
          });
          self2._on(event, listener, false);
        }, {
          timeout: options.timeout,
          overload: options.overload
        });
      };
      function once(emitter, name, options) {
        options = resolveOptions(options, {
          Promise,
          timeout: 0,
          overload: false
        }, {
          Promise: constructorReducer
        });
        var _Promise = options.Promise;
        return makeCancelablePromise(_Promise, function(resolve, reject, onCancel) {
          var handler;
          if (typeof emitter.addEventListener === "function") {
            handler = function() {
              resolve(toArray.apply(null, arguments));
            };
            onCancel(function() {
              emitter.removeEventListener(name, handler);
            });
            emitter.addEventListener(
              name,
              handler,
              { once: true }
            );
            return;
          }
          var eventListener = function() {
            errorListener && emitter.removeListener("error", errorListener);
            resolve(toArray.apply(null, arguments));
          };
          var errorListener;
          if (name !== "error") {
            errorListener = function(err) {
              emitter.removeListener(name, eventListener);
              reject(err);
            };
            emitter.once("error", errorListener);
          }
          onCancel(function() {
            errorListener && emitter.removeListener("error", errorListener);
            emitter.removeListener(name, eventListener);
          });
          emitter.once(name, eventListener);
        }, {
          timeout: options.timeout,
          overload: options.overload
        });
      }
      var prototype = EventEmitter.prototype;
      Object.defineProperties(EventEmitter, {
        defaultMaxListeners: {
          get: function() {
            return prototype._maxListeners;
          },
          set: function(n18) {
            if (typeof n18 !== "number" || n18 < 0 || Number.isNaN(n18)) {
              throw TypeError("n must be a non-negative number");
            }
            prototype._maxListeners = n18;
          },
          enumerable: true
        },
        once: {
          value: once,
          writable: true,
          configurable: true
        }
      });
      Object.defineProperties(prototype, {
        _maxListeners: {
          value: defaultMaxListeners,
          writable: true,
          configurable: true
        },
        _observers: { value: null, writable: true, configurable: true }
      });
      if (typeof define === "function" && define.amd) {
        define(function() {
          return EventEmitter;
        });
      } else if (typeof exports === "object") {
        module.exports = EventEmitter;
      } else {
        var _global = new Function("", "return this")();
        _global.EventEmitter2 = EventEmitter;
      }
    }();
  }
});

// node_modules/sdp-transform/lib/grammar.js
var require_grammar = __commonJS({
  "node_modules/sdp-transform/lib/grammar.js"(exports, module) {
    init_define_process_env();
    var grammar = module.exports = {
      v: [{
        name: "version",
        reg: /^(\d*)$/
      }],
      o: [{
        name: "origin",
        reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
        names: ["username", "sessionId", "sessionVersion", "netType", "ipVer", "address"],
        format: "%s %s %d %s IP%d %s"
      }],
      s: [{ name: "name" }],
      i: [{ name: "description" }],
      u: [{ name: "uri" }],
      e: [{ name: "email" }],
      p: [{ name: "phone" }],
      z: [{ name: "timezones" }],
      r: [{ name: "repeats" }],
      t: [{
        name: "timing",
        reg: /^(\d*) (\d*)/,
        names: ["start", "stop"],
        format: "%d %d"
      }],
      c: [{
        name: "connection",
        reg: /^IN IP(\d) (\S*)/,
        names: ["version", "ip"],
        format: "IN IP%d %s"
      }],
      b: [{
        push: "bandwidth",
        reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
        names: ["type", "limit"],
        format: "%s:%s"
      }],
      m: [{
        reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
        names: ["type", "port", "protocol", "payloads"],
        format: "%s %d %s %s"
      }],
      a: [
        {
          push: "rtp",
          reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
          names: ["payload", "codec", "rate", "encoding"],
          format: function(o12) {
            return o12.encoding ? "rtpmap:%d %s/%s/%s" : o12.rate ? "rtpmap:%d %s/%s" : "rtpmap:%d %s";
          }
        },
        {
          push: "fmtp",
          reg: /^fmtp:(\d*) ([\S| ]*)/,
          names: ["payload", "config"],
          format: "fmtp:%d %s"
        },
        {
          name: "control",
          reg: /^control:(.*)/,
          format: "control:%s"
        },
        {
          name: "rtcp",
          reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
          names: ["port", "netType", "ipVer", "address"],
          format: function(o12) {
            return o12.address != null ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
          }
        },
        {
          push: "rtcpFbTrrInt",
          reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
          names: ["payload", "value"],
          format: "rtcp-fb:%s trr-int %d"
        },
        {
          push: "rtcpFb",
          reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
          names: ["payload", "type", "subtype"],
          format: function(o12) {
            return o12.subtype != null ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s";
          }
        },
        {
          push: "ext",
          reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
          names: ["value", "direction", "encrypt-uri", "uri", "config"],
          format: function(o12) {
            return "extmap:%d" + (o12.direction ? "/%s" : "%v") + (o12["encrypt-uri"] ? " %s" : "%v") + " %s" + (o12.config ? " %s" : "");
          }
        },
        {
          name: "extmapAllowMixed",
          reg: /^(extmap-allow-mixed)/
        },
        {
          push: "crypto",
          reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
          names: ["id", "suite", "config", "sessionConfig"],
          format: function(o12) {
            return o12.sessionConfig != null ? "crypto:%d %s %s %s" : "crypto:%d %s %s";
          }
        },
        {
          name: "setup",
          reg: /^setup:(\w*)/,
          format: "setup:%s"
        },
        {
          name: "connectionType",
          reg: /^connection:(new|existing)/,
          format: "connection:%s"
        },
        {
          name: "mid",
          reg: /^mid:([^\s]*)/,
          format: "mid:%s"
        },
        {
          name: "msid",
          reg: /^msid:(.*)/,
          format: "msid:%s"
        },
        {
          name: "ptime",
          reg: /^ptime:(\d*(?:\.\d*)*)/,
          format: "ptime:%d"
        },
        {
          name: "maxptime",
          reg: /^maxptime:(\d*(?:\.\d*)*)/,
          format: "maxptime:%d"
        },
        {
          name: "direction",
          reg: /^(sendrecv|recvonly|sendonly|inactive)/
        },
        {
          name: "icelite",
          reg: /^(ice-lite)/
        },
        {
          name: "iceUfrag",
          reg: /^ice-ufrag:(\S*)/,
          format: "ice-ufrag:%s"
        },
        {
          name: "icePwd",
          reg: /^ice-pwd:(\S*)/,
          format: "ice-pwd:%s"
        },
        {
          name: "fingerprint",
          reg: /^fingerprint:(\S*) (\S*)/,
          names: ["type", "hash"],
          format: "fingerprint:%s %s"
        },
        {
          push: "candidates",
          reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
          names: ["foundation", "component", "transport", "priority", "ip", "port", "type", "raddr", "rport", "tcptype", "generation", "network-id", "network-cost"],
          format: function(o12) {
            var str = "candidate:%s %d %s %d %s %d typ %s";
            str += o12.raddr != null ? " raddr %s rport %d" : "%v%v";
            str += o12.tcptype != null ? " tcptype %s" : "%v";
            if (o12.generation != null) {
              str += " generation %d";
            }
            str += o12["network-id"] != null ? " network-id %d" : "%v";
            str += o12["network-cost"] != null ? " network-cost %d" : "%v";
            return str;
          }
        },
        {
          name: "endOfCandidates",
          reg: /^(end-of-candidates)/
        },
        {
          name: "remoteCandidates",
          reg: /^remote-candidates:(.*)/,
          format: "remote-candidates:%s"
        },
        {
          name: "iceOptions",
          reg: /^ice-options:(\S*)/,
          format: "ice-options:%s"
        },
        {
          push: "ssrcs",
          reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
          names: ["id", "attribute", "value"],
          format: function(o12) {
            var str = "ssrc:%d";
            if (o12.attribute != null) {
              str += " %s";
              if (o12.value != null) {
                str += ":%s";
              }
            }
            return str;
          }
        },
        {
          push: "ssrcGroups",
          reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
          names: ["semantics", "ssrcs"],
          format: "ssrc-group:%s %s"
        },
        {
          name: "msidSemantic",
          reg: /^msid-semantic:\s?(\w*) (\S*)/,
          names: ["semantic", "token"],
          format: "msid-semantic: %s %s"
        },
        {
          push: "groups",
          reg: /^group:(\w*) (.*)/,
          names: ["type", "mids"],
          format: "group:%s %s"
        },
        {
          name: "rtcpMux",
          reg: /^(rtcp-mux)/
        },
        {
          name: "rtcpRsize",
          reg: /^(rtcp-rsize)/
        },
        {
          name: "sctpmap",
          reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
          names: ["sctpmapNumber", "app", "maxMessageSize"],
          format: function(o12) {
            return o12.maxMessageSize != null ? "sctpmap:%s %s %s" : "sctpmap:%s %s";
          }
        },
        {
          name: "xGoogleFlag",
          reg: /^x-google-flag:([^\s]*)/,
          format: "x-google-flag:%s"
        },
        {
          push: "rids",
          reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
          names: ["id", "direction", "params"],
          format: function(o12) {
            return o12.params ? "rid:%s %s %s" : "rid:%s %s";
          }
        },
        {
          push: "imageattrs",
          reg: new RegExp(
            "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
          ),
          names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
          format: function(o12) {
            return "imageattr:%s %s %s" + (o12.dir2 ? " %s %s" : "");
          }
        },
        {
          name: "simulcast",
          reg: new RegExp(
            "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
          ),
          names: ["dir1", "list1", "dir2", "list2"],
          format: function(o12) {
            return "simulcast:%s %s" + (o12.dir2 ? " %s %s" : "");
          }
        },
        {
          name: "simulcast_03",
          reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
          names: ["value"],
          format: "simulcast: %s"
        },
        {
          name: "framerate",
          reg: /^framerate:(\d+(?:$|\.\d+))/,
          format: "framerate:%s"
        },
        {
          name: "sourceFilter",
          reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
          names: ["filterMode", "netType", "addressTypes", "destAddress", "srcList"],
          format: "source-filter: %s %s %s %s %s"
        },
        {
          name: "bundleOnly",
          reg: /^(bundle-only)/
        },
        {
          name: "label",
          reg: /^label:(.+)/,
          format: "label:%s"
        },
        {
          name: "sctpPort",
          reg: /^sctp-port:(\d+)$/,
          format: "sctp-port:%s"
        },
        {
          name: "maxMessageSize",
          reg: /^max-message-size:(\d+)$/,
          format: "max-message-size:%s"
        },
        {
          push: "tsRefClocks",
          reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
          names: ["clksrc", "clksrcExt"],
          format: function(o12) {
            return "ts-refclk:%s" + (o12.clksrcExt != null ? "=%s" : "");
          }
        },
        {
          name: "mediaClk",
          reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
          names: ["id", "mediaClockName", "mediaClockValue", "rateNumerator", "rateDenominator"],
          format: function(o12) {
            var str = "mediaclk:";
            str += o12.id != null ? "id=%s %s" : "%v%s";
            str += o12.mediaClockValue != null ? "=%s" : "";
            str += o12.rateNumerator != null ? " rate=%s" : "";
            str += o12.rateDenominator != null ? "/%s" : "";
            return str;
          }
        },
        {
          name: "keywords",
          reg: /^keywds:(.+)$/,
          format: "keywds:%s"
        },
        {
          name: "content",
          reg: /^content:(.+)/,
          format: "content:%s"
        },
        {
          name: "bfcpFloorCtrl",
          reg: /^floorctrl:(c-only|s-only|c-s)/,
          format: "floorctrl:%s"
        },
        {
          name: "bfcpConfId",
          reg: /^confid:(\d+)/,
          format: "confid:%s"
        },
        {
          name: "bfcpUserId",
          reg: /^userid:(\d+)/,
          format: "userid:%s"
        },
        {
          name: "bfcpFloorId",
          reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
          names: ["id", "mStream"],
          format: "floorid:%s mstrm:%s"
        },
        {
          push: "invalid",
          names: ["value"]
        }
      ]
    };
    Object.keys(grammar).forEach(function(key) {
      var objs = grammar[key];
      objs.forEach(function(obj) {
        if (!obj.reg) {
          obj.reg = /(.*)/;
        }
        if (!obj.format) {
          obj.format = "%s";
        }
      });
    });
  }
});

// node_modules/sdp-transform/lib/parser.js
var require_parser = __commonJS({
  "node_modules/sdp-transform/lib/parser.js"(exports) {
    init_define_process_env();
    var toIntIfInt = function(v10) {
      return String(Number(v10)) === v10 ? Number(v10) : v10;
    };
    var attachProperties = function(match, location, names, rawName) {
      if (rawName && !names) {
        location[rawName] = toIntIfInt(match[1]);
      } else {
        for (var i10 = 0; i10 < names.length; i10 += 1) {
          if (match[i10 + 1] != null) {
            location[names[i10]] = toIntIfInt(match[i10 + 1]);
          }
        }
      }
    };
    var parseReg = function(obj, location, content) {
      var needsBlank = obj.name && obj.names;
      if (obj.push && !location[obj.push]) {
        location[obj.push] = [];
      } else if (needsBlank && !location[obj.name]) {
        location[obj.name] = {};
      }
      var keyLocation = obj.push ? {} : needsBlank ? location[obj.name] : location;
      attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);
      if (obj.push) {
        location[obj.push].push(keyLocation);
      }
    };
    var grammar = require_grammar();
    var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
    exports.parse = function(sdp2) {
      var session = {}, media = [], location = session;
      sdp2.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function(l5) {
        var type = l5[0];
        var content = l5.slice(2);
        if (type === "m") {
          media.push({ rtp: [], fmtp: [] });
          location = media[media.length - 1];
        }
        for (var j4 = 0; j4 < (grammar[type] || []).length; j4 += 1) {
          var obj = grammar[type][j4];
          if (obj.reg.test(content)) {
            return parseReg(obj, location, content);
          }
        }
      });
      session.media = media;
      return session;
    };
    var paramReducer = function(acc, expr) {
      var s11 = expr.split(/=(.+)/, 2);
      if (s11.length === 2) {
        acc[s11[0]] = toIntIfInt(s11[1]);
      } else if (s11.length === 1 && expr.length > 1) {
        acc[s11[0]] = void 0;
      }
      return acc;
    };
    exports.parseParams = function(str) {
      return str.split(/;\s?/).reduce(paramReducer, {});
    };
    exports.parseFmtpConfig = exports.parseParams;
    exports.parsePayloads = function(str) {
      return str.toString().split(" ").map(Number);
    };
    exports.parseRemoteCandidates = function(str) {
      var candidates = [];
      var parts = str.split(" ").map(toIntIfInt);
      for (var i10 = 0; i10 < parts.length; i10 += 3) {
        candidates.push({
          component: parts[i10],
          ip: parts[i10 + 1],
          port: parts[i10 + 2]
        });
      }
      return candidates;
    };
    exports.parseImageAttributes = function(str) {
      return str.split(" ").map(function(item) {
        return item.substring(1, item.length - 1).split(",").reduce(paramReducer, {});
      });
    };
    exports.parseSimulcastStreamList = function(str) {
      return str.split(";").map(function(stream) {
        return stream.split(",").map(function(format) {
          var scid, paused = false;
          if (format[0] !== "~") {
            scid = toIntIfInt(format);
          } else {
            scid = toIntIfInt(format.substring(1, format.length));
            paused = true;
          }
          return {
            scid,
            paused
          };
        });
      });
    };
  }
});

// node_modules/sdp-transform/lib/writer.js
var require_writer = __commonJS({
  "node_modules/sdp-transform/lib/writer.js"(exports, module) {
    init_define_process_env();
    var grammar = require_grammar();
    var formatRegExp = /%[sdv%]/g;
    var format = function(formatStr) {
      var i10 = 1;
      var args = arguments;
      var len = args.length;
      return formatStr.replace(formatRegExp, function(x3) {
        if (i10 >= len) {
          return x3;
        }
        var arg = args[i10];
        i10 += 1;
        switch (x3) {
          case "%%":
            return "%";
          case "%s":
            return String(arg);
          case "%d":
            return Number(arg);
          case "%v":
            return "";
        }
      });
    };
    var makeLine = function(type, obj, location) {
      var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;
      var args = [type + "=" + str];
      if (obj.names) {
        for (var i10 = 0; i10 < obj.names.length; i10 += 1) {
          var n18 = obj.names[i10];
          if (obj.name) {
            args.push(location[obj.name][n18]);
          } else {
            args.push(location[obj.names[i10]]);
          }
        }
      } else {
        args.push(location[obj.name]);
      }
      return format.apply(null, args);
    };
    var defaultOuterOrder = [
      "v",
      "o",
      "s",
      "i",
      "u",
      "e",
      "p",
      "c",
      "b",
      "t",
      "r",
      "z",
      "a"
    ];
    var defaultInnerOrder = ["i", "c", "b", "a"];
    module.exports = function(session, opts) {
      opts = opts || {};
      if (session.version == null) {
        session.version = 0;
      }
      if (session.name == null) {
        session.name = " ";
      }
      session.media.forEach(function(mLine) {
        if (mLine.payloads == null) {
          mLine.payloads = "";
        }
      });
      var outerOrder = opts.outerOrder || defaultOuterOrder;
      var innerOrder = opts.innerOrder || defaultInnerOrder;
      var sdp2 = [];
      outerOrder.forEach(function(type) {
        grammar[type].forEach(function(obj) {
          if (obj.name in session && session[obj.name] != null) {
            sdp2.push(makeLine(type, obj, session));
          } else if (obj.push in session && session[obj.push] != null) {
            session[obj.push].forEach(function(el) {
              sdp2.push(makeLine(type, obj, el));
            });
          }
        });
      });
      session.media.forEach(function(mLine) {
        sdp2.push(makeLine("m", grammar.m[0], mLine));
        innerOrder.forEach(function(type) {
          grammar[type].forEach(function(obj) {
            if (obj.name in mLine && mLine[obj.name] != null) {
              sdp2.push(makeLine(type, obj, mLine));
            } else if (obj.push in mLine && mLine[obj.push] != null) {
              mLine[obj.push].forEach(function(el) {
                sdp2.push(makeLine(type, obj, el));
              });
            }
          });
        });
      });
      return sdp2.join("\r\n") + "\r\n";
    };
  }
});

// node_modules/sdp-transform/lib/index.js
var require_lib = __commonJS({
  "node_modules/sdp-transform/lib/index.js"(exports) {
    init_define_process_env();
    var parser = require_parser();
    var writer = require_writer();
    exports.write = writer;
    exports.parse = parser.parse;
    exports.parseParams = parser.parseParams;
    exports.parseFmtpConfig = parser.parseFmtpConfig;
    exports.parsePayloads = parser.parsePayloads;
    exports.parseRemoteCandidates = parser.parseRemoteCandidates;
    exports.parseImageAttributes = parser.parseImageAttributes;
    exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;
  }
});

// dep:@100mslive_react-sdk
init_define_process_env();

// node_modules/@100mslive/react-sdk/dist/index.js
init_define_process_env();

// node_modules/@100mslive/react-sdk/dist/primitives/HmsRoomProvider.js
init_define_process_env();
var import_react3 = __toESM(require_react());

// node_modules/zustand/esm/index.js
init_define_process_env();
var import_react = __toESM(require_react());
function createStore(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}
var isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var useIsomorphicLayoutEffect = isSSR ? import_react.useEffect : import_react.useLayoutEffect;
function create(createState) {
  const api = typeof createState === "function" ? createStore(createState) : createState;
  const useStore = (selector = api.getState, equalityFn = Object.is) => {
    const [, forceUpdate] = (0, import_react.useReducer)((c5) => c5 + 1, 0);
    const state = api.getState();
    const stateRef = (0, import_react.useRef)(state);
    const selectorRef = (0, import_react.useRef)(selector);
    const equalityFnRef = (0, import_react.useRef)(equalityFn);
    const erroredRef = (0, import_react.useRef)(false);
    const currentSliceRef = (0, import_react.useRef)();
    if (currentSliceRef.current === void 0) {
      currentSliceRef.current = selector(state);
    }
    let newStateSlice;
    let hasNewStateSlice = false;
    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
      newStateSlice = selector(state);
      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
    }
    useIsomorphicLayoutEffect(() => {
      if (hasNewStateSlice) {
        currentSliceRef.current = newStateSlice;
      }
      stateRef.current = state;
      selectorRef.current = selector;
      equalityFnRef.current = equalityFn;
      erroredRef.current = false;
    });
    const stateBeforeSubscriptionRef = (0, import_react.useRef)(state);
    useIsomorphicLayoutEffect(() => {
      const listener = () => {
        try {
          const nextState = api.getState();
          const nextStateSlice = selectorRef.current(nextState);
          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
            stateRef.current = nextState;
            currentSliceRef.current = nextStateSlice;
            forceUpdate();
          }
        } catch (error) {
          erroredRef.current = true;
          forceUpdate();
        }
      };
      const unsubscribe = api.subscribe(listener);
      if (api.getState() !== stateBeforeSubscriptionRef.current) {
        listener();
      }
      return unsubscribe;
    }, []);
    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
    (0, import_react.useDebugValue)(sliceToReturn);
    return sliceToReturn;
  };
  Object.assign(useStore, api);
  useStore[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const items = [useStore, api];
    return {
      next() {
        const done = items.length <= 0;
        return { value: items.shift(), done };
      }
    };
  };
  return useStore;
}

// node_modules/@100mslive/hms-video-store/dist/index.js
init_define_process_env();

// node_modules/reselect/es/index.js
init_define_process_env();
function defaultEqualityCheck(a4, b4) {
  return a4 === b4;
}
function areArgumentsShallowlyEqual(equalityCheck, prev, next) {
  if (prev === null || next === null || prev.length !== next.length) {
    return false;
  }
  var length = prev.length;
  for (var i10 = 0; i10 < length; i10++) {
    if (!equalityCheck(prev[i10], next[i10])) {
      return false;
    }
  }
  return true;
}
function defaultMemoize(func) {
  var equalityCheck = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultEqualityCheck;
  var lastArgs = null;
  var lastResult = null;
  return function() {
    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {
      lastResult = func.apply(null, arguments);
    }
    lastArgs = arguments;
    return lastResult;
  };
}
function getDependencies(funcs) {
  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
  if (!dependencies.every(function(dep) {
    return typeof dep === "function";
  })) {
    var dependencyTypes = dependencies.map(function(dep) {
      return typeof dep;
    }).join(", ");
    throw new Error("Selector creators expect all input-selectors to be functions, " + ("instead received the following types: [" + dependencyTypes + "]"));
  }
  return dependencies;
}
function createSelectorCreator(memoize) {
  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    memoizeOptions[_key - 1] = arguments[_key];
  }
  return function() {
    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }
    var recomputations = 0;
    var resultFunc = funcs.pop();
    var dependencies = getDependencies(funcs);
    var memoizedResultFunc = memoize.apply(void 0, [function() {
      recomputations++;
      return resultFunc.apply(null, arguments);
    }].concat(memoizeOptions));
    var selector = memoize(function() {
      var params = [];
      var length = dependencies.length;
      for (var i10 = 0; i10 < length; i10++) {
        params.push(dependencies[i10].apply(null, arguments));
      }
      return memoizedResultFunc.apply(null, params);
    });
    selector.resultFunc = resultFunc;
    selector.dependencies = dependencies;
    selector.recomputations = function() {
      return recomputations;
    };
    selector.resetRecomputations = function() {
      return recomputations = 0;
    };
    return selector;
  };
}
var createSelector = createSelectorCreator(defaultMemoize);

// node_modules/@100mslive/hms-video/dist/index.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/index.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/v1.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/rng.js
init_define_process_env();
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/validate.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/regex.js
init_define_process_env();
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i10 = 0; i10 < 256; ++i10) {
  byteToHex.push((i10 + 256).toString(16).substr(1));
}
var i10;
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/uuid/dist/esm-browser/v3.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/v35.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/parse.js
init_define_process_env();
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v10;
  var arr = new Uint8Array(16);
  arr[0] = (v10 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v10 >>> 16 & 255;
  arr[2] = v10 >>> 8 & 255;
  arr[3] = v10 & 255;
  arr[4] = (v10 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v10 & 255;
  arr[6] = (v10 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v10 & 255;
  arr[8] = (v10 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v10 & 255;
  arr[10] = (v10 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v10 / 4294967296 & 255;
  arr[12] = v10 >>> 24 & 255;
  arr[13] = v10 >>> 16 & 255;
  arr[14] = v10 >>> 8 & 255;
  arr[15] = v10 & 255;
  return arr;
}
var parse_default = parse;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i10 = 0; i10 < str.length; ++i10) {
    bytes.push(str.charCodeAt(i10));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35_default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i10 = 0; i10 < 16; ++i10) {
        buf[offset + i10] = bytes[i10];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/md5.js
init_define_process_env();
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i10 = 0; i10 < msg.length; ++i10) {
      bytes[i10] = msg.charCodeAt(i10);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i10 = 0; i10 < length32; i10 += 8) {
    var x3 = input[i10 >> 5] >>> i10 % 32 & 255;
    var hex = parseInt(hexTab.charAt(x3 >>> 4 & 15) + hexTab.charAt(x3 & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x3, len) {
  x3[len >> 5] |= 128 << len % 32;
  x3[getOutputLength(len) - 1] = len;
  var a4 = 1732584193;
  var b4 = -271733879;
  var c5 = -1732584194;
  var d6 = 271733878;
  for (var i10 = 0; i10 < x3.length; i10 += 16) {
    var olda = a4;
    var oldb = b4;
    var oldc = c5;
    var oldd = d6;
    a4 = md5ff(a4, b4, c5, d6, x3[i10], 7, -680876936);
    d6 = md5ff(d6, a4, b4, c5, x3[i10 + 1], 12, -389564586);
    c5 = md5ff(c5, d6, a4, b4, x3[i10 + 2], 17, 606105819);
    b4 = md5ff(b4, c5, d6, a4, x3[i10 + 3], 22, -1044525330);
    a4 = md5ff(a4, b4, c5, d6, x3[i10 + 4], 7, -176418897);
    d6 = md5ff(d6, a4, b4, c5, x3[i10 + 5], 12, 1200080426);
    c5 = md5ff(c5, d6, a4, b4, x3[i10 + 6], 17, -1473231341);
    b4 = md5ff(b4, c5, d6, a4, x3[i10 + 7], 22, -45705983);
    a4 = md5ff(a4, b4, c5, d6, x3[i10 + 8], 7, 1770035416);
    d6 = md5ff(d6, a4, b4, c5, x3[i10 + 9], 12, -1958414417);
    c5 = md5ff(c5, d6, a4, b4, x3[i10 + 10], 17, -42063);
    b4 = md5ff(b4, c5, d6, a4, x3[i10 + 11], 22, -1990404162);
    a4 = md5ff(a4, b4, c5, d6, x3[i10 + 12], 7, 1804603682);
    d6 = md5ff(d6, a4, b4, c5, x3[i10 + 13], 12, -40341101);
    c5 = md5ff(c5, d6, a4, b4, x3[i10 + 14], 17, -1502002290);
    b4 = md5ff(b4, c5, d6, a4, x3[i10 + 15], 22, 1236535329);
    a4 = md5gg(a4, b4, c5, d6, x3[i10 + 1], 5, -165796510);
    d6 = md5gg(d6, a4, b4, c5, x3[i10 + 6], 9, -1069501632);
    c5 = md5gg(c5, d6, a4, b4, x3[i10 + 11], 14, 643717713);
    b4 = md5gg(b4, c5, d6, a4, x3[i10], 20, -373897302);
    a4 = md5gg(a4, b4, c5, d6, x3[i10 + 5], 5, -701558691);
    d6 = md5gg(d6, a4, b4, c5, x3[i10 + 10], 9, 38016083);
    c5 = md5gg(c5, d6, a4, b4, x3[i10 + 15], 14, -660478335);
    b4 = md5gg(b4, c5, d6, a4, x3[i10 + 4], 20, -405537848);
    a4 = md5gg(a4, b4, c5, d6, x3[i10 + 9], 5, 568446438);
    d6 = md5gg(d6, a4, b4, c5, x3[i10 + 14], 9, -1019803690);
    c5 = md5gg(c5, d6, a4, b4, x3[i10 + 3], 14, -187363961);
    b4 = md5gg(b4, c5, d6, a4, x3[i10 + 8], 20, 1163531501);
    a4 = md5gg(a4, b4, c5, d6, x3[i10 + 13], 5, -1444681467);
    d6 = md5gg(d6, a4, b4, c5, x3[i10 + 2], 9, -51403784);
    c5 = md5gg(c5, d6, a4, b4, x3[i10 + 7], 14, 1735328473);
    b4 = md5gg(b4, c5, d6, a4, x3[i10 + 12], 20, -1926607734);
    a4 = md5hh(a4, b4, c5, d6, x3[i10 + 5], 4, -378558);
    d6 = md5hh(d6, a4, b4, c5, x3[i10 + 8], 11, -2022574463);
    c5 = md5hh(c5, d6, a4, b4, x3[i10 + 11], 16, 1839030562);
    b4 = md5hh(b4, c5, d6, a4, x3[i10 + 14], 23, -35309556);
    a4 = md5hh(a4, b4, c5, d6, x3[i10 + 1], 4, -1530992060);
    d6 = md5hh(d6, a4, b4, c5, x3[i10 + 4], 11, 1272893353);
    c5 = md5hh(c5, d6, a4, b4, x3[i10 + 7], 16, -155497632);
    b4 = md5hh(b4, c5, d6, a4, x3[i10 + 10], 23, -1094730640);
    a4 = md5hh(a4, b4, c5, d6, x3[i10 + 13], 4, 681279174);
    d6 = md5hh(d6, a4, b4, c5, x3[i10], 11, -358537222);
    c5 = md5hh(c5, d6, a4, b4, x3[i10 + 3], 16, -722521979);
    b4 = md5hh(b4, c5, d6, a4, x3[i10 + 6], 23, 76029189);
    a4 = md5hh(a4, b4, c5, d6, x3[i10 + 9], 4, -640364487);
    d6 = md5hh(d6, a4, b4, c5, x3[i10 + 12], 11, -421815835);
    c5 = md5hh(c5, d6, a4, b4, x3[i10 + 15], 16, 530742520);
    b4 = md5hh(b4, c5, d6, a4, x3[i10 + 2], 23, -995338651);
    a4 = md5ii(a4, b4, c5, d6, x3[i10], 6, -198630844);
    d6 = md5ii(d6, a4, b4, c5, x3[i10 + 7], 10, 1126891415);
    c5 = md5ii(c5, d6, a4, b4, x3[i10 + 14], 15, -1416354905);
    b4 = md5ii(b4, c5, d6, a4, x3[i10 + 5], 21, -57434055);
    a4 = md5ii(a4, b4, c5, d6, x3[i10 + 12], 6, 1700485571);
    d6 = md5ii(d6, a4, b4, c5, x3[i10 + 3], 10, -1894986606);
    c5 = md5ii(c5, d6, a4, b4, x3[i10 + 10], 15, -1051523);
    b4 = md5ii(b4, c5, d6, a4, x3[i10 + 1], 21, -2054922799);
    a4 = md5ii(a4, b4, c5, d6, x3[i10 + 8], 6, 1873313359);
    d6 = md5ii(d6, a4, b4, c5, x3[i10 + 15], 10, -30611744);
    c5 = md5ii(c5, d6, a4, b4, x3[i10 + 6], 15, -1560198380);
    b4 = md5ii(b4, c5, d6, a4, x3[i10 + 13], 21, 1309151649);
    a4 = md5ii(a4, b4, c5, d6, x3[i10 + 4], 6, -145523070);
    d6 = md5ii(d6, a4, b4, c5, x3[i10 + 11], 10, -1120210379);
    c5 = md5ii(c5, d6, a4, b4, x3[i10 + 2], 15, 718787259);
    b4 = md5ii(b4, c5, d6, a4, x3[i10 + 9], 21, -343485551);
    a4 = safeAdd(a4, olda);
    b4 = safeAdd(b4, oldb);
    c5 = safeAdd(c5, oldc);
    d6 = safeAdd(d6, oldd);
  }
  return [a4, b4, c5, d6];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i10 = 0; i10 < length8; i10 += 8) {
    output[i10 >> 5] |= (input[i10 / 8] & 255) << i10 % 32;
  }
  return output;
}
function safeAdd(x3, y2) {
  var lsw = (x3 & 65535) + (y2 & 65535);
  var msw = (x3 >> 16) + (y2 >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q3, a4, b4, x3, s11, t9) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a4, q3), safeAdd(x3, t9)), s11), b4);
}
function md5ff(a4, b4, c5, d6, x3, s11, t9) {
  return md5cmn(b4 & c5 | ~b4 & d6, a4, b4, x3, s11, t9);
}
function md5gg(a4, b4, c5, d6, x3, s11, t9) {
  return md5cmn(b4 & d6 | c5 & ~d6, a4, b4, x3, s11, t9);
}
function md5hh(a4, b4, c5, d6, x3, s11, t9) {
  return md5cmn(b4 ^ c5 ^ d6, a4, b4, x3, s11, t9);
}
function md5ii(a4, b4, c5, d6, x3, s11, t9) {
  return md5cmn(c5 ^ (b4 | ~d6), a4, b4, x3, s11, t9);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35_default("v3", 48, md5_default);

// node_modules/uuid/dist/esm-browser/v4.js
init_define_process_env();
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i10 = 0; i10 < 16; ++i10) {
      buf[offset + i10] = rnds[i10];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/v5.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/sha1.js
init_define_process_env();
function f(s11, x3, y2, z2) {
  switch (s11) {
    case 0:
      return x3 & y2 ^ ~x3 & z2;
    case 1:
      return x3 ^ y2 ^ z2;
    case 2:
      return x3 & y2 ^ x3 & z2 ^ y2 & z2;
    case 3:
      return x3 ^ y2 ^ z2;
  }
}
function ROTL(x3, n18) {
  return x3 << n18 | x3 >>> 32 - n18;
}
function sha1(bytes) {
  var K3 = [1518500249, 1859775393, 2400959708, 3395469782];
  var H3 = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i10 = 0; i10 < msg.length; ++i10) {
      bytes.push(msg.charCodeAt(i10));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l5 = bytes.length / 4 + 2;
  var N4 = Math.ceil(l5 / 16);
  var M3 = new Array(N4);
  for (var _i3 = 0; _i3 < N4; ++_i3) {
    var arr = new Uint32Array(16);
    for (var j4 = 0; j4 < 16; ++j4) {
      arr[j4] = bytes[_i3 * 64 + j4 * 4] << 24 | bytes[_i3 * 64 + j4 * 4 + 1] << 16 | bytes[_i3 * 64 + j4 * 4 + 2] << 8 | bytes[_i3 * 64 + j4 * 4 + 3];
    }
    M3[_i3] = arr;
  }
  M3[N4 - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M3[N4 - 1][14] = Math.floor(M3[N4 - 1][14]);
  M3[N4 - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i22 = 0; _i22 < N4; ++_i22) {
    var W4 = new Uint32Array(80);
    for (var t9 = 0; t9 < 16; ++t9) {
      W4[t9] = M3[_i22][t9];
    }
    for (var _t3 = 16; _t3 < 80; ++_t3) {
      W4[_t3] = ROTL(W4[_t3 - 3] ^ W4[_t3 - 8] ^ W4[_t3 - 14] ^ W4[_t3 - 16], 1);
    }
    var a4 = H3[0];
    var b4 = H3[1];
    var c5 = H3[2];
    var d6 = H3[3];
    var e14 = H3[4];
    for (var _t22 = 0; _t22 < 80; ++_t22) {
      var s11 = Math.floor(_t22 / 20);
      var T2 = ROTL(a4, 5) + f(s11, b4, c5, d6) + e14 + K3[s11] + W4[_t22] >>> 0;
      e14 = d6;
      d6 = c5;
      c5 = ROTL(b4, 30) >>> 0;
      b4 = a4;
      a4 = T2;
    }
    H3[0] = H3[0] + a4 >>> 0;
    H3[1] = H3[1] + b4 >>> 0;
    H3[2] = H3[2] + c5 >>> 0;
    H3[3] = H3[3] + d6 >>> 0;
    H3[4] = H3[4] + e14 >>> 0;
  }
  return [H3[0] >> 24 & 255, H3[0] >> 16 & 255, H3[0] >> 8 & 255, H3[0] & 255, H3[1] >> 24 & 255, H3[1] >> 16 & 255, H3[1] >> 8 & 255, H3[1] & 255, H3[2] >> 24 & 255, H3[2] >> 16 & 255, H3[2] >> 8 & 255, H3[2] & 255, H3[3] >> 24 & 255, H3[3] >> 16 & 255, H3[3] >> 8 & 255, H3[3] & 255, H3[4] >> 24 & 255, H3[4] >> 16 & 255, H3[4] >> 8 & 255, H3[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35_default("v5", 80, sha1_default);

// node_modules/uuid/dist/esm-browser/nil.js
init_define_process_env();

// node_modules/uuid/dist/esm-browser/version.js
init_define_process_env();

// node_modules/@100mslive/hms-video/dist/index.js
var import_ua_parser_js = __toESM(require_ua_parser());

// node_modules/webrtc-adapter/src/js/adapter_core.js
init_define_process_env();

// node_modules/webrtc-adapter/src/js/adapter_factory.js
init_define_process_env();

// node_modules/webrtc-adapter/src/js/utils.js
init_define_process_env();
var logDisabled_ = true;
var deprecationWarnings_ = true;
function extractVersion(uastring, expr, pos) {
  const match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}
function wrapPeerConnectionEvent(window2, eventNameToWrap, wrapper) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  const proto = window2.RTCPeerConnection.prototype;
  const nativeAddEventListener = proto.addEventListener;
  proto.addEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap) {
      return nativeAddEventListener.apply(this, arguments);
    }
    const wrappedCallback = (e14) => {
      const modifiedEvent = wrapper(e14);
      if (modifiedEvent) {
        if (cb.handleEvent) {
          cb.handleEvent(modifiedEvent);
        } else {
          cb(modifiedEvent);
        }
      }
    };
    this._eventMap = this._eventMap || {};
    if (!this._eventMap[eventNameToWrap]) {
      this._eventMap[eventNameToWrap] = /* @__PURE__ */ new Map();
    }
    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
    return nativeAddEventListener.apply(this, [
      nativeEventName,
      wrappedCallback
    ]);
  };
  const nativeRemoveEventListener = proto.removeEventListener;
  proto.removeEventListener = function(nativeEventName, cb) {
    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    if (!this._eventMap[eventNameToWrap].has(cb)) {
      return nativeRemoveEventListener.apply(this, arguments);
    }
    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
    this._eventMap[eventNameToWrap].delete(cb);
    if (this._eventMap[eventNameToWrap].size === 0) {
      delete this._eventMap[eventNameToWrap];
    }
    if (Object.keys(this._eventMap).length === 0) {
      delete this._eventMap;
    }
    return nativeRemoveEventListener.apply(this, [
      nativeEventName,
      unwrappedCb
    ]);
  };
  Object.defineProperty(proto, "on" + eventNameToWrap, {
    get() {
      return this["_on" + eventNameToWrap];
    },
    set(cb) {
      if (this["_on" + eventNameToWrap]) {
        this.removeEventListener(
          eventNameToWrap,
          this["_on" + eventNameToWrap]
        );
        delete this["_on" + eventNameToWrap];
      }
      if (cb) {
        this.addEventListener(
          eventNameToWrap,
          this["_on" + eventNameToWrap] = cb
        );
      }
    },
    enumerable: true,
    configurable: true
  });
}
function disableLog(bool) {
  if (typeof bool !== "boolean") {
    return new Error("Argument type: " + typeof bool + ". Please use a boolean.");
  }
  logDisabled_ = bool;
  return bool ? "adapter.js logging disabled" : "adapter.js logging enabled";
}
function disableWarnings(bool) {
  if (typeof bool !== "boolean") {
    return new Error("Argument type: " + typeof bool + ". Please use a boolean.");
  }
  deprecationWarnings_ = !bool;
  return "adapter.js deprecation warnings " + (bool ? "disabled" : "enabled");
}
function log() {
  if (typeof window === "object") {
    if (logDisabled_) {
      return;
    }
    if (typeof console !== "undefined" && typeof console.log === "function") {
      console.log.apply(console, arguments);
    }
  }
}
function deprecated(oldMethod, newMethod) {
  if (!deprecationWarnings_) {
    return;
  }
  console.warn(oldMethod + " is deprecated, please use " + newMethod + " instead.");
}
function detectBrowser(window2) {
  const result = { browser: null, version: null };
  if (typeof window2 === "undefined" || !window2.navigator || !window2.navigator.userAgent) {
    result.browser = "Not a browser.";
    return result;
  }
  const { navigator: navigator2 } = window2;
  if (navigator2.mozGetUserMedia) {
    result.browser = "firefox";
    result.version = extractVersion(
      navigator2.userAgent,
      /Firefox\/(\d+)\./,
      1
    );
  } else if (navigator2.webkitGetUserMedia || window2.isSecureContext === false && window2.webkitRTCPeerConnection) {
    result.browser = "chrome";
    result.version = extractVersion(
      navigator2.userAgent,
      /Chrom(e|ium)\/(\d+)\./,
      2
    );
  } else if (window2.RTCPeerConnection && navigator2.userAgent.match(/AppleWebKit\/(\d+)\./)) {
    result.browser = "safari";
    result.version = extractVersion(
      navigator2.userAgent,
      /AppleWebKit\/(\d+)\./,
      1
    );
    result.supportsUnifiedPlan = window2.RTCRtpTransceiver && "currentDirection" in window2.RTCRtpTransceiver.prototype;
  } else {
    result.browser = "Not a supported browser.";
    return result;
  }
  return result;
}
function isObject(val) {
  return Object.prototype.toString.call(val) === "[object Object]";
}
function compactObject(data) {
  if (!isObject(data)) {
    return data;
  }
  return Object.keys(data).reduce(function(accumulator, key) {
    const isObj = isObject(data[key]);
    const value = isObj ? compactObject(data[key]) : data[key];
    const isEmptyObject = isObj && !Object.keys(value).length;
    if (value === void 0 || isEmptyObject) {
      return accumulator;
    }
    return Object.assign(accumulator, { [key]: value });
  }, {});
}
function walkStats(stats, base, resultSet) {
  if (!base || resultSet.has(base.id)) {
    return;
  }
  resultSet.set(base.id, base);
  Object.keys(base).forEach((name) => {
    if (name.endsWith("Id")) {
      walkStats(stats, stats.get(base[name]), resultSet);
    } else if (name.endsWith("Ids")) {
      base[name].forEach((id) => {
        walkStats(stats, stats.get(id), resultSet);
      });
    }
  });
}
function filterStats(result, track, outbound) {
  const streamStatsType = outbound ? "outbound-rtp" : "inbound-rtp";
  const filteredResult = /* @__PURE__ */ new Map();
  if (track === null) {
    return filteredResult;
  }
  const trackStats = [];
  result.forEach((value) => {
    if (value.type === "track" && value.trackIdentifier === track.id) {
      trackStats.push(value);
    }
  });
  trackStats.forEach((trackStat) => {
    result.forEach((stats) => {
      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {
        walkStats(result, stats, filteredResult);
      }
    });
  });
  return filteredResult;
}

// node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js
var chrome_shim_exports = {};
__export(chrome_shim_exports, {
  fixNegotiationNeeded: () => fixNegotiationNeeded,
  shimAddTrackRemoveTrack: () => shimAddTrackRemoveTrack,
  shimAddTrackRemoveTrackWithNative: () => shimAddTrackRemoveTrackWithNative,
  shimGetDisplayMedia: () => shimGetDisplayMedia,
  shimGetSendersWithDtmf: () => shimGetSendersWithDtmf,
  shimGetStats: () => shimGetStats,
  shimGetUserMedia: () => shimGetUserMedia,
  shimMediaStream: () => shimMediaStream,
  shimOnTrack: () => shimOnTrack,
  shimPeerConnection: () => shimPeerConnection,
  shimSenderReceiverGetStats: () => shimSenderReceiverGetStats
});
init_define_process_env();

// node_modules/webrtc-adapter/src/js/chrome/getusermedia.js
init_define_process_env();
var logging = log;
function shimGetUserMedia(window2, browserDetails) {
  const navigator2 = window2 && window2.navigator;
  if (!navigator2.mediaDevices) {
    return;
  }
  const constraintsToChrome_ = function(c5) {
    if (typeof c5 !== "object" || c5.mandatory || c5.optional) {
      return c5;
    }
    const cc = {};
    Object.keys(c5).forEach((key) => {
      if (key === "require" || key === "advanced" || key === "mediaSource") {
        return;
      }
      const r9 = typeof c5[key] === "object" ? c5[key] : { ideal: c5[key] };
      if (r9.exact !== void 0 && typeof r9.exact === "number") {
        r9.min = r9.max = r9.exact;
      }
      const oldname_ = function(prefix, name) {
        if (prefix) {
          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
        }
        return name === "deviceId" ? "sourceId" : name;
      };
      if (r9.ideal !== void 0) {
        cc.optional = cc.optional || [];
        let oc = {};
        if (typeof r9.ideal === "number") {
          oc[oldname_("min", key)] = r9.ideal;
          cc.optional.push(oc);
          oc = {};
          oc[oldname_("max", key)] = r9.ideal;
          cc.optional.push(oc);
        } else {
          oc[oldname_("", key)] = r9.ideal;
          cc.optional.push(oc);
        }
      }
      if (r9.exact !== void 0 && typeof r9.exact !== "number") {
        cc.mandatory = cc.mandatory || {};
        cc.mandatory[oldname_("", key)] = r9.exact;
      } else {
        ["min", "max"].forEach((mix) => {
          if (r9[mix] !== void 0) {
            cc.mandatory = cc.mandatory || {};
            cc.mandatory[oldname_(mix, key)] = r9[mix];
          }
        });
      }
    });
    if (c5.advanced) {
      cc.optional = (cc.optional || []).concat(c5.advanced);
    }
    return cc;
  };
  const shimConstraints_ = function(constraints, func) {
    if (browserDetails.version >= 61) {
      return func(constraints);
    }
    constraints = JSON.parse(JSON.stringify(constraints));
    if (constraints && typeof constraints.audio === "object") {
      const remap = function(obj, a4, b4) {
        if (a4 in obj && !(b4 in obj)) {
          obj[b4] = obj[a4];
          delete obj[a4];
        }
      };
      constraints = JSON.parse(JSON.stringify(constraints));
      remap(constraints.audio, "autoGainControl", "googAutoGainControl");
      remap(constraints.audio, "noiseSuppression", "googNoiseSuppression");
      constraints.audio = constraintsToChrome_(constraints.audio);
    }
    if (constraints && typeof constraints.video === "object") {
      let face = constraints.video.facingMode;
      face = face && (typeof face === "object" ? face : { ideal: face });
      const getSupportedFacingModeLies = browserDetails.version < 66;
      if (face && (face.exact === "user" || face.exact === "environment" || face.ideal === "user" || face.ideal === "environment") && !(navigator2.mediaDevices.getSupportedConstraints && navigator2.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
        delete constraints.video.facingMode;
        let matches;
        if (face.exact === "environment" || face.ideal === "environment") {
          matches = ["back", "rear"];
        } else if (face.exact === "user" || face.ideal === "user") {
          matches = ["front"];
        }
        if (matches) {
          return navigator2.mediaDevices.enumerateDevices().then((devices) => {
            devices = devices.filter((d6) => d6.kind === "videoinput");
            let dev = devices.find((d6) => matches.some((match) => d6.label.toLowerCase().includes(match)));
            if (!dev && devices.length && matches.includes("back")) {
              dev = devices[devices.length - 1];
            }
            if (dev) {
              constraints.video.deviceId = face.exact ? { exact: dev.deviceId } : { ideal: dev.deviceId };
            }
            constraints.video = constraintsToChrome_(constraints.video);
            logging("chrome: " + JSON.stringify(constraints));
            return func(constraints);
          });
        }
      }
      constraints.video = constraintsToChrome_(constraints.video);
    }
    logging("chrome: " + JSON.stringify(constraints));
    return func(constraints);
  };
  const shimError_ = function(e14) {
    if (browserDetails.version >= 64) {
      return e14;
    }
    return {
      name: {
        PermissionDeniedError: "NotAllowedError",
        PermissionDismissedError: "NotAllowedError",
        InvalidStateError: "NotAllowedError",
        DevicesNotFoundError: "NotFoundError",
        ConstraintNotSatisfiedError: "OverconstrainedError",
        TrackStartError: "NotReadableError",
        MediaDeviceFailedDueToShutdown: "NotAllowedError",
        MediaDeviceKillSwitchOn: "NotAllowedError",
        TabCaptureError: "AbortError",
        ScreenCaptureError: "AbortError",
        DeviceCaptureError: "AbortError"
      }[e14.name] || e14.name,
      message: e14.message,
      constraint: e14.constraint || e14.constraintName,
      toString() {
        return this.name + (this.message && ": ") + this.message;
      }
    };
  };
  const getUserMedia_ = function(constraints, onSuccess, onError) {
    shimConstraints_(constraints, (c5) => {
      navigator2.webkitGetUserMedia(c5, onSuccess, (e14) => {
        if (onError) {
          onError(shimError_(e14));
        }
      });
    });
  };
  navigator2.getUserMedia = getUserMedia_.bind(navigator2);
  if (navigator2.mediaDevices.getUserMedia) {
    const origGetUserMedia = navigator2.mediaDevices.getUserMedia.bind(navigator2.mediaDevices);
    navigator2.mediaDevices.getUserMedia = function(cs2) {
      return shimConstraints_(cs2, (c5) => origGetUserMedia(c5).then((stream) => {
        if (c5.audio && !stream.getAudioTracks().length || c5.video && !stream.getVideoTracks().length) {
          stream.getTracks().forEach((track) => {
            track.stop();
          });
          throw new DOMException("", "NotFoundError");
        }
        return stream;
      }, (e14) => Promise.reject(shimError_(e14))));
    };
  }
}

// node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js
init_define_process_env();
function shimGetDisplayMedia(window2, getSourceId) {
  if (window2.navigator.mediaDevices && "getDisplayMedia" in window2.navigator.mediaDevices) {
    return;
  }
  if (!window2.navigator.mediaDevices) {
    return;
  }
  if (typeof getSourceId !== "function") {
    console.error("shimGetDisplayMedia: getSourceId argument is not a function");
    return;
  }
  window2.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    return getSourceId(constraints).then((sourceId) => {
      const widthSpecified = constraints.video && constraints.video.width;
      const heightSpecified = constraints.video && constraints.video.height;
      const frameRateSpecified = constraints.video && constraints.video.frameRate;
      constraints.video = {
        mandatory: {
          chromeMediaSource: "desktop",
          chromeMediaSourceId: sourceId,
          maxFrameRate: frameRateSpecified || 3
        }
      };
      if (widthSpecified) {
        constraints.video.mandatory.maxWidth = widthSpecified;
      }
      if (heightSpecified) {
        constraints.video.mandatory.maxHeight = heightSpecified;
      }
      return window2.navigator.mediaDevices.getUserMedia(constraints);
    });
  };
}

// node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js
function shimMediaStream(window2) {
  window2.MediaStream = window2.MediaStream || window2.webkitMediaStream;
}
function shimOnTrack(window2) {
  if (typeof window2 === "object" && window2.RTCPeerConnection && !("ontrack" in window2.RTCPeerConnection.prototype)) {
    Object.defineProperty(window2.RTCPeerConnection.prototype, "ontrack", {
      get() {
        return this._ontrack;
      },
      set(f5) {
        if (this._ontrack) {
          this.removeEventListener("track", this._ontrack);
        }
        this.addEventListener("track", this._ontrack = f5);
      },
      enumerable: true,
      configurable: true
    });
    const origSetRemoteDescription = window2.RTCPeerConnection.prototype.setRemoteDescription;
    window2.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      if (!this._ontrackpoly) {
        this._ontrackpoly = (e14) => {
          e14.stream.addEventListener("addtrack", (te3) => {
            let receiver;
            if (window2.RTCPeerConnection.prototype.getReceivers) {
              receiver = this.getReceivers().find((r9) => r9.track && r9.track.id === te3.track.id);
            } else {
              receiver = { track: te3.track };
            }
            const event = new Event("track");
            event.track = te3.track;
            event.receiver = receiver;
            event.transceiver = { receiver };
            event.streams = [e14.stream];
            this.dispatchEvent(event);
          });
          e14.stream.getTracks().forEach((track) => {
            let receiver;
            if (window2.RTCPeerConnection.prototype.getReceivers) {
              receiver = this.getReceivers().find((r9) => r9.track && r9.track.id === track.id);
            } else {
              receiver = { track };
            }
            const event = new Event("track");
            event.track = track;
            event.receiver = receiver;
            event.transceiver = { receiver };
            event.streams = [e14.stream];
            this.dispatchEvent(event);
          });
        };
        this.addEventListener("addstream", this._ontrackpoly);
      }
      return origSetRemoteDescription.apply(this, arguments);
    };
  } else {
    wrapPeerConnectionEvent(window2, "track", (e14) => {
      if (!e14.transceiver) {
        Object.defineProperty(
          e14,
          "transceiver",
          { value: { receiver: e14.receiver } }
        );
      }
      return e14;
    });
  }
}
function shimGetSendersWithDtmf(window2) {
  if (typeof window2 === "object" && window2.RTCPeerConnection && !("getSenders" in window2.RTCPeerConnection.prototype) && "createDTMFSender" in window2.RTCPeerConnection.prototype) {
    const shimSenderWithDtmf = function(pc, track) {
      return {
        track,
        get dtmf() {
          if (this._dtmf === void 0) {
            if (track.kind === "audio") {
              this._dtmf = pc.createDTMFSender(track);
            } else {
              this._dtmf = null;
            }
          }
          return this._dtmf;
        },
        _pc: pc
      };
    };
    if (!window2.RTCPeerConnection.prototype.getSenders) {
      window2.RTCPeerConnection.prototype.getSenders = function getSenders() {
        this._senders = this._senders || [];
        return this._senders.slice();
      };
      const origAddTrack = window2.RTCPeerConnection.prototype.addTrack;
      window2.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        let sender = origAddTrack.apply(this, arguments);
        if (!sender) {
          sender = shimSenderWithDtmf(this, track);
          this._senders.push(sender);
        }
        return sender;
      };
      const origRemoveTrack = window2.RTCPeerConnection.prototype.removeTrack;
      window2.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        origRemoveTrack.apply(this, arguments);
        const idx = this._senders.indexOf(sender);
        if (idx !== -1) {
          this._senders.splice(idx, 1);
        }
      };
    }
    const origAddStream = window2.RTCPeerConnection.prototype.addStream;
    window2.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      this._senders = this._senders || [];
      origAddStream.apply(this, [stream]);
      stream.getTracks().forEach((track) => {
        this._senders.push(shimSenderWithDtmf(this, track));
      });
    };
    const origRemoveStream = window2.RTCPeerConnection.prototype.removeStream;
    window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      this._senders = this._senders || [];
      origRemoveStream.apply(this, [stream]);
      stream.getTracks().forEach((track) => {
        const sender = this._senders.find((s11) => s11.track === track);
        if (sender) {
          this._senders.splice(this._senders.indexOf(sender), 1);
        }
      });
    };
  } else if (typeof window2 === "object" && window2.RTCPeerConnection && "getSenders" in window2.RTCPeerConnection.prototype && "createDTMFSender" in window2.RTCPeerConnection.prototype && window2.RTCRtpSender && !("dtmf" in window2.RTCRtpSender.prototype)) {
    const origGetSenders = window2.RTCPeerConnection.prototype.getSenders;
    window2.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach((sender) => sender._pc = this);
      return senders;
    };
    Object.defineProperty(window2.RTCRtpSender.prototype, "dtmf", {
      get() {
        if (this._dtmf === void 0) {
          if (this.track.kind === "audio") {
            this._dtmf = this._pc.createDTMFSender(this.track);
          } else {
            this._dtmf = null;
          }
        }
        return this._dtmf;
      }
    });
  }
}
function shimGetStats(window2) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  const origGetStats = window2.RTCPeerConnection.prototype.getStats;
  window2.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    if (arguments.length > 0 && typeof selector === "function") {
      return origGetStats.apply(this, arguments);
    }
    if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== "function")) {
      return origGetStats.apply(this, []);
    }
    const fixChromeStats_ = function(response) {
      const standardReport = {};
      const reports = response.result();
      reports.forEach((report) => {
        const standardStats = {
          id: report.id,
          timestamp: report.timestamp,
          type: {
            localcandidate: "local-candidate",
            remotecandidate: "remote-candidate"
          }[report.type] || report.type
        };
        report.names().forEach((name) => {
          standardStats[name] = report.stat(name);
        });
        standardReport[standardStats.id] = standardStats;
      });
      return standardReport;
    };
    const makeMapStats = function(stats) {
      return new Map(Object.keys(stats).map((key) => [key, stats[key]]));
    };
    if (arguments.length >= 2) {
      const successCallbackWrapper_ = function(response) {
        onSucc(makeMapStats(fixChromeStats_(response)));
      };
      return origGetStats.apply(this, [
        successCallbackWrapper_,
        selector
      ]);
    }
    return new Promise((resolve, reject) => {
      origGetStats.apply(this, [
        function(response) {
          resolve(makeMapStats(fixChromeStats_(response)));
        },
        reject
      ]);
    }).then(onSucc, onErr);
  };
}
function shimSenderReceiverGetStats(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection && window2.RTCRtpSender && window2.RTCRtpReceiver)) {
    return;
  }
  if (!("getStats" in window2.RTCRtpSender.prototype)) {
    const origGetSenders = window2.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) {
      window2.RTCPeerConnection.prototype.getSenders = function getSenders() {
        const senders = origGetSenders.apply(this, []);
        senders.forEach((sender) => sender._pc = this);
        return senders;
      };
    }
    const origAddTrack = window2.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) {
      window2.RTCPeerConnection.prototype.addTrack = function addTrack() {
        const sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
      };
    }
    window2.RTCRtpSender.prototype.getStats = function getStats() {
      const sender = this;
      return this._pc.getStats().then((result) => filterStats(result, sender.track, true));
    };
  }
  if (!("getStats" in window2.RTCRtpReceiver.prototype)) {
    const origGetReceivers = window2.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) {
      window2.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        const receivers = origGetReceivers.apply(this, []);
        receivers.forEach((receiver) => receiver._pc = this);
        return receivers;
      };
    }
    wrapPeerConnectionEvent(window2, "track", (e14) => {
      e14.receiver._pc = e14.srcElement;
      return e14;
    });
    window2.RTCRtpReceiver.prototype.getStats = function getStats() {
      const receiver = this;
      return this._pc.getStats().then((result) => filterStats(result, receiver.track, false));
    };
  }
  if (!("getStats" in window2.RTCRtpSender.prototype && "getStats" in window2.RTCRtpReceiver.prototype)) {
    return;
  }
  const origGetStats = window2.RTCPeerConnection.prototype.getStats;
  window2.RTCPeerConnection.prototype.getStats = function getStats() {
    if (arguments.length > 0 && arguments[0] instanceof window2.MediaStreamTrack) {
      const track = arguments[0];
      let sender;
      let receiver;
      let err;
      this.getSenders().forEach((s11) => {
        if (s11.track === track) {
          if (sender) {
            err = true;
          } else {
            sender = s11;
          }
        }
      });
      this.getReceivers().forEach((r9) => {
        if (r9.track === track) {
          if (receiver) {
            err = true;
          } else {
            receiver = r9;
          }
        }
        return r9.track === track;
      });
      if (err || sender && receiver) {
        return Promise.reject(new DOMException(
          "There are more than one sender or receiver for the track.",
          "InvalidAccessError"
        ));
      } else if (sender) {
        return sender.getStats();
      } else if (receiver) {
        return receiver.getStats();
      }
      return Promise.reject(new DOMException(
        "There is no sender or receiver for the track.",
        "InvalidAccessError"
      ));
    }
    return origGetStats.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrackWithNative(window2) {
  window2.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    return Object.keys(this._shimmedLocalStreams).map((streamId) => this._shimmedLocalStreams[streamId][0]);
  };
  const origAddTrack = window2.RTCPeerConnection.prototype.addTrack;
  window2.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (!stream) {
      return origAddTrack.apply(this, arguments);
    }
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    const sender = origAddTrack.apply(this, arguments);
    if (!this._shimmedLocalStreams[stream.id]) {
      this._shimmedLocalStreams[stream.id] = [stream, sender];
    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {
      this._shimmedLocalStreams[stream.id].push(sender);
    }
    return sender;
  };
  const origAddStream = window2.RTCPeerConnection.prototype.addStream;
  window2.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    stream.getTracks().forEach((track) => {
      const alreadyExists = this.getSenders().find((s11) => s11.track === track);
      if (alreadyExists) {
        throw new DOMException(
          "Track already exists.",
          "InvalidAccessError"
        );
      }
    });
    const existingSenders = this.getSenders();
    origAddStream.apply(this, arguments);
    const newSenders = this.getSenders().filter((newSender) => existingSenders.indexOf(newSender) === -1);
    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);
  };
  const origRemoveStream = window2.RTCPeerConnection.prototype.removeStream;
  window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    delete this._shimmedLocalStreams[stream.id];
    return origRemoveStream.apply(this, arguments);
  };
  const origRemoveTrack = window2.RTCPeerConnection.prototype.removeTrack;
  window2.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
    if (sender) {
      Object.keys(this._shimmedLocalStreams).forEach((streamId) => {
        const idx = this._shimmedLocalStreams[streamId].indexOf(sender);
        if (idx !== -1) {
          this._shimmedLocalStreams[streamId].splice(idx, 1);
        }
        if (this._shimmedLocalStreams[streamId].length === 1) {
          delete this._shimmedLocalStreams[streamId];
        }
      });
    }
    return origRemoveTrack.apply(this, arguments);
  };
}
function shimAddTrackRemoveTrack(window2, browserDetails) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  if (window2.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {
    return shimAddTrackRemoveTrackWithNative(window2);
  }
  const origGetLocalStreams = window2.RTCPeerConnection.prototype.getLocalStreams;
  window2.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
    const nativeStreams = origGetLocalStreams.apply(this);
    this._reverseStreams = this._reverseStreams || {};
    return nativeStreams.map((stream) => this._reverseStreams[stream.id]);
  };
  const origAddStream = window2.RTCPeerConnection.prototype.addStream;
  window2.RTCPeerConnection.prototype.addStream = function addStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    stream.getTracks().forEach((track) => {
      const alreadyExists = this.getSenders().find((s11) => s11.track === track);
      if (alreadyExists) {
        throw new DOMException(
          "Track already exists.",
          "InvalidAccessError"
        );
      }
    });
    if (!this._reverseStreams[stream.id]) {
      const newStream = new window2.MediaStream(stream.getTracks());
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      stream = newStream;
    }
    origAddStream.apply(this, [stream]);
  };
  const origRemoveStream = window2.RTCPeerConnection.prototype.removeStream;
  window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);
    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
    delete this._streams[stream.id];
  };
  window2.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
    if (this.signalingState === "closed") {
      throw new DOMException(
        "The RTCPeerConnection's signalingState is 'closed'.",
        "InvalidStateError"
      );
    }
    const streams = [].slice.call(arguments, 1);
    if (streams.length !== 1 || !streams[0].getTracks().find((t9) => t9 === track)) {
      throw new DOMException(
        "The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.",
        "NotSupportedError"
      );
    }
    const alreadyExists = this.getSenders().find((s11) => s11.track === track);
    if (alreadyExists) {
      throw new DOMException(
        "Track already exists.",
        "InvalidAccessError"
      );
    }
    this._streams = this._streams || {};
    this._reverseStreams = this._reverseStreams || {};
    const oldStream = this._streams[stream.id];
    if (oldStream) {
      oldStream.addTrack(track);
      Promise.resolve().then(() => {
        this.dispatchEvent(new Event("negotiationneeded"));
      });
    } else {
      const newStream = new window2.MediaStream([track]);
      this._streams[stream.id] = newStream;
      this._reverseStreams[newStream.id] = stream;
      this.addStream(newStream);
    }
    return this.getSenders().find((s11) => s11.track === track);
  };
  function replaceInternalStreamId(pc, description) {
    let sdp2 = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach((internalId) => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp2 = sdp2.replace(
        new RegExp(internalStream.id, "g"),
        externalStream.id
      );
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp2
    });
  }
  function replaceExternalStreamId(pc, description) {
    let sdp2 = description.sdp;
    Object.keys(pc._reverseStreams || []).forEach((internalId) => {
      const externalStream = pc._reverseStreams[internalId];
      const internalStream = pc._streams[externalStream.id];
      sdp2 = sdp2.replace(
        new RegExp(externalStream.id, "g"),
        internalStream.id
      );
    });
    return new RTCSessionDescription({
      type: description.type,
      sdp: sdp2
    });
  }
  ["createOffer", "createAnswer"].forEach(function(method) {
    const nativeMethod = window2.RTCPeerConnection.prototype[method];
    const methodObj = { [method]() {
      const args = arguments;
      const isLegacyCall = arguments.length && typeof arguments[0] === "function";
      if (isLegacyCall) {
        return nativeMethod.apply(this, [
          (description) => {
            const desc = replaceInternalStreamId(this, description);
            args[0].apply(null, [desc]);
          },
          (err) => {
            if (args[1]) {
              args[1].apply(null, err);
            }
          },
          arguments[2]
        ]);
      }
      return nativeMethod.apply(this, arguments).then((description) => replaceInternalStreamId(this, description));
    } };
    window2.RTCPeerConnection.prototype[method] = methodObj[method];
  });
  const origSetLocalDescription = window2.RTCPeerConnection.prototype.setLocalDescription;
  window2.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    if (!arguments.length || !arguments[0].type) {
      return origSetLocalDescription.apply(this, arguments);
    }
    arguments[0] = replaceExternalStreamId(this, arguments[0]);
    return origSetLocalDescription.apply(this, arguments);
  };
  const origLocalDescription = Object.getOwnPropertyDescriptor(
    window2.RTCPeerConnection.prototype,
    "localDescription"
  );
  Object.defineProperty(
    window2.RTCPeerConnection.prototype,
    "localDescription",
    {
      get() {
        const description = origLocalDescription.get.apply(this);
        if (description.type === "") {
          return description;
        }
        return replaceInternalStreamId(this, description);
      }
    }
  );
  window2.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
    if (this.signalingState === "closed") {
      throw new DOMException(
        "The RTCPeerConnection's signalingState is 'closed'.",
        "InvalidStateError"
      );
    }
    if (!sender._pc) {
      throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
    }
    const isLocal = sender._pc === this;
    if (!isLocal) {
      throw new DOMException(
        "Sender was not created by this connection.",
        "InvalidAccessError"
      );
    }
    this._streams = this._streams || {};
    let stream;
    Object.keys(this._streams).forEach((streamid) => {
      const hasTrack = this._streams[streamid].getTracks().find((track) => sender.track === track);
      if (hasTrack) {
        stream = this._streams[streamid];
      }
    });
    if (stream) {
      if (stream.getTracks().length === 1) {
        this.removeStream(this._reverseStreams[stream.id]);
      } else {
        stream.removeTrack(sender.track);
      }
      this.dispatchEvent(new Event("negotiationneeded"));
    }
  };
}
function shimPeerConnection(window2, browserDetails) {
  if (!window2.RTCPeerConnection && window2.webkitRTCPeerConnection) {
    window2.RTCPeerConnection = window2.webkitRTCPeerConnection;
  }
  if (!window2.RTCPeerConnection) {
    return;
  }
  if (browserDetails.version < 53) {
    ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(method) {
      const nativeMethod = window2.RTCPeerConnection.prototype[method];
      const methodObj = { [method]() {
        arguments[0] = new (method === "addIceCandidate" ? window2.RTCIceCandidate : window2.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      } };
      window2.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
}
function fixNegotiationNeeded(window2, browserDetails) {
  wrapPeerConnectionEvent(window2, "negotiationneeded", (e14) => {
    const pc = e14.target;
    if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === "plan-b") {
      if (pc.signalingState !== "stable") {
        return;
      }
    }
    return e14;
  });
}

// node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js
var firefox_shim_exports = {};
__export(firefox_shim_exports, {
  shimAddTransceiver: () => shimAddTransceiver,
  shimCreateAnswer: () => shimCreateAnswer,
  shimCreateOffer: () => shimCreateOffer,
  shimGetDisplayMedia: () => shimGetDisplayMedia2,
  shimGetParameters: () => shimGetParameters,
  shimGetUserMedia: () => shimGetUserMedia2,
  shimOnTrack: () => shimOnTrack2,
  shimPeerConnection: () => shimPeerConnection2,
  shimRTCDataChannel: () => shimRTCDataChannel,
  shimReceiverGetStats: () => shimReceiverGetStats,
  shimRemoveStream: () => shimRemoveStream,
  shimSenderGetStats: () => shimSenderGetStats
});
init_define_process_env();

// node_modules/webrtc-adapter/src/js/firefox/getusermedia.js
init_define_process_env();
function shimGetUserMedia2(window2, browserDetails) {
  const navigator2 = window2 && window2.navigator;
  const MediaStreamTrack = window2 && window2.MediaStreamTrack;
  navigator2.getUserMedia = function(constraints, onSuccess, onError) {
    deprecated(
      "navigator.getUserMedia",
      "navigator.mediaDevices.getUserMedia"
    );
    navigator2.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  };
  if (!(browserDetails.version > 55 && "autoGainControl" in navigator2.mediaDevices.getSupportedConstraints())) {
    const remap = function(obj, a4, b4) {
      if (a4 in obj && !(b4 in obj)) {
        obj[b4] = obj[a4];
        delete obj[a4];
      }
    };
    const nativeGetUserMedia = navigator2.mediaDevices.getUserMedia.bind(navigator2.mediaDevices);
    navigator2.mediaDevices.getUserMedia = function(c5) {
      if (typeof c5 === "object" && typeof c5.audio === "object") {
        c5 = JSON.parse(JSON.stringify(c5));
        remap(c5.audio, "autoGainControl", "mozAutoGainControl");
        remap(c5.audio, "noiseSuppression", "mozNoiseSuppression");
      }
      return nativeGetUserMedia(c5);
    };
    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;
      MediaStreamTrack.prototype.getSettings = function() {
        const obj = nativeGetSettings.apply(this, arguments);
        remap(obj, "mozAutoGainControl", "autoGainControl");
        remap(obj, "mozNoiseSuppression", "noiseSuppression");
        return obj;
      };
    }
    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
      const nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
      MediaStreamTrack.prototype.applyConstraints = function(c5) {
        if (this.kind === "audio" && typeof c5 === "object") {
          c5 = JSON.parse(JSON.stringify(c5));
          remap(c5, "autoGainControl", "mozAutoGainControl");
          remap(c5, "noiseSuppression", "mozNoiseSuppression");
        }
        return nativeApplyConstraints.apply(this, [c5]);
      };
    }
  }
}

// node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js
init_define_process_env();
function shimGetDisplayMedia2(window2, preferredMediaSource) {
  if (window2.navigator.mediaDevices && "getDisplayMedia" in window2.navigator.mediaDevices) {
    return;
  }
  if (!window2.navigator.mediaDevices) {
    return;
  }
  window2.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
    if (!(constraints && constraints.video)) {
      const err = new DOMException("getDisplayMedia without video constraints is undefined");
      err.name = "NotFoundError";
      err.code = 8;
      return Promise.reject(err);
    }
    if (constraints.video === true) {
      constraints.video = { mediaSource: preferredMediaSource };
    } else {
      constraints.video.mediaSource = preferredMediaSource;
    }
    return window2.navigator.mediaDevices.getUserMedia(constraints);
  };
}

// node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js
function shimOnTrack2(window2) {
  if (typeof window2 === "object" && window2.RTCTrackEvent && "receiver" in window2.RTCTrackEvent.prototype && !("transceiver" in window2.RTCTrackEvent.prototype)) {
    Object.defineProperty(window2.RTCTrackEvent.prototype, "transceiver", {
      get() {
        return { receiver: this.receiver };
      }
    });
  }
}
function shimPeerConnection2(window2, browserDetails) {
  if (typeof window2 !== "object" || !(window2.RTCPeerConnection || window2.mozRTCPeerConnection)) {
    return;
  }
  if (!window2.RTCPeerConnection && window2.mozRTCPeerConnection) {
    window2.RTCPeerConnection = window2.mozRTCPeerConnection;
  }
  if (browserDetails.version < 53) {
    ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(method) {
      const nativeMethod = window2.RTCPeerConnection.prototype[method];
      const methodObj = { [method]() {
        arguments[0] = new (method === "addIceCandidate" ? window2.RTCIceCandidate : window2.RTCSessionDescription)(arguments[0]);
        return nativeMethod.apply(this, arguments);
      } };
      window2.RTCPeerConnection.prototype[method] = methodObj[method];
    });
  }
  const modernStatsTypes = {
    inboundrtp: "inbound-rtp",
    outboundrtp: "outbound-rtp",
    candidatepair: "candidate-pair",
    localcandidate: "local-candidate",
    remotecandidate: "remote-candidate"
  };
  const nativeGetStats = window2.RTCPeerConnection.prototype.getStats;
  window2.RTCPeerConnection.prototype.getStats = function getStats() {
    const [selector, onSucc, onErr] = arguments;
    return nativeGetStats.apply(this, [selector || null]).then((stats) => {
      if (browserDetails.version < 53 && !onSucc) {
        try {
          stats.forEach((stat) => {
            stat.type = modernStatsTypes[stat.type] || stat.type;
          });
        } catch (e14) {
          if (e14.name !== "TypeError") {
            throw e14;
          }
          stats.forEach((stat, i10) => {
            stats.set(i10, Object.assign({}, stat, {
              type: modernStatsTypes[stat.type] || stat.type
            }));
          });
        }
      }
      return stats;
    }).then(onSucc, onErr);
  };
}
function shimSenderGetStats(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection && window2.RTCRtpSender)) {
    return;
  }
  if (window2.RTCRtpSender && "getStats" in window2.RTCRtpSender.prototype) {
    return;
  }
  const origGetSenders = window2.RTCPeerConnection.prototype.getSenders;
  if (origGetSenders) {
    window2.RTCPeerConnection.prototype.getSenders = function getSenders() {
      const senders = origGetSenders.apply(this, []);
      senders.forEach((sender) => sender._pc = this);
      return senders;
    };
  }
  const origAddTrack = window2.RTCPeerConnection.prototype.addTrack;
  if (origAddTrack) {
    window2.RTCPeerConnection.prototype.addTrack = function addTrack() {
      const sender = origAddTrack.apply(this, arguments);
      sender._pc = this;
      return sender;
    };
  }
  window2.RTCRtpSender.prototype.getStats = function getStats() {
    return this.track ? this._pc.getStats(this.track) : Promise.resolve(/* @__PURE__ */ new Map());
  };
}
function shimReceiverGetStats(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection && window2.RTCRtpSender)) {
    return;
  }
  if (window2.RTCRtpSender && "getStats" in window2.RTCRtpReceiver.prototype) {
    return;
  }
  const origGetReceivers = window2.RTCPeerConnection.prototype.getReceivers;
  if (origGetReceivers) {
    window2.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
      const receivers = origGetReceivers.apply(this, []);
      receivers.forEach((receiver) => receiver._pc = this);
      return receivers;
    };
  }
  wrapPeerConnectionEvent(window2, "track", (e14) => {
    e14.receiver._pc = e14.srcElement;
    return e14;
  });
  window2.RTCRtpReceiver.prototype.getStats = function getStats() {
    return this._pc.getStats(this.track);
  };
}
function shimRemoveStream(window2) {
  if (!window2.RTCPeerConnection || "removeStream" in window2.RTCPeerConnection.prototype) {
    return;
  }
  window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
    deprecated("removeStream", "removeTrack");
    this.getSenders().forEach((sender) => {
      if (sender.track && stream.getTracks().includes(sender.track)) {
        this.removeTrack(sender);
      }
    });
  };
}
function shimRTCDataChannel(window2) {
  if (window2.DataChannel && !window2.RTCDataChannel) {
    window2.RTCDataChannel = window2.DataChannel;
  }
}
function shimAddTransceiver(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection)) {
    return;
  }
  const origAddTransceiver = window2.RTCPeerConnection.prototype.addTransceiver;
  if (origAddTransceiver) {
    window2.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
      this.setParametersPromises = [];
      let sendEncodings = arguments[1] && arguments[1].sendEncodings;
      if (sendEncodings === void 0) {
        sendEncodings = [];
      }
      sendEncodings = [...sendEncodings];
      const shouldPerformCheck = sendEncodings.length > 0;
      if (shouldPerformCheck) {
        sendEncodings.forEach((encodingParam) => {
          if ("rid" in encodingParam) {
            const ridRegex = /^[a-z0-9]{0,16}$/i;
            if (!ridRegex.test(encodingParam.rid)) {
              throw new TypeError("Invalid RID value provided.");
            }
          }
          if ("scaleResolutionDownBy" in encodingParam) {
            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1)) {
              throw new RangeError("scale_resolution_down_by must be >= 1.0");
            }
          }
          if ("maxFramerate" in encodingParam) {
            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {
              throw new RangeError("max_framerate must be >= 0.0");
            }
          }
        });
      }
      const transceiver = origAddTransceiver.apply(this, arguments);
      if (shouldPerformCheck) {
        const { sender } = transceiver;
        const params = sender.getParameters();
        if (!("encodings" in params) || params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
          params.encodings = sendEncodings;
          sender.sendEncodings = sendEncodings;
          this.setParametersPromises.push(
            sender.setParameters(params).then(() => {
              delete sender.sendEncodings;
            }).catch(() => {
              delete sender.sendEncodings;
            })
          );
        }
      }
      return transceiver;
    };
  }
}
function shimGetParameters(window2) {
  if (!(typeof window2 === "object" && window2.RTCRtpSender)) {
    return;
  }
  const origGetParameters = window2.RTCRtpSender.prototype.getParameters;
  if (origGetParameters) {
    window2.RTCRtpSender.prototype.getParameters = function getParameters() {
      const params = origGetParameters.apply(this, arguments);
      if (!("encodings" in params)) {
        params.encodings = [].concat(this.sendEncodings || [{}]);
      }
      return params;
    };
  }
}
function shimCreateOffer(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection)) {
    return;
  }
  const origCreateOffer = window2.RTCPeerConnection.prototype.createOffer;
  window2.RTCPeerConnection.prototype.createOffer = function createOffer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(() => {
        return origCreateOffer.apply(this, arguments);
      }).finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimCreateAnswer(window2) {
  if (!(typeof window2 === "object" && window2.RTCPeerConnection)) {
    return;
  }
  const origCreateAnswer = window2.RTCPeerConnection.prototype.createAnswer;
  window2.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
    if (this.setParametersPromises && this.setParametersPromises.length) {
      return Promise.all(this.setParametersPromises).then(() => {
        return origCreateAnswer.apply(this, arguments);
      }).finally(() => {
        this.setParametersPromises = [];
      });
    }
    return origCreateAnswer.apply(this, arguments);
  };
}

// node_modules/webrtc-adapter/src/js/safari/safari_shim.js
var safari_shim_exports = {};
__export(safari_shim_exports, {
  shimAudioContext: () => shimAudioContext,
  shimCallbacksAPI: () => shimCallbacksAPI,
  shimConstraints: () => shimConstraints,
  shimCreateOfferLegacy: () => shimCreateOfferLegacy,
  shimGetUserMedia: () => shimGetUserMedia3,
  shimLocalStreamsAPI: () => shimLocalStreamsAPI,
  shimRTCIceServerUrls: () => shimRTCIceServerUrls,
  shimRemoteStreamsAPI: () => shimRemoteStreamsAPI,
  shimTrackEventTransceiver: () => shimTrackEventTransceiver
});
init_define_process_env();
function shimLocalStreamsAPI(window2) {
  if (typeof window2 !== "object" || !window2.RTCPeerConnection) {
    return;
  }
  if (!("getLocalStreams" in window2.RTCPeerConnection.prototype)) {
    window2.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      return this._localStreams;
    };
  }
  if (!("addStream" in window2.RTCPeerConnection.prototype)) {
    const _addTrack = window2.RTCPeerConnection.prototype.addTrack;
    window2.RTCPeerConnection.prototype.addStream = function addStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      if (!this._localStreams.includes(stream)) {
        this._localStreams.push(stream);
      }
      stream.getAudioTracks().forEach((track) => _addTrack.call(
        this,
        track,
        stream
      ));
      stream.getVideoTracks().forEach((track) => _addTrack.call(
        this,
        track,
        stream
      ));
    };
    window2.RTCPeerConnection.prototype.addTrack = function addTrack(track, ...streams) {
      if (streams) {
        streams.forEach((stream) => {
          if (!this._localStreams) {
            this._localStreams = [stream];
          } else if (!this._localStreams.includes(stream)) {
            this._localStreams.push(stream);
          }
        });
      }
      return _addTrack.apply(this, arguments);
    };
  }
  if (!("removeStream" in window2.RTCPeerConnection.prototype)) {
    window2.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
      if (!this._localStreams) {
        this._localStreams = [];
      }
      const index = this._localStreams.indexOf(stream);
      if (index === -1) {
        return;
      }
      this._localStreams.splice(index, 1);
      const tracks = stream.getTracks();
      this.getSenders().forEach((sender) => {
        if (tracks.includes(sender.track)) {
          this.removeTrack(sender);
        }
      });
    };
  }
}
function shimRemoteStreamsAPI(window2) {
  if (typeof window2 !== "object" || !window2.RTCPeerConnection) {
    return;
  }
  if (!("getRemoteStreams" in window2.RTCPeerConnection.prototype)) {
    window2.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
      return this._remoteStreams ? this._remoteStreams : [];
    };
  }
  if (!("onaddstream" in window2.RTCPeerConnection.prototype)) {
    Object.defineProperty(window2.RTCPeerConnection.prototype, "onaddstream", {
      get() {
        return this._onaddstream;
      },
      set(f5) {
        if (this._onaddstream) {
          this.removeEventListener("addstream", this._onaddstream);
          this.removeEventListener("track", this._onaddstreampoly);
        }
        this.addEventListener("addstream", this._onaddstream = f5);
        this.addEventListener("track", this._onaddstreampoly = (e14) => {
          e14.streams.forEach((stream) => {
            if (!this._remoteStreams) {
              this._remoteStreams = [];
            }
            if (this._remoteStreams.includes(stream)) {
              return;
            }
            this._remoteStreams.push(stream);
            const event = new Event("addstream");
            event.stream = stream;
            this.dispatchEvent(event);
          });
        });
      }
    });
    const origSetRemoteDescription = window2.RTCPeerConnection.prototype.setRemoteDescription;
    window2.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
      const pc = this;
      if (!this._onaddstreampoly) {
        this.addEventListener("track", this._onaddstreampoly = function(e14) {
          e14.streams.forEach((stream) => {
            if (!pc._remoteStreams) {
              pc._remoteStreams = [];
            }
            if (pc._remoteStreams.indexOf(stream) >= 0) {
              return;
            }
            pc._remoteStreams.push(stream);
            const event = new Event("addstream");
            event.stream = stream;
            pc.dispatchEvent(event);
          });
        });
      }
      return origSetRemoteDescription.apply(pc, arguments);
    };
  }
}
function shimCallbacksAPI(window2) {
  if (typeof window2 !== "object" || !window2.RTCPeerConnection) {
    return;
  }
  const prototype = window2.RTCPeerConnection.prototype;
  const origCreateOffer = prototype.createOffer;
  const origCreateAnswer = prototype.createAnswer;
  const setLocalDescription = prototype.setLocalDescription;
  const setRemoteDescription = prototype.setRemoteDescription;
  const addIceCandidate = prototype.addIceCandidate;
  prototype.createOffer = function createOffer(successCallback, failureCallback) {
    const options = arguments.length >= 2 ? arguments[2] : arguments[0];
    const promise = origCreateOffer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
    const options = arguments.length >= 2 ? arguments[2] : arguments[0];
    const promise = origCreateAnswer.apply(this, [options]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  let withCallback = function(description, successCallback, failureCallback) {
    const promise = setLocalDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setLocalDescription = withCallback;
  withCallback = function(description, successCallback, failureCallback) {
    const promise = setRemoteDescription.apply(this, [description]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.setRemoteDescription = withCallback;
  withCallback = function(candidate, successCallback, failureCallback) {
    const promise = addIceCandidate.apply(this, [candidate]);
    if (!failureCallback) {
      return promise;
    }
    promise.then(successCallback, failureCallback);
    return Promise.resolve();
  };
  prototype.addIceCandidate = withCallback;
}
function shimGetUserMedia3(window2) {
  const navigator2 = window2 && window2.navigator;
  if (navigator2.mediaDevices && navigator2.mediaDevices.getUserMedia) {
    const mediaDevices = navigator2.mediaDevices;
    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
    navigator2.mediaDevices.getUserMedia = (constraints) => {
      return _getUserMedia(shimConstraints(constraints));
    };
  }
  if (!navigator2.getUserMedia && navigator2.mediaDevices && navigator2.mediaDevices.getUserMedia) {
    navigator2.getUserMedia = function getUserMedia(constraints, cb, errcb) {
      navigator2.mediaDevices.getUserMedia(constraints).then(cb, errcb);
    }.bind(navigator2);
  }
}
function shimConstraints(constraints) {
  if (constraints && constraints.video !== void 0) {
    return Object.assign(
      {},
      constraints,
      { video: compactObject(constraints.video) }
    );
  }
  return constraints;
}
function shimRTCIceServerUrls(window2) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  const OrigPeerConnection = window2.RTCPeerConnection;
  window2.RTCPeerConnection = function RTCPeerConnection2(pcConfig, pcConstraints) {
    if (pcConfig && pcConfig.iceServers) {
      const newIceServers = [];
      for (let i10 = 0; i10 < pcConfig.iceServers.length; i10++) {
        let server = pcConfig.iceServers[i10];
        if (server.urls === void 0 && server.url) {
          deprecated("RTCIceServer.url", "RTCIceServer.urls");
          server = JSON.parse(JSON.stringify(server));
          server.urls = server.url;
          delete server.url;
          newIceServers.push(server);
        } else {
          newIceServers.push(pcConfig.iceServers[i10]);
        }
      }
      pcConfig.iceServers = newIceServers;
    }
    return new OrigPeerConnection(pcConfig, pcConstraints);
  };
  window2.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
  if ("generateCertificate" in OrigPeerConnection) {
    Object.defineProperty(window2.RTCPeerConnection, "generateCertificate", {
      get() {
        return OrigPeerConnection.generateCertificate;
      }
    });
  }
}
function shimTrackEventTransceiver(window2) {
  if (typeof window2 === "object" && window2.RTCTrackEvent && "receiver" in window2.RTCTrackEvent.prototype && !("transceiver" in window2.RTCTrackEvent.prototype)) {
    Object.defineProperty(window2.RTCTrackEvent.prototype, "transceiver", {
      get() {
        return { receiver: this.receiver };
      }
    });
  }
}
function shimCreateOfferLegacy(window2) {
  const origCreateOffer = window2.RTCPeerConnection.prototype.createOffer;
  window2.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
    if (offerOptions) {
      if (typeof offerOptions.offerToReceiveAudio !== "undefined") {
        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
      }
      const audioTransceiver = this.getTransceivers().find((transceiver) => transceiver.receiver.track.kind === "audio");
      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
        if (audioTransceiver.direction === "sendrecv") {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection("sendonly");
          } else {
            audioTransceiver.direction = "sendonly";
          }
        } else if (audioTransceiver.direction === "recvonly") {
          if (audioTransceiver.setDirection) {
            audioTransceiver.setDirection("inactive");
          } else {
            audioTransceiver.direction = "inactive";
          }
        }
      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {
        this.addTransceiver("audio", { direction: "recvonly" });
      }
      if (typeof offerOptions.offerToReceiveVideo !== "undefined") {
        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
      }
      const videoTransceiver = this.getTransceivers().find((transceiver) => transceiver.receiver.track.kind === "video");
      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
        if (videoTransceiver.direction === "sendrecv") {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection("sendonly");
          } else {
            videoTransceiver.direction = "sendonly";
          }
        } else if (videoTransceiver.direction === "recvonly") {
          if (videoTransceiver.setDirection) {
            videoTransceiver.setDirection("inactive");
          } else {
            videoTransceiver.direction = "inactive";
          }
        }
      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {
        this.addTransceiver("video", { direction: "recvonly" });
      }
    }
    return origCreateOffer.apply(this, arguments);
  };
}
function shimAudioContext(window2) {
  if (typeof window2 !== "object" || window2.AudioContext) {
    return;
  }
  window2.AudioContext = window2.webkitAudioContext;
}

// node_modules/webrtc-adapter/src/js/common_shim.js
var common_shim_exports = {};
__export(common_shim_exports, {
  removeExtmapAllowMixed: () => removeExtmapAllowMixed,
  shimAddIceCandidateNullOrEmpty: () => shimAddIceCandidateNullOrEmpty,
  shimConnectionState: () => shimConnectionState,
  shimMaxMessageSize: () => shimMaxMessageSize,
  shimParameterlessSetLocalDescription: () => shimParameterlessSetLocalDescription,
  shimRTCIceCandidate: () => shimRTCIceCandidate,
  shimRTCIceCandidateRelayProtocol: () => shimRTCIceCandidateRelayProtocol,
  shimSendThrowTypeError: () => shimSendThrowTypeError
});
init_define_process_env();
var import_sdp = __toESM(require_sdp());
function shimRTCIceCandidate(window2) {
  if (!window2.RTCIceCandidate || window2.RTCIceCandidate && "foundation" in window2.RTCIceCandidate.prototype) {
    return;
  }
  const NativeRTCIceCandidate = window2.RTCIceCandidate;
  window2.RTCIceCandidate = function RTCIceCandidate(args) {
    if (typeof args === "object" && args.candidate && args.candidate.indexOf("a=") === 0) {
      args = JSON.parse(JSON.stringify(args));
      args.candidate = args.candidate.substring(2);
    }
    if (args.candidate && args.candidate.length) {
      const nativeCandidate = new NativeRTCIceCandidate(args);
      const parsedCandidate = import_sdp.default.parseCandidate(args.candidate);
      for (const key in parsedCandidate) {
        if (!(key in nativeCandidate)) {
          Object.defineProperty(
            nativeCandidate,
            key,
            { value: parsedCandidate[key] }
          );
        }
      }
      nativeCandidate.toJSON = function toJSON() {
        return {
          candidate: nativeCandidate.candidate,
          sdpMid: nativeCandidate.sdpMid,
          sdpMLineIndex: nativeCandidate.sdpMLineIndex,
          usernameFragment: nativeCandidate.usernameFragment
        };
      };
      return nativeCandidate;
    }
    return new NativeRTCIceCandidate(args);
  };
  window2.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;
  wrapPeerConnectionEvent(window2, "icecandidate", (e14) => {
    if (e14.candidate) {
      Object.defineProperty(e14, "candidate", {
        value: new window2.RTCIceCandidate(e14.candidate),
        writable: "false"
      });
    }
    return e14;
  });
}
function shimRTCIceCandidateRelayProtocol(window2) {
  if (!window2.RTCIceCandidate || window2.RTCIceCandidate && "relayProtocol" in window2.RTCIceCandidate.prototype) {
    return;
  }
  wrapPeerConnectionEvent(window2, "icecandidate", (e14) => {
    if (e14.candidate) {
      const parsedCandidate = import_sdp.default.parseCandidate(e14.candidate.candidate);
      if (parsedCandidate.type === "relay") {
        e14.candidate.relayProtocol = {
          0: "tls",
          1: "tcp",
          2: "udp"
        }[parsedCandidate.priority >> 24];
      }
    }
    return e14;
  });
}
function shimMaxMessageSize(window2, browserDetails) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  if (!("sctp" in window2.RTCPeerConnection.prototype)) {
    Object.defineProperty(window2.RTCPeerConnection.prototype, "sctp", {
      get() {
        return typeof this._sctp === "undefined" ? null : this._sctp;
      }
    });
  }
  const sctpInDescription = function(description) {
    if (!description || !description.sdp) {
      return false;
    }
    const sections = import_sdp.default.splitSections(description.sdp);
    sections.shift();
    return sections.some((mediaSection) => {
      const mLine = import_sdp.default.parseMLine(mediaSection);
      return mLine && mLine.kind === "application" && mLine.protocol.indexOf("SCTP") !== -1;
    });
  };
  const getRemoteFirefoxVersion = function(description) {
    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
    if (match === null || match.length < 2) {
      return -1;
    }
    const version = parseInt(match[1], 10);
    return version !== version ? -1 : version;
  };
  const getCanSendMaxMessageSize = function(remoteIsFirefox) {
    let canSendMaxMessageSize = 65536;
    if (browserDetails.browser === "firefox") {
      if (browserDetails.version < 57) {
        if (remoteIsFirefox === -1) {
          canSendMaxMessageSize = 16384;
        } else {
          canSendMaxMessageSize = 2147483637;
        }
      } else if (browserDetails.version < 60) {
        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
      } else {
        canSendMaxMessageSize = 2147483637;
      }
    }
    return canSendMaxMessageSize;
  };
  const getMaxMessageSize = function(description, remoteIsFirefox) {
    let maxMessageSize = 65536;
    if (browserDetails.browser === "firefox" && browserDetails.version === 57) {
      maxMessageSize = 65535;
    }
    const match = import_sdp.default.matchPrefix(
      description.sdp,
      "a=max-message-size:"
    );
    if (match.length > 0) {
      maxMessageSize = parseInt(match[0].substring(19), 10);
    } else if (browserDetails.browser === "firefox" && remoteIsFirefox !== -1) {
      maxMessageSize = 2147483637;
    }
    return maxMessageSize;
  };
  const origSetRemoteDescription = window2.RTCPeerConnection.prototype.setRemoteDescription;
  window2.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
    this._sctp = null;
    if (browserDetails.browser === "chrome" && browserDetails.version >= 76) {
      const { sdpSemantics } = this.getConfiguration();
      if (sdpSemantics === "plan-b") {
        Object.defineProperty(this, "sctp", {
          get() {
            return typeof this._sctp === "undefined" ? null : this._sctp;
          },
          enumerable: true,
          configurable: true
        });
      }
    }
    if (sctpInDescription(arguments[0])) {
      const isFirefox = getRemoteFirefoxVersion(arguments[0]);
      const canSendMMS = getCanSendMaxMessageSize(isFirefox);
      const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);
      let maxMessageSize;
      if (canSendMMS === 0 && remoteMMS === 0) {
        maxMessageSize = Number.POSITIVE_INFINITY;
      } else if (canSendMMS === 0 || remoteMMS === 0) {
        maxMessageSize = Math.max(canSendMMS, remoteMMS);
      } else {
        maxMessageSize = Math.min(canSendMMS, remoteMMS);
      }
      const sctp = {};
      Object.defineProperty(sctp, "maxMessageSize", {
        get() {
          return maxMessageSize;
        }
      });
      this._sctp = sctp;
    }
    return origSetRemoteDescription.apply(this, arguments);
  };
}
function shimSendThrowTypeError(window2) {
  if (!(window2.RTCPeerConnection && "createDataChannel" in window2.RTCPeerConnection.prototype)) {
    return;
  }
  function wrapDcSend(dc, pc) {
    const origDataChannelSend = dc.send;
    dc.send = function send() {
      const data = arguments[0];
      const length = data.length || data.size || data.byteLength;
      if (dc.readyState === "open" && pc.sctp && length > pc.sctp.maxMessageSize) {
        throw new TypeError("Message too large (can send a maximum of " + pc.sctp.maxMessageSize + " bytes)");
      }
      return origDataChannelSend.apply(dc, arguments);
    };
  }
  const origCreateDataChannel = window2.RTCPeerConnection.prototype.createDataChannel;
  window2.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
    const dataChannel = origCreateDataChannel.apply(this, arguments);
    wrapDcSend(dataChannel, this);
    return dataChannel;
  };
  wrapPeerConnectionEvent(window2, "datachannel", (e14) => {
    wrapDcSend(e14.channel, e14.target);
    return e14;
  });
}
function shimConnectionState(window2) {
  if (!window2.RTCPeerConnection || "connectionState" in window2.RTCPeerConnection.prototype) {
    return;
  }
  const proto = window2.RTCPeerConnection.prototype;
  Object.defineProperty(proto, "connectionState", {
    get() {
      return {
        completed: "connected",
        checking: "connecting"
      }[this.iceConnectionState] || this.iceConnectionState;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(proto, "onconnectionstatechange", {
    get() {
      return this._onconnectionstatechange || null;
    },
    set(cb) {
      if (this._onconnectionstatechange) {
        this.removeEventListener(
          "connectionstatechange",
          this._onconnectionstatechange
        );
        delete this._onconnectionstatechange;
      }
      if (cb) {
        this.addEventListener(
          "connectionstatechange",
          this._onconnectionstatechange = cb
        );
      }
    },
    enumerable: true,
    configurable: true
  });
  ["setLocalDescription", "setRemoteDescription"].forEach((method) => {
    const origMethod = proto[method];
    proto[method] = function() {
      if (!this._connectionstatechangepoly) {
        this._connectionstatechangepoly = (e14) => {
          const pc = e14.target;
          if (pc._lastConnectionState !== pc.connectionState) {
            pc._lastConnectionState = pc.connectionState;
            const newEvent = new Event("connectionstatechange", e14);
            pc.dispatchEvent(newEvent);
          }
          return e14;
        };
        this.addEventListener(
          "iceconnectionstatechange",
          this._connectionstatechangepoly
        );
      }
      return origMethod.apply(this, arguments);
    };
  });
}
function removeExtmapAllowMixed(window2, browserDetails) {
  if (!window2.RTCPeerConnection) {
    return;
  }
  if (browserDetails.browser === "chrome" && browserDetails.version >= 71) {
    return;
  }
  if (browserDetails.browser === "safari" && browserDetails.version >= 605) {
    return;
  }
  const nativeSRD = window2.RTCPeerConnection.prototype.setRemoteDescription;
  window2.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
    if (desc && desc.sdp && desc.sdp.indexOf("\na=extmap-allow-mixed") !== -1) {
      const sdp2 = desc.sdp.split("\n").filter((line) => {
        return line.trim() !== "a=extmap-allow-mixed";
      }).join("\n");
      if (window2.RTCSessionDescription && desc instanceof window2.RTCSessionDescription) {
        arguments[0] = new window2.RTCSessionDescription({
          type: desc.type,
          sdp: sdp2
        });
      } else {
        desc.sdp = sdp2;
      }
    }
    return nativeSRD.apply(this, arguments);
  };
}
function shimAddIceCandidateNullOrEmpty(window2, browserDetails) {
  if (!(window2.RTCPeerConnection && window2.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeAddIceCandidate = window2.RTCPeerConnection.prototype.addIceCandidate;
  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {
    return;
  }
  window2.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
    if (!arguments[0]) {
      if (arguments[1]) {
        arguments[1].apply(null);
      }
      return Promise.resolve();
    }
    if ((browserDetails.browser === "chrome" && browserDetails.version < 78 || browserDetails.browser === "firefox" && browserDetails.version < 68 || browserDetails.browser === "safari") && arguments[0] && arguments[0].candidate === "") {
      return Promise.resolve();
    }
    return nativeAddIceCandidate.apply(this, arguments);
  };
}
function shimParameterlessSetLocalDescription(window2, browserDetails) {
  if (!(window2.RTCPeerConnection && window2.RTCPeerConnection.prototype)) {
    return;
  }
  const nativeSetLocalDescription = window2.RTCPeerConnection.prototype.setLocalDescription;
  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {
    return;
  }
  window2.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
    let desc = arguments[0] || {};
    if (typeof desc !== "object" || desc.type && desc.sdp) {
      return nativeSetLocalDescription.apply(this, arguments);
    }
    desc = { type: desc.type, sdp: desc.sdp };
    if (!desc.type) {
      switch (this.signalingState) {
        case "stable":
        case "have-local-offer":
        case "have-remote-pranswer":
          desc.type = "offer";
          break;
        default:
          desc.type = "answer";
          break;
      }
    }
    if (desc.sdp || desc.type !== "offer" && desc.type !== "answer") {
      return nativeSetLocalDescription.apply(this, [desc]);
    }
    const func = desc.type === "offer" ? this.createOffer : this.createAnswer;
    return func.apply(this).then((d6) => nativeSetLocalDescription.apply(this, [d6]));
  };
}

// node_modules/webrtc-adapter/src/js/adapter_factory.js
var sdp = __toESM(require_sdp());
function adapterFactory({ window: window2 } = {}, options = {
  shimChrome: true,
  shimFirefox: true,
  shimSafari: true
}) {
  const logging2 = log;
  const browserDetails = detectBrowser(window2);
  const adapter2 = {
    browserDetails,
    commonShim: common_shim_exports,
    extractVersion,
    disableLog,
    disableWarnings,
    sdp
  };
  switch (browserDetails.browser) {
    case "chrome":
      if (!chrome_shim_exports || !shimPeerConnection || !options.shimChrome) {
        logging2("Chrome shim is not included in this adapter release.");
        return adapter2;
      }
      if (browserDetails.version === null) {
        logging2("Chrome shim can not determine version, not shimming.");
        return adapter2;
      }
      logging2("adapter.js shimming chrome.");
      adapter2.browserShim = chrome_shim_exports;
      shimAddIceCandidateNullOrEmpty(window2, browserDetails);
      shimParameterlessSetLocalDescription(window2, browserDetails);
      shimGetUserMedia(window2, browserDetails);
      shimMediaStream(window2, browserDetails);
      shimPeerConnection(window2, browserDetails);
      shimOnTrack(window2, browserDetails);
      shimAddTrackRemoveTrack(window2, browserDetails);
      shimGetSendersWithDtmf(window2, browserDetails);
      shimGetStats(window2, browserDetails);
      shimSenderReceiverGetStats(window2, browserDetails);
      fixNegotiationNeeded(window2, browserDetails);
      shimRTCIceCandidate(window2, browserDetails);
      shimRTCIceCandidateRelayProtocol(window2, browserDetails);
      shimConnectionState(window2, browserDetails);
      shimMaxMessageSize(window2, browserDetails);
      shimSendThrowTypeError(window2, browserDetails);
      removeExtmapAllowMixed(window2, browserDetails);
      break;
    case "firefox":
      if (!firefox_shim_exports || !shimPeerConnection2 || !options.shimFirefox) {
        logging2("Firefox shim is not included in this adapter release.");
        return adapter2;
      }
      logging2("adapter.js shimming firefox.");
      adapter2.browserShim = firefox_shim_exports;
      shimAddIceCandidateNullOrEmpty(window2, browserDetails);
      shimParameterlessSetLocalDescription(window2, browserDetails);
      shimGetUserMedia2(window2, browserDetails);
      shimPeerConnection2(window2, browserDetails);
      shimOnTrack2(window2, browserDetails);
      shimRemoveStream(window2, browserDetails);
      shimSenderGetStats(window2, browserDetails);
      shimReceiverGetStats(window2, browserDetails);
      shimRTCDataChannel(window2, browserDetails);
      shimAddTransceiver(window2, browserDetails);
      shimGetParameters(window2, browserDetails);
      shimCreateOffer(window2, browserDetails);
      shimCreateAnswer(window2, browserDetails);
      shimRTCIceCandidate(window2, browserDetails);
      shimConnectionState(window2, browserDetails);
      shimMaxMessageSize(window2, browserDetails);
      shimSendThrowTypeError(window2, browserDetails);
      break;
    case "safari":
      if (!safari_shim_exports || !options.shimSafari) {
        logging2("Safari shim is not included in this adapter release.");
        return adapter2;
      }
      logging2("adapter.js shimming safari.");
      adapter2.browserShim = safari_shim_exports;
      shimAddIceCandidateNullOrEmpty(window2, browserDetails);
      shimParameterlessSetLocalDescription(window2, browserDetails);
      shimRTCIceServerUrls(window2, browserDetails);
      shimCreateOfferLegacy(window2, browserDetails);
      shimCallbacksAPI(window2, browserDetails);
      shimLocalStreamsAPI(window2, browserDetails);
      shimRemoteStreamsAPI(window2, browserDetails);
      shimTrackEventTransceiver(window2, browserDetails);
      shimGetUserMedia3(window2, browserDetails);
      shimAudioContext(window2, browserDetails);
      shimRTCIceCandidate(window2, browserDetails);
      shimRTCIceCandidateRelayProtocol(window2, browserDetails);
      shimMaxMessageSize(window2, browserDetails);
      shimSendThrowTypeError(window2, browserDetails);
      removeExtmapAllowMixed(window2, browserDetails);
      break;
    default:
      logging2("Unsupported browser!");
      break;
  }
  return adapter2;
}

// node_modules/webrtc-adapter/src/js/adapter_core.js
var adapter = adapterFactory({ window: typeof window === "undefined" ? void 0 : window });
var adapter_core_default = adapter;

// node_modules/@100mslive/hms-video/dist/index.js
var import_eventemitter2 = __toESM(require_eventemitter2());
var import_eventemitter22 = __toESM(require_eventemitter2());
var qe = __toESM(require_lib());
var import_eventemitter23 = __toESM(require_eventemitter2());
var dr = Object.defineProperty;
var lr = Object.defineProperties;
var ur = Object.getOwnPropertyDescriptors;
var Ze = Object.getOwnPropertySymbols;
var hr = Object.getPrototypeOf;
var fi = Object.prototype.hasOwnProperty;
var Ei = Object.prototype.propertyIsEnumerable;
var pr = Reflect.get;
var Ti = (n18, e14, t9) => e14 in n18 ? dr(n18, e14, { enumerable: true, configurable: true, writable: true, value: t9 }) : n18[e14] = t9;
var g = (n18, e14) => {
  for (var t9 in e14 || (e14 = {}))
    fi.call(e14, t9) && Ti(n18, t9, e14[t9]);
  if (Ze)
    for (var t9 of Ze(e14))
      Ei.call(e14, t9) && Ti(n18, t9, e14[t9]);
  return n18;
};
var M = (n18, e14) => lr(n18, ur(e14));
var $t = (n18, e14) => {
  var t9 = {};
  for (var i10 in n18)
    fi.call(n18, i10) && e14.indexOf(i10) < 0 && (t9[i10] = n18[i10]);
  if (n18 != null && Ze)
    for (var i10 of Ze(n18))
      e14.indexOf(i10) < 0 && Ei.call(n18, i10) && (t9[i10] = n18[i10]);
  return t9;
};
var mr = (n18, e14) => () => (e14 || n18((e14 = { exports: {} }).exports, e14), e14.exports);
var D = (n18, e14, t9) => pr(hr(n18), t9, e14);
var d = (n18, e14, t9) => new Promise((i10, r9) => {
  var s11 = (l5) => {
    try {
      c5(t9.next(l5));
    } catch (h4) {
      r9(h4);
    }
  }, a4 = (l5) => {
    try {
      c5(t9.throw(l5));
    } catch (h4) {
      r9(h4);
    }
  }, c5 = (l5) => l5.done ? i10(l5.value) : Promise.resolve(l5.value).then(s11, a4);
  c5((t9 = t9.apply(n18, e14)).next());
});
var qt = mr((Ks2, kr2) => {
  kr2.exports = { name: "@100mslive/hms-video", version: "0.9.10", license: "MIT", main: "dist/index.cjs.js", typings: "dist/index.d.ts", module: "dist/index.js", files: ["dist", "src"], engines: { node: ">=10" }, exports: { ".": { require: "./dist/index.cjs.js", import: "./dist/index.js", default: "./dist/index.js" } }, scripts: { prestart: "rm -rf dist && yarn types:build", start: 'concurrently "yarn dev" "yarn types"', dev: "node ../../scripts/dev", "build:only": "node ../../scripts/build", build: "yarn build:only && yarn types:build", types: "tsc -w", "types:build": "tsc -p tsconfig.json", test: "jest --maxWorkers=1", lint: "eslint -c ../../.eslintrc .", "lint:fix": "yarn lint --fix", prepare: "yarn build", size: "size-limit", analyze: "size-limit --why", format: "prettier --write src/**/*.ts" }, author: "100ms <tech-common@100ms.live>", devDependencies: { "@types/dom-screen-wake-lock": "^1.0.1", "@types/sdp-transform": "^2.4.4", "@types/ua-parser-js": "^0.7.36", "@types/uuid": "^8.3.0", "jest-canvas-mock": "^2.3.1", tslib: "^2.2.0" }, dependencies: { eventemitter2: "^6.4.7", "sdp-transform": "^2.14.1", "ua-parser-js": "^1.0.1", uuid: "^8.3.2", "webrtc-adapter": "^8.0.0" }, gitHead: "fe8f6b9b3b39b210c46f19c021ccf37c654c32d4" };
});
var ne = class {
  constructor({ sender: e14, message: t9, type: i10 = "chat", recipientPeer: r9, recipientRoles: s11, time: a4, id: c5 }) {
    this.sender = e14, this.message = t9, this.type = i10, this.recipientPeer = r9, this.recipientRoles = s11, this.time = a4, this.id = c5;
  }
  toSignalParams() {
    var r9, s11;
    let e14 = (r9 = this.recipientRoles) == null ? void 0 : r9.map((a4) => a4.name), t9 = (s11 = this.recipientPeer) == null ? void 0 : s11.peerId, i10 = { info: { message: this.message, type: this.type } };
    return e14 != null && e14.length && (i10.roles = e14), t9 && (i10.peer_id = t9), i10;
  }
  toString() {
    var e14;
    return `{
      sender: ${this.sender};
      recipientPeer: ${this.recipientPeer};
      recipientRoles: ${(e14 = this.recipientRoles) == null ? void 0 : e14.map((t9) => t9.name)};
      message: ${this.message};
      time: ${this.time};
      type: ${this.type};
      id: ${this.id}
    }`;
  }
};
var Re = class {
  constructor(e14) {
    this.recording = { server: { running: false }, browser: { running: false }, hls: { running: false } };
    this.rtmp = { running: false };
    this.hls = { running: false, variants: [] };
    this.id = e14;
  }
};
var W = class {
  constructor({ peerId: e14, name: t9, isLocal: i10, customerUserId: r9, metadata: s11, role: a4, joinedAt: c5 }) {
    this.customerUserId = "";
    this.metadata = "";
    this.auxiliaryTracks = [];
    this.name = t9, this.peerId = e14, this.isLocal = i10, this.customerUserId = r9, this.metadata = s11, this.joinedAt = c5, a4 && (this.role = a4);
  }
  updateRole(e14) {
    this.role = e14;
  }
  updateName(e14) {
    this.name = e14;
  }
  updateMetadata(e14) {
    this.metadata = e14;
  }
  toString() {
    var e14, t9, i10;
    return `{
      name: ${this.name};
      role: ${(e14 = this.role) == null ? void 0 : e14.name};
      peerId: ${this.peerId};
      customerUserId: ${this.customerUserId};
      ${this.audioTrack ? `audioTrack: ${(t9 = this.audioTrack) == null ? void 0 : t9.trackId};` : ""}
      ${this.videoTrack ? `videoTrack: ${(i10 = this.videoTrack) == null ? void 0 : i10.trackId};` : ""}
    }`;
  }
};
var Se = class {
};
Se.makePeerId = () => v4_default();
var Ce = class extends W {
  constructor(t9) {
    super(M(g({}, t9), { peerId: Se.makePeerId(), isLocal: true }));
    this.isLocal = true;
    this.auxiliaryTracks = [];
    this.asRole = t9.asRole;
  }
  isInPreview() {
    return !!this.asRole;
  }
  toString() {
    var t9, i10, r9;
    return `{
      name: ${this.name};
      role: ${(t9 = this.role) == null ? void 0 : t9.name};
      peerId: ${this.peerId};
      customerUserId: ${this.customerUserId};
      ${this.asRole ? `asRole: ${this.asRole.name};` : ""}
      ${this.audioTrack ? `audioTrack: ${(i10 = this.audioTrack) == null ? void 0 : i10.trackId};` : ""}
      ${this.videoTrack ? `videoTrack: ${(r9 = this.videoTrack) == null ? void 0 : r9.trackId};` : ""}
    }`;
  }
};
var we = class extends W {
  constructor(t9) {
    super(M(g({}, t9), { isLocal: false }));
    this.isLocal = false;
    this.auxiliaryTracks = [];
    this.fromRoomState = false;
    this.fromRoomState = !!t9.fromRoomState;
  }
};
var oe = new import_ua_parser_js.UAParser();
var w = typeof window != "undefined";
var ki;
var ce = typeof window == "undefined" && !((ki = oe.getBrowser().name) != null && ki.toLowerCase().includes("electron"));
var et = ((i10) => (i10.PROD = "prod", i10.QA = "qa", i10.DEV = "dev", i10))(et || {});
var vr = () => !ce;
var Hs = vr();
var Mi = () => oe.getDevice().type === "mobile";
var yi = () => typeof document != "undefined" && document.hidden;
var Wt = () => {
  var n18;
  return ((n18 = oe.getOS().name) == null ? void 0 : n18.toLowerCase()) === "ios";
};
function fr() {
  if (w && window) {
    let n18 = window.location.hostname;
    return n18 === "localhost" || n18 === "127.0.0.1" ? "LOCAL" : n18.includes("app.100ms.live") ? "HMS" : "CUSTOM";
  }
  return "CUSTOM";
}
var ve = fr();
var Kt = class {
  constructor() {
    this.valuesMap = /* @__PURE__ */ new Map();
  }
  getItem(e14) {
    return this.valuesMap.has(e14) ? String(this.valuesMap.get(e14)) : null;
  }
  setItem(e14, t9) {
    this.valuesMap.set(e14, t9);
  }
  removeItem(e14) {
    this.valuesMap.delete(e14);
  }
  clear() {
    this.valuesMap.clear();
  }
  key(e14) {
    if (arguments.length === 0)
      throw new TypeError("Failed to execute 'key' on 'Storage': 1 argument required, but only 0 present.");
    return Array.from(this.valuesMap.keys())[e14];
  }
  get length() {
    return this.valuesMap.size;
  }
};
var Pi = () => {
  w && !localStorage && (window.localStorage = new Kt());
};
var U = class {
  constructor(e14) {
    this.key = e14;
    this.storage = null;
  }
  getStorage() {
    return w && !this.storage && (Pi(), this.storage = window.localStorage), this.storage;
  }
  get() {
    var i10;
    let e14 = (i10 = this.getStorage()) == null ? void 0 : i10.getItem(this.key);
    return e14 ? JSON.parse(e14) : void 0;
  }
  set(e14) {
    var i10;
    let t9 = JSON.stringify(e14);
    (i10 = this.getStorage()) == null || i10.setItem(this.key, t9);
  }
  clear() {
    var e14;
    (e14 = this.getStorage()) == null || e14.removeItem(this.key);
  }
};
var Ai = () => {
  let n18, e14 = new U("hms-analytics-deviceId"), t9 = e14.get();
  return t9 ? n18 = t9 : (n18 = v4_default(), e14.set(n18)), n18;
};
var bi = qt().version;
function Le(n18 = "prod", e14) {
  let t9 = "web", i10 = ve !== "LOCAL" && n18 === "prod" ? "prod" : "debug";
  if (ce)
    return Ii({ os: "web_nodejs", os_version: process.version, sdk: t9, sdk_version: bi, env: i10, domain: ve, framework: "node", framework_version: process.version, framework_sdk_version: e14 == null ? void 0 : e14.sdkVersion });
  let r9 = oe.getOS(), s11 = oe.getDevice(), a4 = oe.getBrowser(), c5 = jt(`web_${r9.name}`), l5 = r9.version || "", h4 = jt(`${a4.name}_${a4.version}`), u5 = h4;
  return s11.type && (u5 = `${jt(`${s11.vendor}_${s11.type}`)}/${h4}`), Ii({ os: c5, os_version: l5, sdk: t9, sdk_version: bi, device_model: u5, env: i10, domain: ve, framework: e14 == null ? void 0 : e14.type, framework_version: e14 == null ? void 0 : e14.version, framework_sdk_version: e14 == null ? void 0 : e14.sdkVersion });
}
function jt(n18) {
  return n18.replace(/ /g, "_");
}
var Ii = (n18, e14 = ",") => Object.keys(n18).filter((t9) => !!n18[t9]).map((t9) => `${t9}:${n18[t9]}`).join(e14);
var P = class {
  constructor({ name: e14, level: t9, properties: i10, includesPII: r9, timestamp: s11 }) {
    this.metadata = { peer: {}, userAgent: Le() };
    this.name = e14, this.level = t9, this.includesPII = r9 || false, this.properties = i10 || {}, this.timestamp = s11 || new Date().getTime(), this.event_id = v4_default(), this.device_id = Ai();
  }
  toSignalParams() {
    return { name: this.name, info: M(g({}, this.properties), { timestamp: this.timestamp, domain: ve }), timestamp: new Date().getTime() };
  }
};
var v = class n extends Error {
  constructor(t9, i10, r9, s11, a4, c5 = false) {
    super(s11);
    this.code = t9;
    this.name = i10;
    this.message = s11;
    this.description = a4;
    this.isTerminal = c5;
    Object.setPrototypeOf(this, n.prototype), this.action = r9.toString();
  }
  toAnalyticsProperties() {
    return { error_name: this.name, error_code: this.code, error_message: this.message, error_description: this.description, action: this.action, is_terminal: this.isTerminal };
  }
  addNativeError(t9) {
    this.nativeError = t9;
  }
  toString() {
    var t9;
    return `{
      code: ${this.code};
      name: ${this.name};
      action: ${this.action};
      message: ${this.message};
      description: ${this.description};
      isTerminal: ${this.isTerminal};
      nativeError: ${(t9 = this.nativeError) == null ? void 0 : t9.message};
    }`;
  }
};
var E = class {
  static connect(e14, t9, i10 = new Date(), r9 = new Date(), s11) {
    let a4 = this.eventNameFor("connect", e14 === void 0), c5 = e14 ? 2 : 1, l5 = this.getPropertiesWithError(M(g({}, t9), { [this.KEY_REQUESTED_AT]: i10 == null ? void 0 : i10.getTime(), [this.KEY_RESPONDED_AT]: r9 == null ? void 0 : r9.getTime(), endpoint: s11 }), e14);
    return new P({ name: a4, level: c5, properties: l5 });
  }
  static disconnect(e14, t9) {
    let i10 = "disconnected", r9 = e14 ? 2 : 1, s11 = this.getPropertiesWithError(t9, e14);
    return new P({ name: i10, level: r9, properties: s11 });
  }
  static preview(i10) {
    var r9 = i10, { error: e14 } = r9, t9 = $t(r9, ["error"]);
    let s11 = this.eventNameFor("preview", e14 === void 0), a4 = e14 ? 2 : 1, c5 = this.getPropertiesWithError(t9, e14);
    return new P({ name: s11, level: a4, properties: c5 });
  }
  static join(i10) {
    var r9 = i10, { error: e14 } = r9, t9 = $t(r9, ["error"]);
    let s11 = this.eventNameFor("join", e14 === void 0), a4 = e14 ? 2 : 1, c5 = this.getPropertiesWithError(M(g({}, t9), { is_preview_called: !!t9.is_preview_called }), e14);
    return new P({ name: s11, level: a4, properties: c5 });
  }
  static publish({ devices: e14, settings: t9, error: i10 }) {
    let r9 = this.eventNameFor("publish", i10 === void 0), s11 = i10 ? 2 : 1, a4 = this.getPropertiesWithError({ devices: e14, audio: t9 == null ? void 0 : t9.audio, video: t9 == null ? void 0 : t9.video }, i10);
    return new P({ name: r9, level: s11, properties: a4 });
  }
  static hlsPlayerError(e14) {
    return new P({ name: "hlsPlayerError", level: 2, properties: this.getErrorProperties(e14) });
  }
  static subscribeFail(e14) {
    let t9 = this.eventNameFor("subscribe", false), i10 = 2, r9 = this.getErrorProperties(e14);
    return new P({ name: t9, level: i10, properties: r9 });
  }
  static leave() {
    return new P({ name: "leave", level: 1 });
  }
  static autoplayError() {
    return new P({ name: "autoplayError", level: 2 });
  }
  static audioPlaybackError(e14) {
    return new P({ name: "audioPlaybackError", level: 2, properties: this.getErrorProperties(e14) });
  }
  static deviceChange({ selection: e14, type: t9, devices: i10, error: r9 }) {
    let s11 = this.eventNameFor(r9 ? "publish" : `device.${t9}`, r9 === void 0), a4 = r9 ? 2 : 1, c5 = this.getPropertiesWithError({ selection: e14, devices: i10 }, r9);
    return new P({ name: s11, level: a4, properties: c5 });
  }
  static performance(e14) {
    let t9 = "perf.stats", i10 = 1, r9 = e14.toAnalyticsProperties();
    return new P({ name: t9, level: i10, properties: r9 });
  }
  static rtcStats(e14) {
    let t9 = "rtc.stats", i10 = 1, r9 = e14.toAnalyticsProperties();
    return new P({ name: t9, level: i10, properties: r9 });
  }
  static rtcStatsFailed(e14) {
    let t9 = "rtc.stats.failed", i10 = 2;
    return new P({ name: t9, level: i10, properties: this.getErrorProperties(e14) });
  }
  static degradationStats(e14, t9) {
    let i10 = "video.degradation.stats", r9 = 1, s11 = { degradedAt: e14.degradedAt, trackId: e14.trackId };
    if (!t9 && e14.degradedAt instanceof Date) {
      let a4 = new Date(), c5 = a4.valueOf() - e14.degradedAt.valueOf();
      s11 = M(g({}, s11), { duration: c5, restoredAt: a4 });
    }
    return new P({ name: i10, level: r9, properties: s11 });
  }
  static audioDetectionFail(e14, t9) {
    let i10 = this.getPropertiesWithError({ device: t9 }, e14), r9 = 2, s11 = "audiopresence.failed";
    return new P({ name: s11, level: r9, properties: i10 });
  }
  static previewNetworkQuality(e14) {
    return new P({ name: "perf.networkquality.preview", level: e14.error ? 2 : 1, properties: e14 });
  }
  static publishStats(e14) {
    return new P({ name: "publisher.stats", level: 1, properties: e14 });
  }
  static eventNameFor(e14, t9) {
    return `${e14}.${t9 ? "success" : "failed"}`;
  }
  static getPropertiesWithError(e14, t9) {
    let i10 = this.getErrorProperties(t9);
    return e14 = g(g({}, i10), e14), e14;
  }
  static getErrorProperties(e14) {
    return e14 ? e14 instanceof v ? e14.toAnalyticsProperties() : { error_name: e14.name, error_message: e14.message, error_description: e14.cause } : {};
  }
};
E.KEY_REQUESTED_AT = "requested_at", E.KEY_RESPONDED_AT = "responded_at";
var Pr = ((l5) => (l5[l5.VERBOSE = 0] = "VERBOSE", l5[l5.DEBUG = 1] = "DEBUG", l5[l5.INFO = 2] = "INFO", l5[l5.WARN = 3] = "WARN", l5[l5.TIME = 4] = "TIME", l5[l5.TIMEEND = 5] = "TIMEEND", l5[l5.ERROR = 6] = "ERROR", l5[l5.NONE = 7] = "NONE", l5))(Pr || {});
var Ar = typeof window != "undefined" && typeof window.expect != "undefined";
var o = class {
  static v(e14, ...t9) {
    this.log(0, e14, ...t9);
  }
  static d(e14, ...t9) {
    this.log(1, e14, ...t9);
  }
  static i(e14, ...t9) {
    this.log(2, e14, ...t9);
  }
  static w(e14, ...t9) {
    this.log(3, e14, ...t9);
  }
  static e(e14, ...t9) {
    this.log(6, e14, ...t9);
  }
  static time(e14) {
    this.log(4, "[HMSPerformanceTiming]", e14);
  }
  static timeEnd(e14) {
    this.log(5, "[HMSPerformanceTiming]", e14, e14);
  }
  static cleanup() {
    performance.clearMarks(), performance.clearMeasures();
  }
  static log(e14, t9, ...i10) {
    if (!(this.level.valueOf() > e14.valueOf()))
      switch (e14) {
        case 0: {
          console.log(t9, ...i10);
          break;
        }
        case 1: {
          console.debug(t9, ...i10);
          break;
        }
        case 2: {
          console.info(t9, ...i10);
          break;
        }
        case 3: {
          console.warn(t9, ...i10);
          break;
        }
        case 6: {
          console.error(t9, ...i10);
          break;
        }
        case 4: {
          performance.mark(i10[0]);
          break;
        }
        case 5: {
          let r9 = i10[0];
          try {
            let s11 = performance.measure(r9, r9);
            this.log(1, t9, r9, s11 == null ? void 0 : s11.duration), performance.clearMarks(r9), performance.clearMeasures(r9);
          } catch (s11) {
            this.log(1, t9, r9, s11);
          }
          break;
        }
      }
  }
};
o.level = Ar ? 7 : 0;
var br = ["init_response_time", "ws_connect_time", "on_policy_change_time", "local_audio_track_time", "local_video_track_time", "peer_list_time", "room_state_time", "join_response_time"];
var tt = class {
  constructor() {
    this.eventPerformanceMeasures = {};
  }
  start(e14) {
    performance.mark(e14);
  }
  end(e14) {
    var t9;
    try {
      this.eventPerformanceMeasures[e14] = performance.measure(e14, e14), o.d("[HMSPerformanceTiming]", e14, (t9 = this.eventPerformanceMeasures[e14]) == null ? void 0 : t9.duration);
    } catch (i10) {
      o.w("[AnalyticsTimer]", `Error in measuring performance for event ${e14}`, { error: i10 });
    }
  }
  getTimeTaken(e14) {
    var t9;
    return (t9 = this.eventPerformanceMeasures[e14]) == null ? void 0 : t9.duration;
  }
  getTimes(...e14) {
    return [...br, ...e14].reduce((t9, i10) => M(g({}, t9), { [i10]: this.getTimeTaken(i10) }), {});
  }
  cleanup() {
    this.eventPerformanceMeasures = {};
  }
};
var f2 = { WebSocketConnectionErrors: { FAILED_TO_CONNECT: 1e3, WEBSOCKET_CONNECTION_LOST: 1003, ABNORMAL_CLOSE: 1006 }, APIErrors: { SERVER_ERRORS: 2e3, INIT_CONFIG_NOT_AVAILABLE: 2002, ENDPOINT_UNREACHABLE: 2003, INVALID_TOKEN_FORMAT: 2004 }, TracksErrors: { GENERIC_TRACK: 3e3, CANT_ACCESS_CAPTURE_DEVICE: 3001, DEVICE_NOT_AVAILABLE: 3002, DEVICE_IN_USE: 3003, DEVICE_LOST_MIDWAY: 3008, NOTHING_TO_RETURN: 3005, INVALID_VIDEO_SETTINGS: 3006, CODEC_CHANGE_NOT_PERMITTED: 3007, AUTOPLAY_ERROR: 3008, OVER_CONSTRAINED: 3009, NO_AUDIO_DETECTED: 3010, SYSTEM_DENIED_PERMISSION: 3011, CURRENT_TAB_NOT_SHARED: 3012, AUDIO_PLAYBACK_ERROR: 3013 }, WebrtcErrors: { CREATE_OFFER_FAILED: 4001, CREATE_ANSWER_FAILED: 4002, SET_LOCAL_DESCRIPTION_FAILED: 4003, SET_REMOTE_DESCRIPTION_FAILED: 4004, ICE_FAILURE: 4005, ICE_DISCONNECTED: 4006, STATS_FAILED: 4007 }, WebsocketMethodErrors: { SERVER_ERRORS: 5e3, ALREADY_JOINED: 5001, CANNOT_JOIN_PREVIEW_IN_PROGRESS: 5002 }, GenericErrors: { NOT_CONNECTED: 6e3, SIGNALLING: 6001, UNKNOWN: 6002, NOT_READY: 6003, JSON_PARSING_FAILED: 6004, TRACK_METADATA_MISSING: 6005, RTC_TRACK_MISSING: 6006, PEER_METADATA_MISSING: 6007, INVALID_ROLE: 6008, PREVIEW_IN_PROGRESS: 6009, MISSING_MEDIADEVICES: 6010, MISSING_RTCPEERCONNECTION: 6011 }, PlaylistErrors: { NO_ENTRY_TO_PLAY: 8001, NO_ENTRY_IS_PLAYING: 8002 } };
function Qt(n18) {
  switch (n18) {
    case "join":
      return "JOIN";
    case "offer":
      return "PUBLISH";
    case "answer":
      return "SUBSCRIBE";
    case "track-update":
      return "TRACK";
    default:
      return "NONE";
  }
}
var Rr = ["join", "offer", "answer", "trickle", "on-error", "JOIN"];
var p = { WebSocketConnectionErrors: { FailedToConnect(n18, e14 = "") {
  return new v(f2.WebSocketConnectionErrors.FAILED_TO_CONNECT, "WebsocketFailedToConnect", n18, `[WS]: ${e14}`, `[WS]: ${e14}`);
}, WebSocketConnectionLost(n18, e14 = "") {
  return new v(f2.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, "WebSocketConnectionLost", n18, "Network connection lost ", e14);
}, AbnormalClose(n18, e14 = "") {
  return new v(f2.WebSocketConnectionErrors.ABNORMAL_CLOSE, "WebSocketAbnormalClose", n18, "Websocket closed abnormally", e14);
} }, APIErrors: { ServerErrors(n18, e14, t9 = "", i10 = true) {
  return new v(n18, "ServerErrors", e14, `[${e14}]: Server error ${t9}`, t9, i10);
}, EndpointUnreachable(n18, e14 = "") {
  return new v(f2.APIErrors.ENDPOINT_UNREACHABLE, "EndpointUnreachable", n18, `Endpoint is not reachable - ${e14}`, e14);
}, InvalidTokenFormat(n18, e14 = "") {
  return new v(f2.APIErrors.INVALID_TOKEN_FORMAT, "InvalidTokenFormat", n18, `Token is not in proper JWT format - ${e14}`, e14, true);
}, InitConfigNotAvailable(n18, e14 = "") {
  return new v(f2.APIErrors.INIT_CONFIG_NOT_AVAILABLE, "InitError", n18, `[INIT]: ${e14}`, `[INIT]: ${e14}`);
} }, TracksErrors: { GenericTrack(n18, e14 = "") {
  return new v(f2.TracksErrors.GENERIC_TRACK, "GenericTrack", n18, `[TRACK]: ${e14}`, `[TRACK]: ${e14}`);
}, CantAccessCaptureDevice(n18, e14, t9 = "") {
  return new v(f2.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE, "CantAccessCaptureDevice", n18, `User denied permission to access capture device - ${e14}`, t9);
}, DeviceNotAvailable(n18, e14, t9 = "") {
  return new v(f2.TracksErrors.DEVICE_NOT_AVAILABLE, "DeviceNotAvailable", n18, `[TRACK]: Capture device is no longer available - ${e14}`, t9);
}, DeviceInUse(n18, e14, t9 = "") {
  return new v(f2.TracksErrors.DEVICE_IN_USE, "DeviceInUse", n18, `[TRACK]: Capture device is in use by another application - ${e14}`, t9);
}, DeviceLostMidway(n18, e14, t9 = "") {
  return new v(f2.TracksErrors.DEVICE_LOST_MIDWAY, "DeviceLostMidway", n18, `Lost access to capture device midway - ${e14}`, t9);
}, NothingToReturn(n18, e14 = "", t9 = "There is no media to return. Please select either video or audio or both.") {
  return new v(f2.TracksErrors.NOTHING_TO_RETURN, "NothingToReturn", n18, t9, e14);
}, InvalidVideoSettings(n18, e14 = "") {
  return new v(f2.TracksErrors.INVALID_VIDEO_SETTINGS, "InvalidVideoSettings", n18, "Cannot enable simulcast when no video settings are provided", e14);
}, AutoplayBlocked(n18, e14 = "") {
  return new v(f2.TracksErrors.AUTOPLAY_ERROR, "AutoplayBlocked", n18, "Autoplay blocked because the user didn't interact with the document first", e14);
}, CodecChangeNotPermitted(n18, e14 = "") {
  return new v(f2.TracksErrors.CODEC_CHANGE_NOT_PERMITTED, "CodecChangeNotPermitted", n18, "Codec can't be changed mid call.", e14);
}, OverConstrained(n18, e14, t9 = "") {
  return new v(f2.TracksErrors.OVER_CONSTRAINED, "OverConstrained", n18, `[TRACK]: Requested constraints cannot be satisfied with the device hardware - ${e14}`, t9);
}, NoAudioDetected(n18, e14 = "Please check the mic or use another audio input") {
  return new v(f2.TracksErrors.NO_AUDIO_DETECTED, "NoAudioDetected", n18, "No audio input detected from microphone", e14);
}, SystemDeniedPermission(n18, e14, t9 = "") {
  return new v(f2.TracksErrors.SYSTEM_DENIED_PERMISSION, "SystemDeniedPermission", n18, `Operating System denied permission to access capture device - ${e14}`, t9);
}, CurrentTabNotShared() {
  return new v(f2.TracksErrors.CURRENT_TAB_NOT_SHARED, "CurrentTabNotShared", "TRACK", "The app requires you to share the current tab", "You must screen share the current tab in order to proceed");
}, AudioPlaybackError(n18) {
  return new v(f2.TracksErrors.AUDIO_PLAYBACK_ERROR, "Audio playback error", "TRACK", n18, n18);
} }, WebrtcErrors: { CreateOfferFailed(n18, e14 = "") {
  return new v(f2.WebrtcErrors.CREATE_OFFER_FAILED, "CreateOfferFailed", n18, `[${n18.toString()}]: Failed to create offer. `, e14);
}, CreateAnswerFailed(n18, e14 = "") {
  return new v(f2.WebrtcErrors.CREATE_ANSWER_FAILED, "CreateAnswerFailed", n18, `[${n18.toString()}]: Failed to create answer. `, e14);
}, SetLocalDescriptionFailed(n18, e14 = "") {
  return new v(f2.WebrtcErrors.SET_LOCAL_DESCRIPTION_FAILED, "SetLocalDescriptionFailed", n18, `[${n18.toString()}]: Failed to set offer. `, e14);
}, SetRemoteDescriptionFailed(n18, e14 = "") {
  return new v(f2.WebrtcErrors.SET_REMOTE_DESCRIPTION_FAILED, "SetRemoteDescriptionFailed", n18, `[${n18.toString()}]: Failed to set answer. `, e14, true);
}, ICEFailure(n18, e14 = "") {
  return new v(f2.WebrtcErrors.ICE_FAILURE, "ICEFailure", n18, `[${n18.toString()}]: Ice connection state FAILED`, e14);
}, ICEDisconnected(n18, e14 = "") {
  return new v(f2.WebrtcErrors.ICE_DISCONNECTED, "ICEDisconnected", n18, `[${n18.toString()}]: Ice connection state DISCONNECTED`, e14);
}, StatsFailed(n18, e14 = "") {
  return new v(f2.WebrtcErrors.STATS_FAILED, "StatsFailed", n18, `Failed to WebRTC get stats - ${e14}`, e14);
} }, WebsocketMethodErrors: { ServerErrors(n18, e14, t9) {
  return new v(n18, "ServerErrors", e14, t9, t9, Rr.includes(e14));
}, AlreadyJoined(n18, e14 = "") {
  return new v(f2.WebsocketMethodErrors.ALREADY_JOINED, "AlreadyJoined", n18, "[JOIN]: You have already joined this room.", e14);
}, CannotJoinPreviewInProgress(n18, e14 = "") {
  return new v(f2.WebsocketMethodErrors.CANNOT_JOIN_PREVIEW_IN_PROGRESS, "CannotJoinPreviewInProgress", n18, "[JOIN]: Cannot join if preview is in progress", e14);
} }, GenericErrors: { NotConnected(n18, e14 = "") {
  return new v(f2.GenericErrors.NOT_CONNECTED, "NotConnected", n18, "Client is not connected", e14);
}, Signalling(n18, e14) {
  return new v(f2.GenericErrors.SIGNALLING, "Signalling", n18, `Unknown signalling error: ${n18.toString()} ${e14} `, e14);
}, Unknown(n18, e14) {
  return new v(f2.GenericErrors.UNKNOWN, "Unknown", n18, `Unknown exception: ${e14}`, e14);
}, NotReady(n18, e14 = "") {
  return new v(f2.GenericErrors.NOT_READY, "NotReady", n18, e14, e14);
}, JsonParsingFailed(n18, e14, t9 = "") {
  return new v(f2.GenericErrors.JSON_PARSING_FAILED, "JsonParsingFailed", n18, `Failed to parse JSON message - ${e14}`, t9);
}, TrackMetadataMissing(n18, e14 = "") {
  return new v(f2.GenericErrors.TRACK_METADATA_MISSING, "TrackMetadataMissing", n18, "Track Metadata Missing", e14);
}, RTCTrackMissing(n18, e14 = "") {
  return new v(f2.GenericErrors.RTC_TRACK_MISSING, "RTCTrackMissing", n18, "RTC Track missing", e14);
}, PeerMetadataMissing(n18, e14 = "") {
  return new v(f2.GenericErrors.PEER_METADATA_MISSING, "PeerMetadataMissing", n18, "Peer Metadata Missing", e14);
}, ValidationFailed(n18, e14) {
  return new v(f2.GenericErrors.INVALID_ROLE, "ValidationFailed", "VALIDATION", n18, e14 ? JSON.stringify(e14) : "");
}, InvalidRole(n18, e14) {
  return new v(f2.GenericErrors.INVALID_ROLE, "InvalidRole", n18, "Invalid role. Join with valid role", e14, true);
}, PreviewAlreadyInProgress(n18, e14 = "") {
  return new v(f2.GenericErrors.PREVIEW_IN_PROGRESS, "PreviewAlreadyInProgress", n18, "[Preview]: Cannot join if preview is in progress", e14);
}, MissingMediaDevices() {
  return new v(f2.GenericErrors.MISSING_MEDIADEVICES, "MissingMediaDevices", "JOIN", "navigator.mediaDevices is undefined. 100ms SDK won't work on this website as WebRTC is not supported on HTTP endpoints(missing navigator.mediaDevices). Please ensure you're using the SDK either on localhost or a valid HTTPS endpoint.", "", true);
}, MissingRTCPeerConnection() {
  return new v(f2.GenericErrors.MISSING_RTCPEERCONNECTION, "MissingRTCPeerConnection", "JOIN", "RTCPeerConnection which is a core requirement for WebRTC call was not found, this could be due to an unsupported browser or browser extensions blocking WebRTC", "", true);
} }, MediaPluginErrors: { PlatformNotSupported(n18, e14 = "") {
  return new v(7001, "PlatformNotSupported", n18, "Check HMS Docs to see the list of supported platforms", e14);
}, InitFailed(n18, e14 = "") {
  return new v(7002, "InitFailed", n18, "Plugin init failed", e14);
}, ProcessingFailed(n18, e14 = "") {
  return new v(7003, "ProcessingFailed", n18, "Plugin processing failed", e14);
}, AddAlreadyInProgress(n18, e14 = "") {
  return new v(7004, "AddAlreadyInProgress", n18, "Plugin add already in progress", e14);
}, DeviceNotSupported(n18, e14 = "") {
  return new v(7005, "DeviceNotSupported", n18, "Check HMS Docs to see the list of supported devices", e14);
} }, PlaylistErrors: { NoEntryToPlay(n18, e14) {
  return new v(f2.PlaylistErrors.NO_ENTRY_TO_PLAY, "NoEntryToPlay", n18, "Reached end of playlist", e14);
}, NoEntryPlaying(n18, e14) {
  return new v(f2.PlaylistErrors.NO_ENTRY_IS_PLAYING, "NoEntryIsPlaying", n18, "No entry is playing at this time", e14);
} } };
function Cr(n18, e14) {
  let t9 = n18.toLowerCase();
  return t9.includes("device not found") ? p.TracksErrors.DeviceNotAvailable("TRACK", e14, n18) : t9.includes("permission denied") ? p.TracksErrors.CantAccessCaptureDevice("TRACK", e14, n18) : p.TracksErrors.GenericTrack("TRACK", n18);
}
function wr(n18, e14 = "") {
  if (adapter_core_default.browserDetails.browser === "chrome" && n18.name === "NotAllowedError" && n18.message.includes("denied by system"))
    return p.TracksErrors.SystemDeniedPermission("TRACK", e14, n18.message);
  if (adapter_core_default.browserDetails.browser === "firefox" && n18.name === "NotFoundError") {
    let i10 = p.TracksErrors.SystemDeniedPermission("TRACK", e14, n18.message);
    return i10.description = `Capture device is either blocked at Operating System level or not available - ${e14}`, i10;
  }
  switch (n18.name) {
    case "OverconstrainedError":
      return p.TracksErrors.OverConstrained("TRACK", e14, n18.constraint);
    case "NotAllowedError":
      return p.TracksErrors.CantAccessCaptureDevice("TRACK", e14, n18.message);
    case "NotFoundError":
      return p.TracksErrors.DeviceNotAvailable("TRACK", e14, n18.message);
    case "NotReadableError":
      return p.TracksErrors.DeviceInUse("TRACK", e14, n18.message);
    case "TypeError":
      return p.TracksErrors.NothingToReturn("TRACK", n18.message);
    default:
      return Cr(n18.message, e14);
  }
}
function V(n18, e14) {
  let t9 = wr(n18, e14);
  return t9.addNativeError(n18), t9;
}
var de = class {
  constructor(e14) {
    this.tracks = new Array();
    this.nativeStream = e14, this.id = e14.id;
  }
  updateId(e14) {
    this.id = e14;
  }
};
var X = (n18) => n18 ? `{
    trackId: ${n18.id};
    kind: ${n18.kind};
    enabled: ${n18.enabled};
    muted: ${n18.muted};
    readyState: ${n18.readyState};
  }` : "";
var Z = class {
  constructor(e14, t9, i10) {
    this.logIdentifier = "";
    this.stream = e14, this.nativeTrack = t9, this.source = i10;
  }
  get enabled() {
    return this.nativeTrack.enabled;
  }
  get trackId() {
    return this.firstTrackId || this.sdpTrackId || this.nativeTrack.id;
  }
  getMediaTrackSettings() {
    return this.nativeTrack.getSettings();
  }
  setEnabled(e14) {
    return d(this, null, function* () {
      this.nativeTrack.enabled = e14;
    });
  }
  setSdpTrackId(e14) {
    this.sdpTrackId = e14;
  }
  setFirstTrackId(e14) {
    this.firstTrackId = e14;
  }
  cleanup() {
    var e14;
    o.d("[HMSTrack]", "Stopping track", this.toString()), (e14 = this.nativeTrack) == null || e14.stop();
  }
  toString() {
    var e14;
    return `{
      streamId: ${this.stream.id};
      peerId: ${this.peerId};
      trackId: ${this.trackId};
      mid: ${((e14 = this.transceiver) == null ? void 0 : e14.mid) || "-"};
      logIdentifier: ${this.logIdentifier};
      source: ${this.source};
      enabled: ${this.enabled};
      nativeTrack: ${X(this.nativeTrack)};
    }`;
  }
};
var le = ((t9) => (t9.AUDIO = "audio", t9.VIDEO = "video", t9))(le || {});
var Te = class extends Z {
  constructor(t9, i10, r9) {
    super(t9, i10, r9);
    this.type = "audio";
    this.audioElement = null;
    if (i10.kind !== "audio")
      throw new Error("Expected 'track' kind = 'audio'");
  }
  getVolume() {
    return this.audioElement ? this.audioElement.volume * 100 : null;
  }
  setVolume(t9) {
    return d(this, null, function* () {
      if (t9 < 0 || t9 > 100)
        throw Error("Please pass a valid number between 0-100");
      yield this.subscribeToAudio(t9 === 0 ? false : this.enabled), this.audioElement && (this.audioElement.volume = Math.floor(t9 / 100));
    });
  }
  setAudioElement(t9) {
    o.d("[HMSAudioTrack]", this.logIdentifier, "adding audio element", `${this}`, t9), this.audioElement = t9;
  }
  getAudioElement() {
    return this.audioElement;
  }
  getOutputDevice() {
    return this.outputDevice;
  }
  cleanup() {
    super.cleanup(), this.audioElement && (this.audioElement.srcObject = null, this.audioElement.remove(), this.audioElement = null);
  }
  setOutputDevice(t9) {
    return d(this, null, function* () {
      var i10;
      if (!t9) {
        o.d("[HMSAudioTrack]", this.logIdentifier, "device is null", `${this}`);
        return;
      }
      if (!this.audioElement) {
        o.d("[HMSAudioTrack]", this.logIdentifier, "no audio element to set output", `${this}`), this.outputDevice = t9;
        return;
      }
      try {
        typeof this.audioElement.setSinkId == "function" && (yield (i10 = this.audioElement) == null ? void 0 : i10.setSinkId(t9.deviceId), this.outputDevice = t9);
      } catch (r9) {
        o.d("[HMSAudioTrack]", "error in setSinkId", r9);
      }
    });
  }
  subscribeToAudio(t9) {
    return d(this, null, function* () {
      this.stream instanceof K && (yield this.stream.setAudio(t9, this.trackId, this.logIdentifier));
    });
  }
};
var Jt = class {
  constructor() {
    this.storage = new U("hms-device-selection");
    this.remember = false;
    this.TAG = "[HMSDeviceStorage]";
  }
  setDevices(e14) {
    this.devices = e14;
  }
  rememberDevices(e14) {
    this.remember = e14;
  }
  updateSelection(e14, { deviceId: t9, groupId: i10 }) {
    if (!this.devices || !this.remember)
      return;
    let r9 = this.devices[e14].find((a4) => this.isSame({ deviceId: t9, groupId: i10 }, a4));
    if (!r9) {
      o.w(this.TAG, `Could not find device with deviceId: ${t9}, groupId: ${i10}`);
      return;
    }
    let s11 = this.storage.get() || {};
    s11[e14] = r9, this.storage.set(s11);
  }
  getSelection() {
    if (this.remember)
      return this.storage.get();
  }
  cleanup() {
    this.remember = false, this.devices = void 0;
  }
  isSame(e14, t9) {
    return e14.deviceId === t9.deviceId && (e14.groupId === t9.groupId || !e14.groupId);
  }
};
var O = new Jt();
var Ci = ((t9) => (t9.TRANSFORM = "TRANSFORM", t9.ANALYZE = "ANALYZE", t9))(Ci || {});
var it = ((t9) => (t9.PLATFORM_NOT_SUPPORTED = "PLATFORM_NOT_SUPPORTED", t9.DEVICE_NOT_SUPPORTED = "DEVICE_NOT_SUPPORTED", t9))(it || {});
var q = class {
  static failure(e14, t9) {
    let i10 = "mediaPlugin.failed", r9 = 2, s11 = g({ plugin_name: e14 }, t9.toAnalyticsProperties());
    return new P({ name: i10, level: r9, properties: s11 });
  }
  static audioPluginFailure(e14, t9, i10) {
    let r9 = "mediaPlugin.failed", s11 = 2, a4 = g({ plugin_name: e14, sampleRate: t9 }, i10.toAnalyticsProperties());
    return new P({ name: r9, level: s11, properties: a4 });
  }
  static audioPluginStats({ pluginName: e14, duration: t9, loadTime: i10, sampleRate: r9 }) {
    let s11 = "mediaPlugin.stats", a4 = 1, c5 = { plugin_name: e14, duration: t9, load_time: i10, sampleRate: r9 };
    return new P({ name: s11, level: a4, properties: c5 });
  }
  static stats({ pluginName: e14, duration: t9, loadTime: i10, avgPreProcessingTime: r9, avgProcessingTime: s11, inputFrameRate: a4, pluginFrameRate: c5 }) {
    let l5 = "mediaPlugin.stats", h4 = 1, u5 = { plugin_name: e14, duration: t9, load_time: i10, avg_preprocessing_time: r9, avg_processing_time: s11, input_frame_rate: a4, plugin_frame_rate: c5 };
    return new P({ name: l5, level: h4, properties: u5 });
  }
};
var rt = class {
  constructor(e14) {
    this.eventBus = e14;
    this.TAG = "[AudioPluginsAnalytics]";
    this.initTime = {}, this.addedTimestamps = {}, this.pluginAdded = {}, this.pluginSampleRate = {};
  }
  added(e14, t9) {
    this.pluginAdded[e14] = true, this.addedTimestamps[e14] = Date.now(), this.initTime[e14] = 0, this.pluginSampleRate[e14] = t9;
  }
  removed(e14) {
    if (this.pluginAdded[e14]) {
      let t9 = { pluginName: e14, duration: Math.floor((Date.now() - this.addedTimestamps[e14]) / 1e3), loadTime: this.initTime[e14], sampleRate: this.pluginSampleRate[e14] };
      this.eventBus.analytics.publish(q.audioPluginStats(t9)), this.clean(e14);
    }
  }
  failure(e14, t9) {
    this.pluginAdded[e14] && (this.eventBus.analytics.publish(q.audioPluginFailure(e14, this.pluginSampleRate[e14], t9)), this.clean(e14));
  }
  initWithTime(e14, t9) {
    return d(this, null, function* () {
      if (this.initTime[e14]) {
        o.i(this.TAG, `Plugin Already loaded ${e14}, time it took: ${this.initTime[e14]}`);
        return;
      }
      let i10;
      try {
        i10 = yield this.timeInMs(t9), o.i(this.TAG, `Time taken for Plugin ${e14} initialization : ${i10}`);
      } catch (r9) {
        let s11 = p.MediaPluginErrors.InitFailed("AUDIO_PLUGINS", `failed during initialization of plugin${r9.message || r9}`);
        throw o.e(this.TAG, s11), this.failure(e14, s11), s11;
      }
      i10 && (this.initTime[e14] = i10);
    });
  }
  timeInMs(e14) {
    return d(this, null, function* () {
      let t9 = Date.now();
      return yield e14(), Math.floor(Date.now() - t9);
    });
  }
  clean(e14) {
    delete this.addedTimestamps[e14], delete this.initTime[e14], delete this.pluginAdded[e14], delete this.pluginSampleRate[e14];
  }
};
var Lr = 48e3;
var Hr = () => navigator.userAgent.indexOf("Firefox") !== -1;
var He = class {
  constructor(e14, t9) {
    this.TAG = "[AudioPluginsManager]";
    this.pluginAddInProgress = false;
    this.hmsTrack = e14, this.pluginsMap = /* @__PURE__ */ new Map(), this.analytics = new rt(t9), this.createAudioContext();
  }
  getPlugins() {
    return Array.from(this.pluginsMap.keys());
  }
  addPlugin(e14) {
    return d(this, null, function* () {
      var i10;
      let t9 = (i10 = e14.getName) == null ? void 0 : i10.call(e14);
      if (!t9) {
        o.w("no name provided by the plugin");
        return;
      }
      if (this.pluginAddInProgress) {
        let r9 = p.MediaPluginErrors.AddAlreadyInProgress("AUDIO_PLUGINS", "Add Plugin is already in Progress");
        throw this.analytics.added(t9, this.audioContext.sampleRate), this.analytics.failure(t9, r9), o.w("can't add another plugin when previous add is in progress"), r9;
      }
      this.pluginAddInProgress = true;
      try {
        yield this.addPluginInternal(e14);
      } finally {
        this.pluginAddInProgress = false;
      }
    });
  }
  addPluginInternal(e14) {
    return d(this, null, function* () {
      var i10;
      let t9 = (i10 = e14.getName) == null ? void 0 : i10.call(e14);
      if (this.pluginsMap.get(t9)) {
        o.w(this.TAG, `plugin - ${t9} already added.`);
        return;
      }
      yield this.validateAndThrow(t9, e14);
      try {
        this.pluginsMap.size === 0 ? yield this.initAudioNodes() : this.prevAudioNode && this.prevAudioNode.disconnect(), this.analytics.added(t9, this.audioContext.sampleRate), yield this.analytics.initWithTime(t9, () => d(this, null, function* () {
          return e14.init();
        })), this.pluginsMap.set(t9, e14), yield this.processPlugin(e14), yield this.connectToDestination();
      } catch (r9) {
        throw o.e(this.TAG, "failed to add plugin", r9), r9;
      }
    });
  }
  validatePlugin(e14) {
    return e14.checkSupport(this.audioContext);
  }
  validateAndThrow(e14, t9) {
    return d(this, null, function* () {
      let i10 = this.validatePlugin(t9);
      if (i10.isSupported)
        o.i(this.TAG, `plugin is supported,- ${t9.getName()}`);
      else if (this.analytics.added(e14, this.audioContext.sampleRate), i10.errType === "PLATFORM_NOT_SUPPORTED") {
        let r9 = p.MediaPluginErrors.PlatformNotSupported("AUDIO_PLUGINS", "platform not supported, see docs");
        throw this.analytics.failure(e14, r9), yield this.cleanup(), r9;
      } else if (i10.errType === "DEVICE_NOT_SUPPORTED") {
        let r9 = p.MediaPluginErrors.DeviceNotSupported("AUDIO_PLUGINS", "audio device not supported, see docs");
        throw this.analytics.failure(e14, r9), yield this.cleanup(), r9;
      }
    });
  }
  removePlugin(e14) {
    return d(this, null, function* () {
      yield this.removePluginInternal(e14), this.pluginsMap.size === 0 ? (yield this.cleanup(), o.i(this.TAG, "No plugins left, stopping plugins loop"), yield this.hmsTrack.setProcessedTrack(void 0)) : yield this.reprocessPlugins();
    });
  }
  cleanup() {
    return d(this, null, function* () {
      var e14, t9, i10;
      for (let r9 of this.pluginsMap.values())
        yield this.removePluginInternal(r9);
      yield this.hmsTrack.setProcessedTrack(void 0), (e14 = this.sourceNode) == null || e14.disconnect(), (t9 = this.prevAudioNode) == null || t9.disconnect(), (i10 = this.outputTrack) == null || i10.stop(), this.sourceNode = void 0, this.destinationNode = void 0, this.prevAudioNode = void 0, this.outputTrack = void 0;
    });
  }
  closeContext() {
    return d(this, null, function* () {
      var e14;
      (e14 = this.audioContext) == null || e14.close(), this.audioContext = void 0;
    });
  }
  reprocessPlugins() {
    return d(this, null, function* () {
      if (this.pluginsMap.size === 0 || !this.sourceNode)
        return;
      let e14 = Array.from(this.pluginsMap.values());
      yield this.cleanup(), yield this.initAudioNodes();
      for (let t9 of e14)
        yield this.addPlugin(t9);
    });
  }
  initAudioNodes() {
    return d(this, null, function* () {
      if (this.audioContext) {
        if (!this.sourceNode) {
          let e14 = new MediaStream([this.hmsTrack.nativeTrack]);
          this.sourceNode = this.audioContext.createMediaStreamSource(e14);
        }
        if (!this.destinationNode) {
          this.destinationNode = this.audioContext.createMediaStreamDestination(), this.outputTrack = this.destinationNode.stream.getAudioTracks()[0];
          try {
            yield this.hmsTrack.setProcessedTrack(this.outputTrack);
          } catch (e14) {
            throw o.e(this.TAG, "error in setting processed track", e14), e14;
          }
        }
      }
    });
  }
  processPlugin(e14) {
    return d(this, null, function* () {
      try {
        let t9 = yield e14.processAudioTrack(this.audioContext, this.prevAudioNode || this.sourceNode);
        this.prevAudioNode && this.prevAudioNode.connect(t9), this.prevAudioNode = t9;
      } catch (t9) {
        let i10 = e14.getName();
        o.e(this.TAG, `error in processing plugin ${i10}`, t9), yield this.removePluginInternal(e14);
      }
    });
  }
  connectToDestination() {
    return d(this, null, function* () {
      try {
        this.prevAudioNode && this.destinationNode && this.prevAudioNode.context === this.destinationNode.context && this.prevAudioNode.connect(this.destinationNode);
      } catch (e14) {
        o.e(this.TAG, "error in connecting to destination node", e14);
      }
    });
  }
  removePluginInternal(e14) {
    return d(this, null, function* () {
      var i10;
      let t9 = (i10 = e14.getName) == null ? void 0 : i10.call(e14);
      if (!this.pluginsMap.get(t9)) {
        o.w(this.TAG, `plugin - ${t9} not found to remove.`);
        return;
      }
      o.i(this.TAG, `removing plugin ${t9}`), this.pluginsMap.delete(t9), e14.stop(), this.analytics.removed(t9);
    });
  }
  createAudioContext() {
    this.audioContext || (Hr() ? this.audioContext = new AudioContext() : this.audioContext = new AudioContext({ sampleRate: Lr }));
  }
};
function st(n18) {
  return d(this, null, function* () {
    try {
      return (yield navigator.mediaDevices.getUserMedia({ audio: n18 ? n18.toConstraints() : false })).getAudioTracks()[0];
    } catch (e14) {
      throw V(e14, "audio");
    }
  });
}
function at(n18) {
  return d(this, null, function* () {
    try {
      return (yield navigator.mediaDevices.getUserMedia({ video: n18 ? n18.toConstraints() : false })).getVideoTracks()[0];
    } catch (e14) {
      throw V(e14, "video");
    }
  });
}
function B(n18) {
  return "canvas" in n18 || n18.label === "MediaStreamAudioDestinationNode" || n18.label === "";
}
var ee = { audioContext: null, getAudioContext() {
  return this.audioContext || (this.audioContext = new AudioContext()), this.audioContext;
}, resumeContext() {
  return d(this, null, function* () {
    try {
      return yield this.getAudioContext().resume();
    } catch (n18) {
      o.e("AudioContext", n18);
    }
  });
} };
var te = class {
  constructor(e14 = 1 / 0) {
    this.capacity = e14;
    this.storage = [];
  }
  size() {
    return this.storage.length;
  }
  toList() {
    return this.storage.slice(0);
  }
  enqueue(e14) {
    this.size() === this.capacity && this.dequeue(), this.storage.push(e14);
  }
  dequeue() {
    return this.storage.shift();
  }
  aggregate(e14) {
    return e14(this.storage);
  }
};
function R(n18) {
  if (n18 < 0)
    throw Error("`ms` should be a positive integer");
  return new Promise((e14) => setTimeout(e14, n18));
}
function nt(n18, e14 = 300) {
  let t9;
  return function(...i10) {
    clearTimeout(t9), t9 = void 0;
    let r9 = this;
    t9 = setTimeout(() => {
      n18.apply(r9, i10);
    }, e14);
  };
}
var _r = 35;
var Dr = 5;
var ot = class {
  constructor(e14, t9, i10) {
    this.track = e14;
    this.audioLevelEvent = t9;
    this.silenceEvent = i10;
    this.TAG = "[TrackAudioLevelMonitor]";
    this.audioLevel = 0;
    this.isMonitored = false;
    this.interval = 100;
    this.historyInterval = 700;
    this.history = new te(this.historyInterval / this.interval);
    this.detectSilence = () => d(this, null, function* () {
      let i11 = 0;
      for (; this.isMonitored; ) {
        if (this.track.enabled)
          if (this.isSilentThisInstant()) {
            if (i11++, i11 > 50) {
              this.silenceEvent.publish({ track: this.track });
              break;
            }
          } else
            break;
        yield R(20);
      }
    });
    try {
      let r9 = new MediaStream([this.track.nativeTrack]);
      this.analyserNode = this.createAnalyserNodeForStream(r9);
    } catch (r9) {
      o.w(this.TAG, "Unable to initialize AudioContext", r9);
    }
  }
  start() {
    this.stop(), this.isMonitored = true, o.d(this.TAG, "Starting track Monitor", `${this.track}`), this.loop().then(() => o.d(this.TAG, "Stopping track Monitor", `${this.track}`));
  }
  stop() {
    if (!this.analyserNode) {
      o.d(this.TAG, "AudioContext not initialized");
      return;
    }
    this.sendAudioLevel(0), this.isMonitored = false;
  }
  loop() {
    return d(this, null, function* () {
      for (; this.isMonitored; )
        this.sendAudioLevel(this.getMaxAudioLevelOverPeriod()), yield R(this.interval);
    });
  }
  sendAudioLevel(e14 = 0) {
    if (e14 = e14 > _r ? e14 : 0, Math.abs(this.audioLevel - e14) > Dr) {
      this.audioLevel = e14;
      let i10 = { track: this.track, audioLevel: this.audioLevel };
      this.audioLevelEvent.publish(i10);
    }
  }
  getMaxAudioLevelOverPeriod() {
    if (!this.analyserNode) {
      o.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e14 = this.calculateAudioLevel();
    return e14 !== void 0 && this.history.enqueue(e14), this.history.aggregate((t9) => Math.max(...t9));
  }
  calculateAudioLevel() {
    if (!this.analyserNode) {
      o.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e14 = new Uint8Array(this.analyserNode.fftSize);
    this.analyserNode.getByteTimeDomainData(e14);
    let t9 = 9e-3, i10 = t9;
    for (let a4 of e14)
      i10 = Math.max(i10, (a4 - 128) / 128);
    let r9 = (Math.log(t9) - Math.log(i10)) / Math.log(t9);
    return Math.ceil(Math.min(Math.max(r9 * 100, 0), 100));
  }
  isSilentThisInstant() {
    if (!this.analyserNode) {
      o.d(this.TAG, "AudioContext not initialized");
      return;
    }
    let e14 = new Uint8Array(this.analyserNode.fftSize);
    return this.analyserNode.getByteTimeDomainData(e14), !e14.some((t9) => t9 !== 128 && t9 !== 0);
  }
  createAnalyserNodeForStream(e14) {
    let t9 = ee.getAudioContext(), i10 = t9.createAnalyser();
    return t9.createMediaStreamSource(e14).connect(i10), i10;
  }
};
var Hi = ((s11) => (s11.RECORDING_STATE_UPDATED = "RECORDING_STATE_UPDATED", s11.BROWSER_RECORDING_STATE_UPDATED = "BROWSER_RECORDING_STATE_UPDATED", s11.SERVER_RECORDING_STATE_UPDATED = "SERVER_RECORDING_STATE_UPDATED", s11.RTMP_STREAMING_STATE_UPDATED = "RTMP_STREAMING_STATE_UPDATED", s11.HLS_STREAMING_STATE_UPDATED = "HLS_STREAMING_STATE_UPDATED", s11))(Hi || {});
var ct = ((S4) => (S4[S4.PEER_JOINED = 0] = "PEER_JOINED", S4[S4.PEER_LEFT = 1] = "PEER_LEFT", S4[S4.AUDIO_TOGGLED = 2] = "AUDIO_TOGGLED", S4[S4.VIDEO_TOGGLED = 3] = "VIDEO_TOGGLED", S4[S4.BECAME_DOMINANT_SPEAKER = 4] = "BECAME_DOMINANT_SPEAKER", S4[S4.RESIGNED_DOMINANT_SPEAKER = 5] = "RESIGNED_DOMINANT_SPEAKER", S4[S4.STARTED_SPEAKING = 6] = "STARTED_SPEAKING", S4[S4.STOPPED_SPEAKING = 7] = "STOPPED_SPEAKING", S4[S4.ROLE_UPDATED = 8] = "ROLE_UPDATED", S4[S4.PEER_LIST = 9] = "PEER_LIST", S4[S4.NAME_UPDATED = 10] = "NAME_UPDATED", S4[S4.METADATA_UPDATED = 11] = "METADATA_UPDATED", S4))(ct || {});
var ie = ((c5) => (c5[c5.TRACK_ADDED = 0] = "TRACK_ADDED", c5[c5.TRACK_REMOVED = 1] = "TRACK_REMOVED", c5[c5.TRACK_MUTED = 2] = "TRACK_MUTED", c5[c5.TRACK_UNMUTED = 3] = "TRACK_UNMUTED", c5[c5.TRACK_DESCRIPTION_CHANGED = 4] = "TRACK_DESCRIPTION_CHANGED", c5[c5.TRACK_DEGRADED = 5] = "TRACK_DEGRADED", c5[c5.TRACK_RESTORED = 6] = "TRACK_RESTORED", c5))(ie || {});
var zt = ((r9) => (r9[r9.POLL_CREATED = 0] = "POLL_CREATED", r9[r9.POLL_STARTED = 1] = "POLL_STARTED", r9[r9.POLL_STOPPED = 2] = "POLL_STOPPED", r9[r9.POLL_STATS_UPDATED = 3] = "POLL_STATS_UPDATED", r9))(zt || {});
var fe = ((r9) => (r9.NONE = "none", r9.LOW = "low", r9.MEDIUM = "medium", r9.HIGH = "high", r9))(fe || {});
var Yt = { f: "high", h: "medium", q: "low" };
var _i = ((i10) => (i10.VP8 = "vp8", i10.VP9 = "vp9", i10.H264 = "h264", i10))(_i || {});
var Di = ((e14) => (e14.OPUS = "opus", e14))(Di || {});
var Oi = ((r9) => (r9.USER = "user", r9.ENVIRONMENT = "environment", r9.LEFT = "left", r9.RIGHT = "right", r9))(Oi || {});
var Or = ((i10) => (i10.videoInput = "videoInput", i10.audioInput = "audioInput", i10.audioOutput = "audioOutput", i10))(Or || {});
var Xt = ((t9) => (t9.audio = "audio", t9.video = "video", t9))(Xt || {});
var Ni = ((r9) => (r9.SINGLE_CHOICE = "single-choice", r9.MULTIPLE_CHOICE = "multiple-choice", r9.SHORT_ANSWER = "short-answer", r9.LONG_ANSWER = "long-answer", r9))(Ni || {});
var x = class {
  constructor() {
    this._volume = 1;
    this._codec = "opus";
    this._maxBitrate = 32;
    this._deviceId = "default";
    this._advanced = [{ googEchoCancellation: { exact: true } }, { googExperimentalEchoCancellation: { exact: true } }, { autoGainControl: { exact: true } }, { noiseSuppression: { exact: true } }, { googHighpassFilter: { exact: true } }, { googAudioMirroring: { exact: true } }];
  }
  volume(e14) {
    if (!(0 <= e14 && e14 <= 1))
      throw Error("volume can only be in range [0.0, 1.0]");
    return this._volume = e14, this;
  }
  codec(e14) {
    return this._codec = e14, this;
  }
  maxBitrate(e14) {
    if (e14 && e14 <= 0)
      throw Error("maxBitrate should be >= 1");
    return this._maxBitrate = e14, this;
  }
  deviceId(e14) {
    return this._deviceId = e14, this;
  }
  advanced(e14) {
    return this._advanced = e14, this;
  }
  build() {
    return new ue(this._volume, this._codec, this._maxBitrate, this._deviceId, this._advanced);
  }
};
var ue = class {
  constructor(e14, t9, i10, r9, s11) {
    this.volume = e14, this.codec = t9, this.maxBitrate = i10, this.deviceId = r9, this.advanced = s11;
  }
  toConstraints() {
    return { deviceId: this.deviceId, advanced: this.advanced };
  }
  toAnalyticsProperties() {
    return { audio_bitrate: this.maxBitrate, audio_codec: this.codec };
  }
};
var N = class {
  constructor() {
    this._width = 320;
    this._height = 180;
    this._codec = "vp8";
    this._maxFramerate = 30;
    this._maxBitrate = 150;
    this._advanced = [];
  }
  setWidth(e14) {
    return this._width = e14, this;
  }
  setHeight(e14) {
    return this._height = e14, this;
  }
  codec(e14) {
    return this._codec = e14, this;
  }
  maxFramerate(e14) {
    if (e14 && e14 <= 0)
      throw Error("maxFramerate should be >= 1");
    return this._maxFramerate = e14, this;
  }
  maxBitrate(e14, t9 = true) {
    if (typeof e14 == "number" && e14 <= 0)
      throw Error("maxBitrate should be >= 1");
    return this._maxBitrate = e14, !this._maxBitrate && t9 && (this._maxBitrate = 15e4), this;
  }
  deviceId(e14) {
    return this._deviceId = e14, this;
  }
  advanced(e14) {
    return this._advanced = e14, this;
  }
  facingMode(e14) {
    return this._facingMode = e14, this;
  }
  build() {
    return new he(this._width, this._height, this._codec, this._maxFramerate, this._deviceId, this._advanced, this._maxBitrate, this._facingMode);
  }
};
var he = class {
  constructor(e14, t9, i10, r9, s11, a4, c5, l5) {
    this.width = e14, this.height = t9, this.codec = i10, this.maxFramerate = r9, this.maxBitrate = c5, this.deviceId = s11, this.advanced = a4, this.facingMode = l5;
  }
  toConstraints(e14) {
    let t9 = "ideal";
    return e14 && (t9 = "max"), { width: { [t9]: this.width }, height: { [t9]: this.height }, frameRate: this.maxFramerate, deviceId: this.deviceId, facingMode: this.facingMode };
  }
  toAnalyticsProperties() {
    return { width: this.width, height: this.height, video_bitrate: this.maxBitrate, framerate: this.maxFramerate, video_codec: this.codec, facingMode: this.facingMode };
  }
};
var _e = class {
  constructor() {
    this._video = new N().build();
    this._audio = new x().build();
    this._screen = new N().build();
    this._simulcast = false;
  }
  video(e14) {
    return this._video = e14, this;
  }
  audio(e14) {
    return this._audio = e14, this;
  }
  screen(e14) {
    return this._screen = e14, this;
  }
  simulcast(e14) {
    return this._simulcast = e14, this;
  }
  build() {
    if (this._audio === null && this._video === null)
      throw p.TracksErrors.NothingToReturn("TRACK");
    if (this._video === null && this._simulcast)
      throw p.TracksErrors.InvalidVideoSettings("TRACK", "Cannot enable simulcast when no video settings are provided");
    return new Ee(this._video, this._audio, this._simulcast, this._screen || void 0);
  }
};
var Ee = class {
  constructor(e14, t9, i10, r9 = null) {
    this.video = e14, this.audio = t9, this.simulcast = i10, this.screen = r9;
  }
  toAnalyticsProperties() {
    let e14 = { audio_enabled: this.audio !== null, video_enabled: this.video !== null };
    return this.audio && (e14 = g(g({}, this.audio.toAnalyticsProperties()), e14)), this.video && (e14 = g(g({}, this.video.toAnalyticsProperties()), e14)), e14;
  }
};
function xi(n18, e14) {
  return function(i10) {
    return i10 in n18 && n18[i10] !== e14[i10];
  };
}
var pe = class n2 extends Te {
  constructor(t9, i10, r9, s11, a4 = new x().build()) {
    super(t9, i10, r9);
    this.eventBus = s11;
    this.TAG = "[HMSLocalAudioTrack]";
    this.isPublished = false;
    this.handleVisibilityChange = () => d(this, null, function* () {
      document.visibilityState === "visible" && (yield this.replaceTrackWith(this.settings));
    });
    this.handleSettingsChange = (t10) => d(this, null, function* () {
      let i11 = this.stream, r10 = xi(t10, this.settings);
      r10("maxBitrate") && t10.maxBitrate && (yield i11.setMaxBitrateAndFramerate(this)), r10("advanced") && (yield this.replaceTrackWith(t10));
    });
    this.handleDeviceChange = (t10, i11 = false) => d(this, null, function* () {
      xi(t10, this.settings)("deviceId") && (yield this.replaceTrackWith(t10), i11 || O.updateSelection("audioInput", { deviceId: t10.deviceId, groupId: this.nativeTrack.getSettings().groupId }));
    });
    t9.tracks.push(this), this.settings = a4, a4.deviceId !== i10.getSettings().deviceId && !B(i10) && (this.settings = this.buildNewSettings({ deviceId: i10.getSettings().deviceId })), this.pluginsManager = new He(this, s11), this.setFirstTrackId(i10.id), Wt() && w && document.addEventListener("visibilitychange", this.handleVisibilityChange);
  }
  replaceTrackWith(t9) {
    return d(this, null, function* () {
      let i10 = this.nativeTrack;
      i10 == null || i10.stop();
      let r9 = !!this.audioLevelMonitor, s11 = yield st(t9);
      s11.enabled = this.enabled, o.d(this.TAG, "replaceTrack, Previous track stopped", i10, "newTrack", s11);
      let a4 = this.stream;
      yield a4.replaceSenderTrack(i10, this.processedTrack || s11), yield a4.replaceStreamTrack(i10, s11), this.nativeTrack = s11, r9 && this.initAudioLevelMonitor();
      try {
        yield this.pluginsManager.reprocessPlugins();
      } catch (c5) {
        this.eventBus.audioPluginFailed.publish(c5);
      }
    });
  }
  setEnabled(t9) {
    return d(this, null, function* () {
      t9 !== this.enabled && (t9 && B(this.nativeTrack) && (yield this.replaceTrackWith(this.settings)), yield D(n2.prototype, this, "setEnabled").call(this, t9), t9 && (this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId })), this.eventBus.localAudioEnabled.publish({ enabled: t9, track: this }));
    });
  }
  isPublishedTrackId(t9) {
    return this.publishedTrackId === t9;
  }
  setSettings(t9, i10 = false) {
    return d(this, null, function* () {
      let r9 = this.buildNewSettings(t9);
      if (B(this.nativeTrack)) {
        this.settings = r9;
        return;
      }
      yield this.handleDeviceChange(r9, i10), yield this.handleSettingsChange(r9), this.settings = r9;
    });
  }
  getPlugins() {
    return this.pluginsManager.getPlugins();
  }
  addPlugin(t9) {
    return d(this, null, function* () {
      return this.pluginsManager.addPlugin(t9);
    });
  }
  removePlugin(t9) {
    return d(this, null, function* () {
      return this.pluginsManager.removePlugin(t9);
    });
  }
  validatePlugin(t9) {
    return this.pluginsManager.validatePlugin(t9);
  }
  setProcessedTrack(t9) {
    return d(this, null, function* () {
      if (!t9) {
        this.processedTrack && (yield this.stream.replaceSenderTrack(this.processedTrack, this.nativeTrack)), this.processedTrack = void 0;
        return;
      }
      t9 !== this.processedTrack && (this.processedTrack ? yield this.stream.replaceSenderTrack(this.processedTrack, t9) : yield this.stream.replaceSenderTrack(this.nativeTrack, t9), this.processedTrack = t9);
    });
  }
  initAudioLevelMonitor() {
    this.audioLevelMonitor && this.destroyAudioLevelMonitor(), o.d(this.TAG, "Monitor Audio Level for", this, this.getMediaTrackSettings().deviceId), this.audioLevelMonitor = new ot(this, this.eventBus.trackAudioLevelUpdate, this.eventBus.localAudioSilence), this.audioLevelMonitor.start(), this.audioLevelMonitor.detectSilence();
  }
  destroyAudioLevelMonitor() {
    var t9;
    (t9 = this.audioLevelMonitor) == null || t9.stop(), this.audioLevelMonitor = void 0;
  }
  cleanup() {
    return d(this, null, function* () {
      var t9;
      D(n2.prototype, this, "cleanup").call(this), yield this.pluginsManager.cleanup(), yield this.pluginsManager.closeContext(), this.transceiver = void 0, (t9 = this.processedTrack) == null || t9.stop(), this.isPublished = false, this.destroyAudioLevelMonitor(), Wt() && w && document.removeEventListener("visibilitychange", this.handleVisibilityChange);
    });
  }
  getTrackIDBeingSent() {
    return this.processedTrack ? this.processedTrack.id : this.nativeTrack.id;
  }
  getTrackBeingSent() {
    return this.processedTrack || this.nativeTrack;
  }
  buildNewSettings(t9) {
    let { volume: i10, codec: r9, maxBitrate: s11, deviceId: a4, advanced: c5 } = g(g({}, this.settings), t9);
    return new ue(i10, r9, s11, a4, c5);
  }
};
var re = class n3 extends Te {
  setEnabled(e14) {
    return d(this, null, function* () {
      e14 !== this.enabled && (yield D(n3.prototype, this, "setEnabled").call(this, e14), yield this.subscribeToAudio(e14));
    });
  }
};
var ke = class extends Z {
  constructor(t9, i10, r9) {
    super(t9, i10, r9);
    this.type = "video";
    this.sinkCount = 0;
    if (i10.kind !== "video")
      throw new Error("Expected 'track' kind = 'video'");
  }
  setVideoHandler(t9) {
    this.videoHandler = t9;
  }
  hasSinks() {
    return this.sinkCount > 0;
  }
  getSinks() {
    return this.videoHandler.getVideoElements() || [];
  }
  attach(t9) {
    this.videoHandler.addVideoElement(t9);
  }
  detach(t9) {
    this.videoHandler.removeVideoElement(t9);
  }
  addSink(t9) {
    this.addSinkInternal(t9, this.nativeTrack);
  }
  removeSink(t9) {
    t9.srcObject !== null && (t9.srcObject = null, this.reduceSinkCount());
  }
  cleanup() {
    super.cleanup(), this.videoHandler.cleanup();
  }
  addSinkInternal(t9, i10) {
    let r9 = t9.srcObject;
    if (r9 !== null && r9 instanceof MediaStream) {
      let s11 = r9.getVideoTracks()[0];
      if ((s11 == null ? void 0 : s11.id) === i10.id) {
        if (!s11.muted && s11.readyState === "live")
          return;
        this.reduceSinkCount();
      } else
        this.reduceSinkCount();
    }
    t9.srcObject = new MediaStream([i10]), this.sinkCount++;
  }
  reduceSinkCount() {
    this.sinkCount > 0 && this.sinkCount--;
  }
};
var De = { none: -1, low: 0, medium: 1, high: 2 };
var Nr = 0.5;
var Fi = (n18, e14) => {
  let t9 = "high", i10 = e14.width > e14.height ? "width" : "height", r9 = [...n18].sort((a4, c5) => De[a4.layer] - De[c5.layer]), s11 = e14[i10] * ((window == null ? void 0 : window.devicePixelRatio) || 1);
  for (let a4 = 0; a4 < r9.length; a4++) {
    let { resolution: c5, layer: l5 } = r9[a4], h4 = c5[i10];
    if (s11 <= h4) {
      t9 = l5;
      break;
    } else {
      let u5 = r9[a4 + 1], m4 = u5 ? u5.resolution[i10] : Number.POSITIVE_INFINITY;
      if ((s11 - h4) / (m4 - h4) < Nr) {
        t9 = l5;
        break;
      }
    }
  }
  return t9;
};
var Zt = class {
  constructor() {
    this.TAG = "[HMSIntersectionObserverWrapper]";
    this.listeners = /* @__PURE__ */ new WeakMap();
    this.observe = (e14, t9) => {
      var i10;
      this.createObserver(), this.unobserve(e14), (i10 = this.intersectionObserver) == null || i10.observe(e14), this.listeners.set(e14, t9);
    };
    this.unobserve = (e14) => {
      var t9;
      (t9 = this.intersectionObserver) == null || t9.unobserve(e14), this.listeners.delete(e14);
    };
    this.createObserver = () => {
      this.isSupported() && !this.intersectionObserver && (this.intersectionObserver = new IntersectionObserver(this.handleIntersection));
    };
    this.handleIntersection = (e14) => {
      var t9;
      for (let i10 of e14)
        (t9 = this.listeners.get(i10.target)) == null || t9(i10);
    };
    this.createObserver();
  }
  isSupported() {
    let e14 = w && typeof window.IntersectionObserver != "undefined";
    return e14 || o.w(this.TAG, "IntersectionObserver is not supported, fallback will be used instead"), e14;
  }
};
var Gi = new Zt();
var ei = class {
  constructor() {
    this.TAG = "[HMSResizeObserverWrapper]";
    this.listeners = /* @__PURE__ */ new WeakMap();
    this.observe = (e14, t9, i10 = { box: "border-box" }) => {
      var r9;
      this.createObserver(), this.unobserve(e14), (r9 = this.resizeObserver) == null || r9.observe(e14, i10), this.listeners.set(e14, t9);
    };
    this.unobserve = (e14) => {
      var t9;
      (t9 = this.resizeObserver) == null || t9.unobserve(e14), this.listeners.delete(e14);
    };
    this.createObserver = () => {
      this.isSupported() && !this.resizeObserver && (this.resizeObserver = new ResizeObserver(nt(this.handleResize, 300)));
    };
    this.handleResize = (e14) => {
      var t9;
      for (let i10 of e14)
        (t9 = this.listeners.get(i10.target)) == null || t9(i10);
    };
    this.createObserver();
  }
  isSupported() {
    let e14 = w && typeof window.ResizeObserver != "undefined";
    return e14 || o.w(this.TAG, "Resize Observer is not supported"), e14;
  }
};
var Ui = new ei();
var Me = class {
  constructor(e14) {
    this.track = e14;
    this.TAG = "[VideoElementManager]";
    this.videoElements = /* @__PURE__ */ new Set();
    this.entries = /* @__PURE__ */ new WeakMap();
    this.handleIntersection = (e15) => d(this, null, function* () {
      let t9 = getComputedStyle(e15.target).visibility === "visible";
      this.track.enabled && (e15.isIntersecting && t9 || !document.contains(e15.target)) ? (o.d(this.TAG, "add sink intersection", `${this.track}`, this.id), this.entries.set(e15.target, e15.boundingClientRect), yield this.selectMaxLayer(), yield this.track.addSink(e15.target)) : (o.d(this.TAG, "remove sink intersection", `${this.track}`, this.id), yield this.track.removeSink(e15.target));
    });
    this.handleResize = (e15) => d(this, null, function* () {
      !this.track.enabled || !(this.track instanceof H) || (this.entries.set(e15.target, e15.contentRect), yield this.selectMaxLayer());
    });
    this.cleanup = () => {
      this.videoElements.forEach((e15) => {
        var t9, i10;
        e15.srcObject = null, (t9 = this.resizeObserver) == null || t9.unobserve(e15), (i10 = this.intersectionObserver) == null || i10.unobserve(e15);
      }), this.videoElements.clear(), this.resizeObserver = void 0, this.intersectionObserver = void 0;
    };
    this.init(), this.id = v4_default();
  }
  updateSinks(e14 = false) {
    for (let t9 of this.videoElements)
      this.track.enabled ? this.track.addSink(t9, e14) : this.track.removeSink(t9, e14);
  }
  addVideoElement(e14) {
    return d(this, null, function* () {
      var t9;
      this.videoElements.has(e14) || (this.init(), o.d(this.TAG, `Adding video element for ${this.track}`, this.id), this.videoElements.add(e14), this.videoElements.size >= 10 && o.w(this.TAG, `${this.track}`, `the track is added to ${this.videoElements.size} video elements, while this may be intentional, it's likely that there is a bug leading to unnecessary creation of video elements in the UI`), (t9 = this.intersectionObserver) != null && t9.isSupported() ? this.intersectionObserver.observe(e14, this.handleIntersection) : w && (this.isElementInViewport(e14) ? this.track.addSink(e14) : this.track.removeSink(e14)), this.resizeObserver ? this.resizeObserver.observe(e14, this.handleResize) : this.track instanceof H && (yield this.track.setPreferredLayer(this.track.getPreferredLayer())));
    });
  }
  removeVideoElement(e14) {
    var t9, i10;
    this.track.removeSink(e14), this.videoElements.delete(e14), this.entries.delete(e14), (t9 = this.resizeObserver) == null || t9.unobserve(e14), (i10 = this.intersectionObserver) == null || i10.unobserve(e14), o.d(this.TAG, `Removing video element for ${this.track}`);
  }
  getVideoElements() {
    return Array.from(this.videoElements);
  }
  init() {
    w && (this.resizeObserver = Ui, this.intersectionObserver = Gi);
  }
  isElementInViewport(e14) {
    let t9 = e14.offsetTop, i10 = e14.offsetLeft, r9 = e14.offsetWidth, s11 = e14.offsetHeight, { hidden: a4 } = e14, { opacity: c5, display: l5 } = getComputedStyle(e14);
    for (; e14.offsetParent; )
      e14 = e14.offsetParent, t9 += e14.offsetTop, i10 += e14.offsetLeft;
    return t9 < window.pageYOffset + window.innerHeight && i10 < window.pageXOffset + window.innerWidth && t9 + s11 > window.pageYOffset && i10 + r9 > window.pageXOffset && !a4 && (c5 !== "" ? parseFloat(c5) > 0 : true) && l5 !== "none";
  }
  selectMaxLayer() {
    return d(this, null, function* () {
      if (!(this.track instanceof H) || this.videoElements.size === 0)
        return;
      let e14;
      for (let t9 of this.videoElements) {
        let i10 = this.entries.get(t9);
        if (!i10)
          continue;
        let { width: r9, height: s11 } = i10;
        if (r9 === 0 || s11 === 0)
          continue;
        let a4 = Fi(this.track.getSimulcastDefinitions(), { width: r9, height: s11 });
        e14 ? e14 = De[a4] > De[e14] ? a4 : e14 : e14 = a4;
      }
      e14 && (o.d(this.TAG, `selecting max layer ${e14} for the track`, `${this.track}`), yield this.track.setPreferredLayer(e14));
    });
  }
};
var ti = ((t9) => (t9.TRANSFORM = "TRANSFORM", t9.ANALYZE = "ANALYZE", t9))(ti || {});
var ii = ((t9) => (t9["2D"] = "2d", t9.WEBGL = "webgl", t9.WEBGL2 = "webgl2", t9))(ii || {});
var Oe = class {
  constructor() {
    this.total = 0;
    this.count = 0;
  }
  add(e14) {
    this.count++, this.total += e14;
  }
  getAvg() {
    return Math.floor(this.total / this.count);
  }
  reset() {
    this.total = 0, this.count = 0;
  }
};
var dt = class {
  constructor(e14) {
    this.eventBus = e14;
    this.TAG = "[VideoPluginsAnalytics]";
    this.initTime = {}, this.preProcessingAvgs = new Oe(), this.addedTimestamps = {}, this.processingAvgs = {}, this.pluginAdded = {}, this.pluginInputFrameRate = {}, this.pluginFrameRate = {};
  }
  added(e14, t9, i10) {
    this.pluginAdded[e14] = true, this.addedTimestamps[e14] = Date.now(), this.initTime[e14] = 0, this.processingAvgs[e14] = new Oe(), this.pluginInputFrameRate[e14] = t9, this.pluginFrameRate[e14] = i10 || t9;
  }
  removed(e14) {
    var t9;
    if (this.pluginAdded[e14]) {
      let i10 = { pluginName: e14, duration: Math.floor((Date.now() - this.addedTimestamps[e14]) / 1e3), loadTime: this.initTime[e14], avgPreProcessingTime: this.preProcessingAvgs.getAvg(), avgProcessingTime: (t9 = this.processingAvgs[e14]) == null ? void 0 : t9.getAvg(), inputFrameRate: this.pluginInputFrameRate[e14], pluginFrameRate: this.pluginFrameRate[e14] };
      this.eventBus.analytics.publish(q.stats(i10)), this.clean(e14);
    }
  }
  failure(e14, t9) {
    this.pluginAdded[e14] && (this.eventBus.analytics.publish(q.failure(e14, t9)), this.clean(e14));
  }
  initWithTime(e14, t9) {
    return d(this, null, function* () {
      if (this.initTime[e14]) {
        o.i(this.TAG, `Plugin Already loaded ${e14}, time it took: ${this.initTime[e14]}`);
        return;
      }
      let i10;
      try {
        i10 = yield this.timeInMs(t9), o.i(this.TAG, `Time taken for Plugin ${e14} initialization : ${i10}`);
      } catch (r9) {
        let s11 = p.MediaPluginErrors.InitFailed("VIDEO_PLUGINS", `failed during initialization of plugin${r9.message || r9}`);
        throw o.e(this.TAG, s11), this.failure(e14, s11), s11;
      }
      i10 && (this.initTime[e14] = i10);
    });
  }
  preProcessWithTime(e14) {
    return d(this, null, function* () {
      let t9 = yield this.timeInMs(e14);
      this.preProcessingAvgs.add(t9);
    });
  }
  processWithTime(e14, t9) {
    return d(this, null, function* () {
      var r9;
      let i10;
      try {
        i10 = yield this.timeInMs(t9);
      } catch (s11) {
        let a4 = p.MediaPluginErrors.ProcessingFailed("VIDEO_PLUGINS", `Failed during processing of plugin${s11.message || s11}`);
        throw o.e(this.TAG, a4), this.failure(e14, a4), a4;
      }
      i10 && ((r9 = this.processingAvgs[e14]) == null || r9.add(i10));
    });
  }
  timeInMs(e14) {
    return d(this, null, function* () {
      let t9 = Date.now();
      return yield e14(), Math.floor(Date.now() - t9);
    });
  }
  clean(e14) {
    delete this.addedTimestamps[e14], delete this.initTime[e14], delete this.processingAvgs[e14], delete this.pluginAdded[e14], delete this.pluginInputFrameRate[e14], delete this.pluginFrameRate[e14];
  }
};
var Vi = 24;
var Fr = 320;
var Gr = 240;
var Ne = class {
  constructor(e14, t9) {
    this.TAG = "[VideoPluginsManager]";
    this.pluginsLoopRunning = false;
    this.pluginsLoopState = "paused";
    this.pluginAddInProgress = false;
    this.hmsTrack = e14, this.pluginsMap = /* @__PURE__ */ new Map(), this.pluginNumFramesToSkip = {}, this.pluginNumFramesSkipped = {}, this.analytics = new dt(t9), this.canvases = new Array();
  }
  getPlugins() {
    return Array.from(this.pluginsMap.keys());
  }
  addPlugin(e14, t9) {
    return d(this, null, function* () {
      var i10;
      if (this.pluginAddInProgress) {
        let r9 = (i10 = e14.getName) == null ? void 0 : i10.call(e14);
        if (!r9 || r9 === "") {
          o.w("no name provided by the plugin");
          return;
        }
        let s11 = p.MediaPluginErrors.AddAlreadyInProgress("VIDEO_PLUGINS", "Add Plugin is already in Progress");
        throw this.analytics.failure(r9, s11), o.w("can't add another plugin when previous add is in progress"), s11;
      }
      this.pluginAddInProgress = true;
      try {
        yield this.addPluginInternal(e14, t9);
      } finally {
        this.pluginAddInProgress = false;
      }
    });
  }
  addPluginInternal(e14, t9) {
    return d(this, null, function* () {
      var a4, c5;
      let i10 = (a4 = e14.getName) == null ? void 0 : a4.call(e14);
      if (!i10 || i10 === "") {
        o.w("no name provided by the plugin");
        return;
      }
      if (this.pluginsMap.has(i10)) {
        o.w(this.TAG, `plugin - ${e14.getName()} already added.`);
        return;
      }
      let r9 = this.hmsTrack.getMediaTrackSettings().frameRate || Vi, s11 = 0;
      t9 && t9 > 0 ? (o.i(this.TAG, `adding plugin ${e14.getName()} with framerate ${t9}`), t9 < r9 && (s11 = Math.ceil(r9 / t9) - 1), this.analytics.added(i10, r9, t9)) : (o.i(this.TAG, `adding plugin ${e14.getName()}`), this.analytics.added(i10, r9)), o.i(this.TAG, "numFrames to skip processing", s11), this.pluginNumFramesToSkip[i10] = s11, this.pluginNumFramesSkipped[i10] = s11, this.validateAndThrow(i10, e14);
      try {
        if (yield this.analytics.initWithTime(i10, () => d(this, null, function* () {
          return yield e14.init();
        })), this.pluginsMap.set(i10, e14), this.pluginsMap.size + 1 > this.canvases.length)
          for (let l5 = this.canvases.length; l5 <= this.pluginsMap.size; l5++)
            this.canvases[l5] = document.createElement("canvas");
        yield this.startPluginsLoop((c5 = e14.getContextType) == null ? void 0 : c5.call(e14));
      } catch (l5) {
        throw o.e(this.TAG, "failed to add plugin", l5), yield this.removePlugin(e14), l5;
      }
    });
  }
  validatePlugin(e14) {
    return e14.checkSupport();
  }
  validateAndThrow(e14, t9) {
    let i10 = this.validatePlugin(t9);
    if (i10.isSupported)
      o.i(this.TAG, `plugin is supported,- ${t9.getName()}`);
    else {
      let r9;
      switch (i10.errType) {
        case "PLATFORM_NOT_SUPPORTED":
          throw r9 = p.MediaPluginErrors.PlatformNotSupported("VIDEO_PLUGINS", "platform not supported, see docs"), this.analytics.failure(e14, r9), r9;
        case "DEVICE_NOT_SUPPORTED":
          throw r9 = p.MediaPluginErrors.DeviceNotSupported("VIDEO_PLUGINS", "video device not supported, see docs"), this.analytics.failure(e14, r9), r9;
      }
    }
  }
  removePlugin(e14) {
    return d(this, null, function* () {
      let t9 = e14.getName();
      if (!this.pluginsMap.get(t9)) {
        o.w(this.TAG, `plugin - ${t9} not found to remove.`);
        return;
      }
      o.i(this.TAG, `removing plugin ${t9}`), this.removePluginEntry(t9), this.pluginsMap.size === 0 && (o.i(this.TAG, "No plugins left, stopping plugins loop"), yield this.stopPluginsLoop()), e14.stop(), this.analytics.removed(t9);
    });
  }
  removePluginEntry(e14) {
    this.pluginsMap.delete(e14), this.pluginNumFramesToSkip[e14] && delete this.pluginNumFramesToSkip[e14], this.pluginNumFramesSkipped[e14] && delete this.pluginNumFramesSkipped[e14];
  }
  waitForRestart() {
    return d(this, null, function* () {
      if (!(!this.pluginsLoopRunning || this.pluginsLoopState === "running"))
        for (; this.pluginsLoopState === "paused"; )
          yield R(100);
    });
  }
  cleanup() {
    return d(this, null, function* () {
      var e14;
      for (let t9 of this.pluginsMap.values())
        yield this.removePlugin(t9);
      (e14 = this.outputTrack) == null || e14.stop();
    });
  }
  initElementsAndStream(e14) {
    this.inputCanvas || (this.inputCanvas = document.createElement("canvas")), this.outputCanvas = document.createElement("canvas"), this.inputVideo || (this.inputVideo = document.createElement("video")), this.inputCanvas.getContext("2d"), this.outputCanvas.getContext(e14 || "2d");
    let t9 = this.outputCanvas.captureStream();
    this.outputTrack = t9.getVideoTracks()[0];
  }
  startPluginsLoop(e14) {
    return d(this, null, function* () {
      if (!this.pluginsLoopRunning) {
        this.initElementsAndStream(e14), this.pluginsLoopRunning = true;
        try {
          yield this.hmsTrack.setProcessedTrack(this.outputTrack);
        } catch (t9) {
          throw this.pluginsLoopRunning = false, o.e(this.TAG, "error in setting processed track", t9), t9;
        }
        this.pluginsLoop().then(() => {
          o.d(this.TAG, "processLoop stopped");
        });
      }
    });
  }
  stopPluginsLoop() {
    return d(this, null, function* () {
      var e14;
      this.pluginsLoopRunning = false, yield this.hmsTrack.setProcessedTrack(void 0), this.resetCanvases(), (e14 = this.outputTrack) == null || e14.stop(), this.inputVideo && (this.inputVideo.srcObject = null, this.inputVideo = void 0);
    });
  }
  pluginsLoop() {
    return d(this, null, function* () {
      for (; this.pluginsLoopRunning; ) {
        let e14 = this.hmsTrack.getMediaTrackSettings().frameRate || Vi, t9 = Math.floor(1e3 / e14);
        if (!this.hmsTrack.enabled || this.hmsTrack.nativeTrack.readyState === "ended") {
          this.pluginsLoopState === "running" && this.resetCanvases(), this.pluginsLoopState = "paused", yield R(t9);
          continue;
        }
        let i10 = 0;
        try {
          yield this.analytics.preProcessWithTime(() => d(this, null, function* () {
            return yield this.doPreProcessing();
          }));
          let r9 = Date.now();
          yield this.processFramesThroughPlugins(), i10 = Math.floor(Date.now() - r9), i10 > t9 && (i10 = t9);
        } catch (r9) {
          o.e(this.TAG, "error in plugins loop", r9);
        }
        this.pluginsLoopState = "running", yield R(t9 - i10);
      }
    });
  }
  doPreProcessing() {
    return d(this, null, function* () {
      yield this.addTrackToVideo(), yield this.updateInputCanvas();
    });
  }
  processFramesThroughPlugins() {
    return d(this, null, function* () {
      this.canvases[0] = this.inputCanvas;
      let e14 = 0;
      for (let t9 of this.pluginsMap.values()) {
        let i10 = t9.getName();
        if (t9) {
          try {
            let r9 = this.checkIfSkipRequired(i10);
            if (t9.getPluginType() === "TRANSFORM") {
              let s11 = (a4, c5) => d(this, null, function* () {
                try {
                  yield t9.processVideoFrame(a4, c5, r9);
                } catch (l5) {
                  o.e(this.TAG, `error in processing plugin ${i10}`, l5);
                }
              });
              if (r9)
                e14 === this.pluginsMap.size - 1 ? yield s11(this.canvases[e14], this.outputCanvas) : yield s11(this.canvases[e14], this.canvases[e14 + 1]);
              else {
                let a4 = this.canvases[e14], c5 = this.canvases[e14 + 1];
                e14 === this.pluginsMap.size - 1 ? yield this.analytics.processWithTime(i10, () => d(this, null, function* () {
                  return s11(a4, this.outputCanvas);
                })) : yield this.analytics.processWithTime(i10, () => d(this, null, function* () {
                  return s11(a4, c5);
                }));
              }
            } else
              t9.getPluginType() === "ANALYZE" && !r9 && (yield this.analytics.processWithTime(i10, () => d(this, null, function* () {
                return yield t9.processVideoFrame(this.inputCanvas);
              })));
          } catch (r9) {
            o.e(this.TAG, `error in processing plugin ${i10}`, r9), yield this.removePlugin(t9);
          }
          e14++;
        }
      }
    });
  }
  addTrackToVideo() {
    return d(this, null, function* () {
      var t9;
      if (!this.inputVideo)
        return;
      let e14 = this.inputVideo.srcObject;
      e14 !== null && e14 instanceof MediaStream && ((t9 = e14.getVideoTracks()[0]) == null ? void 0 : t9.id) === this.hmsTrack.nativeTrack.id || (this.inputVideo.pause(), this.inputVideo.srcObject = new MediaStream([this.hmsTrack.nativeTrack]), this.inputVideo.muted = true, this.inputVideo.playsInline = true, yield this.inputVideo.play());
    });
  }
  updateInputCanvas() {
    return d(this, null, function* () {
      if (!this.inputCanvas || !this.inputVideo)
        return;
      let { width: e14 = Fr, height: t9 = Gr } = this.hmsTrack.getMediaTrackSettings();
      this.inputCanvas.height !== t9 && (this.inputCanvas.height = t9), this.inputCanvas.width !== e14 && (this.inputCanvas.width = e14), this.inputCanvas.getContext("2d").drawImage(this.inputVideo, 0, 0, e14, t9);
    });
  }
  resetCanvases() {
    if (!this.outputCanvas || !this.inputCanvas)
      return;
    let e14 = this.inputCanvas.getContext("2d");
    e14 && (e14.fillStyle = "rgb(0, 0, 0)", e14.fillRect(0, 0, this.outputCanvas.width, this.outputCanvas.height)), this.canvases = [];
  }
  checkIfSkipRequired(e14) {
    let t9 = false;
    return this.pluginNumFramesSkipped[e14] < this.pluginNumFramesToSkip[e14] ? (this.pluginNumFramesSkipped[e14]++, t9 = true) : (t9 = false, this.pluginNumFramesSkipped[e14] = 0), t9;
  }
};
function Bi(n18, e14) {
  return function(i10) {
    return i10 in n18 && n18[i10] !== e14[i10];
  };
}
var F = class n4 extends ke {
  constructor(t9, i10, r9, s11, a4 = new N().build()) {
    super(t9, i10, r9);
    this.eventBus = s11;
    this._layerDefinitions = [];
    this.TAG = "[HMSLocalVideoTrack]";
    this.isCurrentTab = false;
    this.isPublished = false;
    this.buildNewSettings = (t10) => {
      let { width: i11, height: r10, codec: s12, maxFramerate: a5, maxBitrate: c5, deviceId: l5, advanced: h4, facingMode: u5 } = g(g({}, this.settings), t10);
      return new he(i11, r10, s12, a5, l5, h4, c5, u5);
    };
    this.handleSettingsChange = (t10) => d(this, null, function* () {
      let i11 = this.stream, r10 = Bi(t10, this.settings);
      if (r10("maxBitrate") && t10.maxBitrate && (yield i11.setMaxBitrateAndFramerate(this)), r10("width") || r10("height") || r10("advanced")) {
        let s12 = yield this.replaceTrackWith(t10);
        yield this.replaceSender(s12, this.enabled), this.nativeTrack = s12, this.videoHandler.updateSinks();
      }
    });
    this.handleDeviceChange = (t10, i11 = false) => d(this, null, function* () {
      if (Bi(t10, this.settings)("deviceId") && this.source === "regular") {
        if (this.enabled) {
          delete t10.facingMode;
          let s12 = yield this.replaceTrackWith(t10);
          yield this.replaceSender(s12, this.enabled), this.nativeTrack = s12, this.videoHandler.updateSinks();
        }
        i11 || O.updateSelection("videoInput", { deviceId: t10.deviceId, groupId: this.nativeTrack.getSettings().groupId });
      }
    });
    this.removeOrReplaceProcessedTrack = (t10) => d(this, null, function* () {
      t10 ? t10 !== this.processedTrack && (this.processedTrack ? yield this.stream.replaceSenderTrack(this.processedTrack, t10) : yield this.stream.replaceSenderTrack(this.nativeTrack, t10), this.processedTrack = t10) : (this.processedTrack && (yield this.stream.replaceSenderTrack(this.processedTrack, this.nativeTrack)), this.processedTrack = void 0);
    });
    t9.tracks.push(this), this.setVideoHandler(new Me(this)), this.settings = a4, a4.deviceId !== i10.getSettings().deviceId && i10.enabled && (this.settings = this.buildNewSettings({ deviceId: i10.getSettings().deviceId })), this.pluginsManager = new Ne(this, s11), this.setFirstTrackId(this.trackId);
  }
  setSimulcastDefinitons(t9) {
    this._layerDefinitions = t9;
  }
  getSimulcastDefinitions() {
    return this._layerDefinitions;
  }
  setEnabled(t9) {
    return d(this, null, function* () {
      var i10;
      if (t9 !== this.enabled) {
        if (D(n4.prototype, this, "setEnabled").call(this, t9), this.source === "regular") {
          let r9;
          t9 ? r9 = yield this.replaceTrackWith(this.settings) : r9 = yield this.replaceTrackWithBlank(), yield this.replaceSender(r9, t9), (i10 = this.nativeTrack) == null || i10.stop(), this.nativeTrack = r9, t9 && (yield this.pluginsManager.waitForRestart(), this.settings = this.buildNewSettings({ deviceId: r9.getSettings().deviceId })), this.videoHandler.updateSinks();
        }
        this.eventBus.localVideoEnabled.publish({ enabled: t9, track: this });
      }
    });
  }
  isPublishedTrackId(t9) {
    return this.publishedTrackId === t9;
  }
  addSink(t9) {
    this.addSinkInternal(t9, this.processedTrack || this.nativeTrack);
  }
  setSettings(t9, i10 = false) {
    return d(this, null, function* () {
      let r9 = this.buildNewSettings(t9);
      if (yield this.handleDeviceChange(r9, i10), !this.enabled || B(this.nativeTrack)) {
        this.settings = r9;
        return;
      }
      yield this.handleSettingsChange(r9), this.settings = r9;
    });
  }
  getPlugins() {
    return this.pluginsManager.getPlugins();
  }
  addPlugin(t9, i10) {
    return d(this, null, function* () {
      return this.pluginsManager.addPlugin(t9, i10);
    });
  }
  removePlugin(t9) {
    return d(this, null, function* () {
      return this.pluginsManager.removePlugin(t9);
    });
  }
  validatePlugin(t9) {
    return this.pluginsManager.validatePlugin(t9);
  }
  cleanup() {
    return d(this, null, function* () {
      var t9;
      D(n4.prototype, this, "cleanup").call(this), this.transceiver = void 0, yield this.pluginsManager.cleanup(), (t9 = this.processedTrack) == null || t9.stop(), this.isPublished = false;
    });
  }
  cropTo(t9) {
    return d(this, null, function* () {
      if (t9 && this.source === "screen")
        try {
          this.nativeTrack.cropTo && (yield this.nativeTrack.cropTo(t9));
        } catch (i10) {
          throw o.e(this.TAG, "failed to crop screenshare capture - ", i10), p.TracksErrors.GenericTrack("TRACK", "failed to crop screenshare capture");
        }
    });
  }
  getCaptureHandle() {
    if (this.nativeTrack.getCaptureHandle)
      return this.nativeTrack.getCaptureHandle();
  }
  setProcessedTrack(t9) {
    return d(this, null, function* () {
      if (!this.nativeTrack.enabled) {
        this.processedTrack = t9;
        return;
      }
      yield this.removeOrReplaceProcessedTrack(t9), this.videoHandler.updateSinks();
    });
  }
  getTrackIDBeingSent() {
    return this.getTrackBeingSent().id;
  }
  getTrackBeingSent() {
    return this.enabled ? this.processedTrack || this.nativeTrack : this.nativeTrack;
  }
  switchCamera() {
    return d(this, null, function* () {
      var s11;
      let t9 = this.getMediaTrackSettings().facingMode;
      if (!t9 || this.source !== "regular") {
        o.d(this.TAG, "facingMode not supported");
        return;
      }
      let i10 = t9 === "environment" ? "user" : "environment";
      (s11 = this.nativeTrack) == null || s11.stop();
      let r9 = yield this.replaceTrackWith(this.buildNewSettings({ facingMode: i10, deviceId: void 0 }));
      yield this.replaceSender(r9, this.enabled), this.nativeTrack = r9, this.videoHandler.updateSinks(), this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId, facingMode: i10 }), O.updateSelection("videoInput", { deviceId: this.settings.deviceId, groupId: this.nativeTrack.getSettings().groupId });
    });
  }
  replaceTrackWith(t9) {
    return d(this, null, function* () {
      let i10 = this.nativeTrack;
      i10 == null || i10.stop();
      let r9 = yield at(t9);
      return o.d(this.TAG, "replaceTrack, Previous track stopped", i10, "newTrack", r9), this.settings.deviceId === "default" && (this.settings = this.buildNewSettings({ deviceId: this.nativeTrack.getSettings().deviceId })), r9;
    });
  }
  replaceTrackWithBlank() {
    return d(this, null, function* () {
      let t9 = this.nativeTrack, i10 = j.getEmptyVideoTrack(t9);
      return t9 == null || t9.stop(), o.d(this.TAG, "replaceTrackWithBlank, Previous track stopped", t9, "newTrack", i10), i10;
    });
  }
  replaceSender(t9, i10) {
    return d(this, null, function* () {
      let r9 = this.stream;
      i10 ? yield r9.replaceSenderTrack(this.nativeTrack, this.processedTrack || t9) : yield r9.replaceSenderTrack(this.processedTrack || this.nativeTrack, t9), yield r9.replaceStreamTrack(this.nativeTrack, t9);
    });
  }
};
var ye = "renegotiation-callback-id";
var lt = "ion-sfu";
var Pe = "SUBSCRIBE_ICE_CONNECTION_CALLBACK_ID";
var $i = "https://event.100ms.live/v2/client/report";
var Wi = "https://event-nonprod.100ms.live/v2/client/report";
var L = { DEVICE_CHANGE: "device-change", LOCAL_AUDIO_ENABLED: "local-audio-enabled", LOCAL_VIDEO_ENABLED: "local-video-enabled", STATS_UPDATE: "stats-update", RTC_STATS_UPDATE: "rtc-stats-update", TRACK_DEGRADED: "track-degraded", TRACK_RESTORED: "track-restored", TRACK_AUDIO_LEVEL_UPDATE: "track-audio-level-update", LOCAL_AUDIO_SILENCE: "local-audio-silence", ANALYTICS: "analytics", AUDIO_PLUGIN_FAILED: "audio-plugin-failed", POLICY_CHANGE: "policy-change", LOCAL_ROLE_UPDATE: "local-role-update", AUDIO_TRACK_UPDATE: "audio-track-update", AUDIO_TRACK_ADDED: "audio-track-added", AUDIO_TRACK_REMOVED: "audio-track-removed", AUTOPLAY_ERROR: "autoplay-error", LEAVE: "leave" };
var H = class n5 extends ke {
  constructor(t9, i10, r9) {
    super(t9, i10, r9);
    this._degraded = false;
    this._degradedAt = null;
    this._layerDefinitions = [];
    this.history = new ri();
    this.preferredLayer = "high";
    this.setVideoHandler(new Me(this));
  }
  setTrackId(t9) {
    this.bizTrackId = t9;
  }
  get trackId() {
    return this.bizTrackId || super.trackId;
  }
  get degraded() {
    return this._degraded;
  }
  get degradedAt() {
    return this._degradedAt;
  }
  setEnabled(t9) {
    return d(this, null, function* () {
      t9 !== this.enabled && (D(n5.prototype, this, "setEnabled").call(this, t9), this.videoHandler.updateSinks(true));
    });
  }
  setPreferredLayer(t9) {
    return d(this, null, function* () {
      if (t9 === "none") {
        o.w(`layer ${"none"} will be ignored`);
        return;
      }
      if (this.preferredLayer = t9, !!this.shouldSendVideoLayer(t9, "preferLayer")) {
        if (!this.hasSinks()) {
          o.d(`[Remote Track] ${this.logIdentifier}
        streamId=${this.stream.id} 
        trackId=${this.trackId}
        saving ${t9}, source=${this.source}
        Track does not have any sink`);
          return;
        }
        yield this.requestLayer(t9, "preferLayer"), this.pushInHistory(`uiPreferLayer-${t9}`);
      }
    });
  }
  getSimulcastLayer() {
    return this.stream.getSimulcastLayer();
  }
  getLayer() {
    return this.stream.getVideoLayer();
  }
  getPreferredLayer() {
    return this.preferredLayer;
  }
  replaceTrack(t9) {
    this.nativeTrack = t9.nativeTrack, t9.transceiver && (this.transceiver = t9.transceiver, this.stream.updateId(t9.stream.id)), this.videoHandler.updateSinks();
  }
  addSink(t9, i10 = true) {
    return d(this, null, function* () {
      B(this.nativeTrack) ? yield this.requestLayer(this.preferredLayer, "addSink") : (D(n5.prototype, this, "addSink").call(this, t9), i10 && (yield this.updateLayer("addSink"))), this.pushInHistory("uiSetLayer-high");
    });
  }
  removeSink(t9, i10 = true) {
    return d(this, null, function* () {
      D(n5.prototype, this, "removeSink").call(this, t9), i10 && (yield this.updateLayer("removeSink")), this._degraded = false, this.pushInHistory("uiSetLayer-none");
    });
  }
  getSimulcastDefinitions() {
    return [...this._layerDefinitions];
  }
  setSimulcastDefinitons(t9) {
    this._layerDefinitions = t9;
  }
  setLayerFromServer(t9) {
    this._degraded = this.enabled && (t9.publisher_degraded || t9.subscriber_degraded) && t9.current_layer === "none", this._degradedAt = this._degraded ? new Date() : this._degradedAt;
    let i10 = t9.current_layer;
    return o.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id} 
      trackId=${this.trackId}
      layer update from sfu
      currLayer=${t9.current_layer}
      preferredLayer=${t9.expected_layer}
      sub_degraded=${t9.subscriber_degraded}
      pub_degraded=${t9.publisher_degraded}
      isDegraded=${this._degraded}`), this.stream.setVideoLayerLocally(i10, this.logIdentifier, "setLayerFromServer"), this.pushInHistory(`sfuLayerUpdate-${i10}`), this._degraded;
  }
  updateLayer(t9) {
    return d(this, null, function* () {
      let i10 = this.degraded || !this.enabled || !this.hasSinks() ? "none" : this.preferredLayer;
      this.shouldSendVideoLayer(i10, t9) && (yield this.requestLayer(i10, t9));
    });
  }
  pushInHistory(t9) {
  }
  requestLayer(t9, i10) {
    return d(this, null, function* () {
      try {
        let r9 = yield this.stream.setVideoLayer(t9, this.trackId, this.logIdentifier, i10);
        return o.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id}
      trackId=${this.trackId}
      Requested layer ${t9}, source=${i10}`), r9;
      } catch (r9) {
        throw o.d(`[Remote Track] ${this.logIdentifier} 
      streamId=${this.stream.id}
      trackId=${this.trackId}
      Failed to set layer ${t9}, source=${i10}
      error=${r9.message}`), r9;
      }
    });
  }
  shouldSendVideoLayer(t9, i10) {
    let r9 = this.getLayer();
    return this.degraded && t9 === "none" ? true : r9 === t9 ? (o.d(`[Remote Track] ${this.logIdentifier}`, `Not sending update, already on layer ${t9}, source=${i10}`), false) : true;
  }
};
var ri = class {
  constructor() {
    this.history = [];
  }
  push(e14) {
    e14.time = new Date().toISOString().split("T")[1], this.history.push(e14);
  }
};
var se = class extends de {
  constructor() {
    super(...arguments);
    this.TAG = "[HMSLocalStream]";
    this.connection = null;
  }
  setConnection(t9) {
    this.connection = t9;
  }
  addTransceiver(t9, i10) {
    let r9 = this.connection.addTransceiver(t9.getTrackBeingSent(), { streams: [this.nativeStream], direction: "sendonly", sendEncodings: this.getTrackEncodings(t9, i10) });
    return this.setPreferredCodec(r9, t9.nativeTrack.kind), t9.transceiver = r9, r9;
  }
  setMaxBitrateAndFramerate(t9) {
    return d(this, null, function* () {
      var i10;
      yield (i10 = this.connection) == null ? void 0 : i10.setMaxBitrateAndFramerate(t9);
    });
  }
  setPreferredCodec(t9, i10) {
  }
  replaceStreamTrack(t9, i10) {
    this.nativeStream.addTrack(i10), this.nativeStream.removeTrack(t9), o.d(this.TAG, "Native stream tracks after replace", this.nativeStream.getAudioTracks().map(X), `prev Track - ${X(t9)}`, `new Track - ${X(i10)}`);
  }
  replaceSenderTrack(t9, i10) {
    return d(this, null, function* () {
      if (!this.connection || this.connection.connectionState === "closed") {
        o.d(this.TAG, "publish connection is not initialised or closed");
        return;
      }
      let r9 = this.connection.getSenders().find((s11) => s11.track && s11.track.id === t9.id);
      if (r9 === void 0) {
        o.w(this.TAG, `No sender found for trackId=${t9.id}`);
        return;
      }
      yield r9.replaceTrack(i10);
    });
  }
  removeSender(t9) {
    var s11, a4;
    if (!this.connection || this.connection.connectionState === "closed") {
      o.d(this.TAG, "publish connection is not initialised or closed");
      return;
    }
    let i10 = (s11 = t9.transceiver) == null ? void 0 : s11.sender;
    if (!i10) {
      o.w(this.TAG, `No sender found for trackId=${t9.trackId}`);
      return;
    }
    (a4 = this.connection) == null || a4.removeTrack(i10);
    let r9 = this.tracks.indexOf(t9);
    r9 !== -1 ? this.tracks.splice(r9, 1) : o.w(this.TAG, `Cannot find ${t9.trackId} in locally stored tracks`);
  }
  getTrackEncodings(t9, i10) {
    let r9 = [];
    if (t9 instanceof F)
      if (i10.length > 0)
        o.d(this.TAG, "Simulcast enabled with layers", i10), r9.push(...i10);
      else {
        let s11 = { active: this.nativeStream.active };
        t9.settings.maxBitrate && !ce && (s11.maxBitrate = t9.settings.maxBitrate), r9.push(s11);
      }
    return r9;
  }
};
var K = class extends de {
  constructor(t9, i10) {
    super(t9);
    this.audio = true;
    this.video = "none";
    this.connection = i10;
  }
  setAudio(t9, i10, r9) {
    return d(this, null, function* () {
      this.audio !== t9 && (this.audio = t9, o.d(`[Remote stream] ${r9 || ""} 
    streamId=${this.id}
    trackId=${i10}
    subscribing audio - ${this.audio}`), yield this.connection.sendOverApiDataChannelWithResponse({ params: { subscribed: this.audio, track_id: i10 }, method: "prefer-audio-track-state" }));
    });
  }
  setVideoLayerLocally(t9, i10, r9) {
    this.video = t9, o.d(`[Remote stream] ${i10}
    streamId=${this.id}
    source: ${r9}
    Setting layer field to=${t9}`);
  }
  setVideoLayer(t9, i10, r9, s11) {
    return o.d(`[Remote stream] ${r9} 
      streamId=${this.id}
      trackId=${i10} 
      source: ${s11} request ${t9} layer`), this.setVideoLayerLocally(t9, r9, s11), this.connection.sendOverApiDataChannelWithResponse({ params: { max_spatial_layer: this.video, track_id: i10 }, method: "prefer-video-track-state" });
  }
  getSimulcastLayer() {
    return this.video;
  }
  getVideoLayer() {
    return this.video;
  }
  isAudioSubscribed() {
    return this.audio;
  }
};
var Ki = "[VALIDATIONS]";
function Q(n18) {
  return n18 != null;
}
var si = () => {
  if (!Q(RTCPeerConnection)) {
    let n18 = p.GenericErrors.MissingRTCPeerConnection();
    throw o.e(Ki, n18), n18;
  }
};
var ai = () => {
  if (!Q(navigator.mediaDevices)) {
    let n18 = p.GenericErrors.MissingMediaDevices();
    throw o.e(Ki, n18), n18;
  }
};
var qi = (n18, e14, t9, i10) => d(void 0, null, function* () {
  var a4;
  let r9, s11 = {};
  if ((a4 = e14.transceiver) != null && a4.sender.track) {
    try {
      r9 = yield e14.transceiver.sender.getStats();
      let c5 = {}, l5 = {}, h4 = {};
      r9 == null || r9.forEach((u5) => {
        switch (u5.type) {
          case "outbound-rtp":
            l5[u5.id] = u5;
            break;
          case "remote-inbound-rtp":
            h4[u5.ssrc] = u5;
            break;
          case "codec":
            c5[u5.id] = u5.mimeType;
            break;
          default:
            break;
        }
      }), Object.keys(g({}, l5)).forEach((u5) => {
        var G3;
        let m4 = (G3 = l5[u5]) == null ? void 0 : G3.codecId, S4 = m4 ? c5[m4] : void 0, T2;
        S4 && (T2 = S4.substring(S4.indexOf("/") + 1));
        let y2 = l5[u5], b4 = h4[y2.ssrc];
        s11[u5] = M(g({}, y2), { bitrate: ci("bytesSent", y2, i10 == null ? void 0 : i10[u5]), packetsLost: b4 == null ? void 0 : b4.packetsLost, jitter: b4 == null ? void 0 : b4.jitter, roundTripTime: b4 == null ? void 0 : b4.roundTripTime, totalRoundTripTime: b4 == null ? void 0 : b4.totalRoundTripTime, peerName: t9, peerID: e14.peerId, enabled: e14.enabled, codec: T2 });
      });
    } catch (c5) {
      n18.analytics.publish(E.rtcStatsFailed(p.WebrtcErrors.StatsFailed("TRACK", `Error getting local track stats ${e14.trackId} - ${c5.message}`))), o.w("[HMSWebrtcStats]", "Error in getting local track stats", e14, c5, c5.name);
    }
    return s11;
  }
});
var ji = (n18, e14, t9, i10) => d(void 0, null, function* () {
  var l5;
  let r9;
  try {
    r9 = yield (l5 = e14.transceiver) == null ? void 0 : l5.receiver.getStats();
  } catch (h4) {
    n18.analytics.publish(E.rtcStatsFailed(p.WebrtcErrors.StatsFailed("TRACK", `Error getting remote track stats ${e14.trackId} - ${h4.message}`))), o.w("[HMSWebrtcStats]", "Error in getting remote track stats", e14, h4);
  }
  let s11 = Br(r9), a4 = ci("bytesReceived", s11, i10), c5 = ni("packetsLost", s11, i10);
  return s11 != null && s11.remote && Object.assign(s11.remote, { packetsLostRate: ni("packetsLost", s11.remote, i10 == null ? void 0 : i10.remote) }), s11 && Object.assign(s11, { bitrate: a4, packetsLostRate: c5, peerId: e14.peerId, enabled: e14.enabled, peerName: t9, codec: s11.codec });
});
var Br = (n18) => {
  let e14, t9, i10 = {};
  n18 == null || n18.forEach((a4) => {
    switch (a4.type) {
      case "inbound-rtp":
        e14 = a4;
        break;
      case "outbound-rtp":
        e14 = a4;
        break;
      case "remote-inbound-rtp":
        t9 = a4;
        break;
      case "codec":
        i10[a4.id] = a4.mimeType;
        break;
      default:
        break;
    }
  });
  let r9 = e14 != null && e14.codecId ? i10[e14.codecId] : void 0, s11;
  return r9 && (s11 = r9.substring(r9.indexOf("/") + 1)), e14 && Object.assign(e14, { remote: t9, codec: s11 });
};
var oi = (n18, e14, t9) => {
  let i10 = $r(e14), r9 = ci(n18 === "publish" ? "bytesSent" : "bytesReceived", i10, t9 && t9[n18]);
  return i10 && Object.assign(i10, { bitrate: r9 });
};
var $r = (n18) => {
  let e14;
  return n18 == null || n18.forEach((t9) => {
    t9.type === "transport" && (e14 = n18 == null ? void 0 : n18.get(t9.selectedCandidatePairId));
  }), e14 || n18 == null || n18.forEach((t9) => {
    t9.type === "candidate-pair" && t9.selected && (e14 = t9);
  }), e14;
};
var Qi = (n18) => {
  let e14 = { packetsLost: 0, jitter: 0 };
  return n18 == null || n18.forEach((t9) => {
    t9.packetsLost && (e14.packetsLost += t9.packetsLost), t9.jitter > e14.jitter && (e14.jitter = t9.jitter);
  }), e14;
};
var Ji = (n18, e14) => Array.from(new Set(n18.concat(e14)));
var ci = (n18, e14, t9) => ni(n18, e14, t9) * 8;
var ni = (n18, e14, t9) => {
  let i10 = e14 && e14[n18], r9 = t9 ? t9[n18] : null;
  return [e14, t9, Q(i10), Q(r9)].every((a4) => !!a4) ? di(i10, r9, e14 == null ? void 0 : e14.timestamp, t9 == null ? void 0 : t9.timestamp) * 1e3 : 0;
};
var di = (n18, e14, t9, i10) => Q(n18) && Q(e14) && t9 && i10 ? (n18 - e14) / (t9 - i10) : 0;
var xe = class {
  constructor(e14, t9, i10) {
    this.getStats = e14;
    this.store = t9;
    this.eventBus = i10;
    this.TAG = "[HMSWebrtcStats]";
    this.peerStats = {};
    this.remoteTrackStats = {};
    this.localTrackStats = {};
    this.getLocalPeerStats = () => this.peerStats[this.localPeerID];
    this.getRemoteTrackStats = (e15) => this.remoteTrackStats[e15];
    this.getLocalTrackStats = () => this.localTrackStats;
    this.updateStats = () => d(this, null, function* () {
      yield this.updateLocalPeerStats(), yield this.updateLocalTrackStats(), yield this.updateRemoteTrackStats();
    });
    this.updateLocalPeerStats = () => d(this, null, function* () {
      var u5, m4, S4, T2, y2, b4;
      let e15 = this.getLocalPeerStats(), t10;
      try {
        t10 = yield (m4 = (u5 = this.getStats).publish) == null ? void 0 : m4.call(u5);
      } catch (G3) {
        this.eventBus.analytics.publish(E.rtcStatsFailed(p.WebrtcErrors.StatsFailed("PUBLISH", G3.message))), o.w(this.TAG, "Error in getting publish stats", G3);
      }
      let i11 = t10 && oi("publish", t10, e15), r10;
      try {
        r10 = yield (T2 = (S4 = this.getStats).subscribe) == null ? void 0 : T2.call(S4);
      } catch (G3) {
        this.eventBus.analytics.publish(E.rtcStatsFailed(p.WebrtcErrors.StatsFailed("SUBSCRIBE", G3.message))), o.w(this.TAG, "Error in getting subscribe stats", G3);
      }
      let s11 = r10 && oi("subscribe", r10, e15), { packetsLost: a4, jitter: c5 } = Qi(r10), l5 = di(a4, (y2 = e15 == null ? void 0 : e15.subscribe) == null ? void 0 : y2.packetsLost, s11 == null ? void 0 : s11.timestamp, (b4 = e15 == null ? void 0 : e15.subscribe) == null ? void 0 : b4.timestamp), h4 = s11 && Object.assign(s11, { packetsLostRate: l5, jitter: c5, packetsLost: a4 });
      this.peerStats[this.localPeerID] = { publish: i11, subscribe: h4 };
    });
    this.updateRemoteTrackStats = () => d(this, null, function* () {
      var i11;
      let e15 = Array.from(this.store.getTracksMap().values()).filter((r10) => r10 instanceof H || r10 instanceof re), t10 = e15.map((r10) => r10.trackId);
      Object.keys(this.remoteTrackStats).forEach((r10) => {
        t10.includes(r10) || delete this.remoteTrackStats[r10];
      });
      for (let r10 of e15) {
        let s11 = r10.peerId && ((i11 = this.store.getPeerById(r10.peerId)) == null ? void 0 : i11.name), a4 = this.getRemoteTrackStats(r10.trackId), c5 = yield ji(this.eventBus, r10, s11, a4);
        c5 && (this.remoteTrackStats[r10.trackId] = c5);
      }
    });
    this.updateLocalTrackStats = () => d(this, null, function* () {
      var i11;
      let e15 = this.store.getLocalPeerTracks().reduce((r10, s11) => (r10[s11.getTrackIDBeingSent()] = s11, r10), {}), t10 = Ji(Object.keys(this.localTrackStats), Object.keys(e15));
      for (let r10 of t10) {
        let s11 = e15[r10];
        if (s11) {
          let a4 = (i11 = this.store.getLocalPeer()) == null ? void 0 : i11.name, c5 = yield qi(this.eventBus, s11, a4, this.localTrackStats[r10]);
          c5 && (this.localTrackStats[r10] = c5);
        } else
          delete this.localTrackStats[r10];
      }
    });
    var r9;
    this.localPeerID = (r9 = this.store.getLocalPeer()) == null ? void 0 : r9.peerId;
  }
};
var Fe = class {
  constructor(e14, t9, i10, r9) {
    this.store = e14;
    this.eventBus = t9;
    this.publishConnection = i10;
    this.subscribeConnection = r9;
    this.TAG = "[HMSWebrtcInternals]";
    this.interval = 1e3;
    this.isMonitored = false;
    this.handleStatsUpdate = () => d(this, null, function* () {
      var e15;
      yield (e15 = this.hmsStats) == null ? void 0 : e15.updateStats(), this.eventBus.statsUpdate.publish(this.hmsStats);
    });
  }
  getPublishPeerConnection() {
    return this.publishConnection;
  }
  getSubscribePeerConnection() {
    return this.subscribeConnection;
  }
  getCurrentStats() {
    return this.hmsStats;
  }
  onStatsChange(e14) {
    return this.eventBus.statsUpdate.subscribe(e14), () => {
      this.eventBus.statsUpdate.unsubscribe(e14);
    };
  }
  setPeerConnections({ publish: e14, subscribe: t9 }) {
    var i10, r9;
    this.publishConnection = e14, this.subscribeConnection = t9, this.hmsStats = new xe({ publish: (i10 = this.publishConnection) == null ? void 0 : i10.getStats.bind(this.publishConnection), subscribe: (r9 = this.subscribeConnection) == null ? void 0 : r9.getStats.bind(this.subscribeConnection) }, this.store, this.eventBus);
  }
  start() {
    return d(this, null, function* () {
      if (this.isMonitored) {
        o.d(this.TAG, "Already started");
        return;
      }
      this.stop(), this.isMonitored = true, o.d(this.TAG, "Starting Webrtc Stats Monitor"), this.startLoop().then(() => o.d(this.TAG, "Stopping Webrtc Stats Monitor")).catch((e14) => {
        this.eventBus.analytics.publish(E.rtcStatsFailed(p.WebrtcErrors.StatsFailed("PUBLISH", e14.message))), o.e(this.TAG, e14.message);
      });
    });
  }
  stop() {
    this.isMonitored = false;
  }
  startLoop() {
    return d(this, null, function* () {
      for (; this.isMonitored; )
        yield this.handleStatsUpdate(), yield R(this.interval);
    });
  }
  cleanup() {
    this.stop(), this.eventBus.statsUpdate.removeAllListeners();
  }
};
var Kr = qt().version;
o.d("adapter", `${adapter_core_default.browserDetails.browser} v${adapter_core_default.browserDetails.version}`);
o.d("sdk version", Kr);
var li = { isAudioMuted: false, isVideoMuted: false, audioInputDeviceId: "default", audioOutputDeviceId: "default", videoDeviceId: "default" };
var $;
var ut;
var j = class n6 {
  constructor(e14, t9, i10, r9, s11) {
    this.store = e14;
    this.observer = t9;
    this.deviceManager = i10;
    this.eventBus = r9;
    this.analyticsTimer = s11;
    this.TAG = "[LocalTrackManager]";
    this.setScreenCaptureHandleConfig();
  }
  getTracksToPublish() {
    return d(this, arguments, function* (e14 = li) {
      let t9 = this.getAVTrackSettings(e14);
      if (!t9)
        return [];
      let i10 = !!t9.audio, r9 = !!t9.video, s11 = [], { videoTrack: a4, audioTrack: c5 } = yield this.updateCurrentLocalTrackSettings(t9), l5 = (a4 == null ? void 0 : a4.stream) || (c5 == null ? void 0 : c5.stream), h4 = !!(a4 && this.store.getTrackById(a4.trackId)), u5 = !!(c5 && this.store.getTrackById(c5.trackId));
      if (h4 && u5)
        return [];
      let m4 = { audio: i10 && !c5 && (e14.isAudioMuted ? "empty" : true), video: r9 && !a4 && (e14.isVideoMuted ? "empty" : true) };
      m4.audio && this.analyticsTimer.start("local_audio_track_time"), m4.video && this.analyticsTimer.start("local_video_track_time");
      try {
        o.d(this.TAG, "Init Local Tracks", { fetchTrackOptions: m4 }), s11 = yield this.getLocalTracks(m4, t9, l5);
      } catch (S4) {
        s11 = yield this.retryGetLocalTracks(S4, t9, m4, l5);
      }
      return m4.audio && this.analyticsTimer.end("local_audio_track_time"), m4.video && this.analyticsTimer.end("local_video_track_time"), a4 && r9 && !h4 && s11.push(a4), c5 && i10 && !u5 && s11.push(c5), s11;
    });
  }
  getLocalTracks() {
    return d(this, arguments, function* (e14 = { audio: true, video: true }, t9, i10) {
      try {
        let r9 = yield this.getNativeLocalTracks(e14, t9);
        return this.createHMSLocalTracks(r9, t9, i10);
      } catch (r9) {
        throw this.eventBus.analytics.publish(E.publish({ devices: this.deviceManager.getDevices(), error: r9, settings: t9 })), r9;
      }
    });
  }
  getNativeLocalTracks() {
    return d(this, arguments, function* (e14 = { audio: false, video: false }, t9) {
      let i10 = new Ee(e14.video === true ? t9.video : null, e14.audio === true ? t9.audio : null, t9.simulcast), r9 = [];
      return (i10.audio || i10.video) && r9.push(...yield this.getAVTracks(i10)), r9.push(...this.getEmptyTracks(e14)), r9;
    });
  }
  getLocalScreen(e14) {
    return d(this, null, function* () {
      var m4;
      let t9 = yield this.getOrDefaultScreenshareConfig(e14), i10 = this.getScreenshareSettings(t9.videoOnly), r9 = { video: M(g({}, i10 == null ? void 0 : i10.video.toConstraints(true)), { displaySurface: t9.displaySurface }), preferCurrentTab: t9.preferCurrentTab, selfBrowserSurface: t9.selfBrowserSurface, surfaceSwitching: t9.surfaceSwitching, systemAudio: t9.systemAudio };
      if (i10 != null && i10.audio) {
        let S4 = (m4 = i10 == null ? void 0 : i10.audio) == null ? void 0 : m4.toConstraints();
        delete S4.advanced, r9.audio = M(g({}, S4), { autoGainControl: false, noiseSuppression: false, googAutoGainControl: false, echoCancellation: false });
      }
      let s11;
      try {
        o.d("retrieving screenshare with ", { config: t9 }, { constraints: r9 }), s11 = yield navigator.mediaDevices.getDisplayMedia(r9);
      } catch (S4) {
        o.w(this.TAG, "error in getting screenshare - ", S4);
        let T2 = V(S4, "screen");
        throw this.eventBus.analytics.publish(E.publish({ error: T2, devices: this.deviceManager.getDevices(), settings: new Ee(i10 == null ? void 0 : i10.video, i10 == null ? void 0 : i10.audio, false) })), T2;
      }
      let a4 = [], c5 = new se(s11), l5 = s11.getVideoTracks()[0], h4 = new F(c5, l5, "screen", this.eventBus, i10 == null ? void 0 : i10.video);
      h4.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(), "screen"));
      try {
        let S4 = this.validateCurrentTabCapture(h4, t9.forceCurrentTab);
        h4.isCurrentTab = S4, yield h4.cropTo(t9.cropTarget);
      } catch (S4) {
        throw s11.getTracks().forEach((T2) => T2.stop()), S4;
      }
      a4.push(h4);
      let u5 = s11.getAudioTracks()[0];
      if (u5) {
        let S4 = new pe(c5, u5, "screen", this.eventBus, i10 == null ? void 0 : i10.audio);
        a4.push(S4);
      }
      return o.v(this.TAG, "getLocalScreen", a4), a4;
    });
  }
  setScreenCaptureHandleConfig(e14) {
    var t9;
    !((t9 = navigator.mediaDevices) != null && t9.setCaptureHandleConfig) || this.isInIframe() || (e14 = e14 || {}, Object.assign(e14, { handle: v4_default(), exposeOrigin: false, permittedOrigins: [window.location.origin] }), o.d("setting capture handle - ", e14.handle), navigator.mediaDevices.setCaptureHandleConfig(e14), this.captureHandleIdentifier = e14.handle);
  }
  validateCurrentTabCapture(e14, t9) {
    let i10 = e14.getCaptureHandle(), r9 = !!(this.captureHandleIdentifier && (i10 == null ? void 0 : i10.handle) === this.captureHandleIdentifier);
    if (t9 && !r9)
      throw o.e(this.TAG, "current tab was not shared with forceCurrentTab as true"), p.TracksErrors.CurrentTabNotShared();
    return r9;
  }
  requestPermissions() {
    return d(this, null, function* () {
      try {
        (yield navigator.mediaDevices.getUserMedia({ audio: true, video: true })).getTracks().forEach((t9) => t9.stop());
      } catch (e14) {
        o.e(this.TAG, e14);
      }
    });
  }
  static getEmptyVideoTrack(e14) {
    var c5, l5, h4;
    let t9 = ((c5 = e14 == null ? void 0 : e14.getSettings()) == null ? void 0 : c5.width) || 320, i10 = ((l5 = e14 == null ? void 0 : e14.getSettings()) == null ? void 0 : l5.height) || 240, r9 = 1;
    $ || ($ = document.createElement("canvas"), $.width = t9, $.height = i10, (h4 = $.getContext("2d")) == null || h4.fillRect(0, 0, t9, i10)), ut || (ut = setInterval(() => {
      let u5 = $ == null ? void 0 : $.getContext("2d");
      u5 && u5.fillRect(0, 0, 1, 1);
    }, 1e3 / r9));
    let a4 = $.captureStream(r9).getVideoTracks()[0];
    return a4.enabled = false, a4;
  }
  static getEmptyAudioTrack() {
    let e14 = ee.getAudioContext(), t9 = e14.createOscillator(), i10 = e14.createMediaStreamDestination();
    t9.connect(i10), t9.start();
    let r9 = i10.stream.getAudioTracks()[0];
    return r9.enabled = false, r9;
  }
  static cleanup() {
    clearInterval(ut), ut = void 0, $ = void 0;
  }
  getAVTracks(e14) {
    return d(this, null, function* () {
      try {
        let t9 = yield navigator.mediaDevices.getUserMedia({ audio: e14.audio ? e14.audio.toConstraints() : false, video: e14.video ? e14.video.toConstraints() : false });
        return t9.getVideoTracks().concat(t9.getAudioTracks());
      } catch (t9) {
        yield this.deviceManager.init();
        let i10 = !!(!this.deviceManager.hasWebcamPermission && e14.video), r9 = !!(!this.deviceManager.hasMicrophonePermission && e14.audio), s11 = this.getErrorType(i10, r9);
        throw V(t9, s11);
      }
    });
  }
  getAVTrackSettings(e14) {
    let t9 = this.getAudioSettings(e14), i10 = this.getVideoSettings(e14);
    return !t9 && !i10 ? null : new _e().video(i10).audio(t9).build();
  }
  isInIframe() {
    try {
      return window.self !== window.top;
    } catch (e14) {
      return true;
    }
  }
  retryGetLocalTracks(e14, t9, i10, r9) {
    return d(this, null, function* () {
      if (e14 instanceof v && e14.action === "TRACK") {
        this.observer.onFailure(e14);
        let s11 = e14.code === f2.TracksErrors.OVER_CONSTRAINED, a4 = e14.message.includes("audio"), c5 = e14.message.includes("video");
        if (s11) {
          let l5 = new _e().video(new he()).audio(new ue()).build();
          o.w(this.TAG, "Fetch AV Tracks failed with overconstrained error", { fetchTrackOptions: i10 }, { error: e14 });
          try {
            return yield this.getLocalTracks(i10, l5, r9);
          } catch (h4) {
            let u5 = h4 instanceof v ? h4.nativeError : h4, m4 = h4;
            if ((u5 == null ? void 0 : u5.name) === "OverconstrainedError") {
              let S4 = p.TracksErrors.GenericTrack("TRACK", "Overconstrained error after dropping all constraints");
              S4.addNativeError(u5), m4 = S4;
            }
            return yield this.retryGetLocalTracks(m4, t9, i10, r9);
          }
        }
        i10.audio = a4 ? "empty" : i10.audio, i10.video = c5 ? "empty" : i10.video, o.w(this.TAG, "Fetch AV Tracks failed", { fetchTrackOptions: i10 }, e14);
        try {
          return yield this.getLocalTracks(i10, t9, r9);
        } catch (l5) {
          return o.w(this.TAG, "Fetch empty tacks failed", l5), i10.audio = i10.audio && "empty", i10.video = i10.video && "empty", this.observer.onFailure(l5), yield this.getLocalTracks(i10, t9, r9);
        }
      } else
        return o.w(this.TAG, "Fetch AV Tracks failed - unknown exception", e14), this.observer.onFailure(e14), [];
    });
  }
  getErrorType(e14, t9) {
    return e14 && t9 ? "audio, video" : e14 ? "video" : t9 ? "audio" : "unknown(video or audio)";
  }
  getEmptyTracks(e14) {
    let t9 = [];
    return e14.audio === "empty" && t9.push(n6.getEmptyAudioTrack()), e14.video === "empty" && t9.push(n6.getEmptyVideoTrack()), t9;
  }
  updateCurrentLocalTrackSettings(e14) {
    return d(this, null, function* () {
      let t9 = this.store.getLocalPeerTracks(), i10 = t9.find((c5) => c5.type === "video" && c5.source === "regular"), r9 = t9.find((c5) => c5.type === "audio" && c5.source === "regular"), s11 = t9.find((c5) => c5.type === "video" && c5.source === "screen");
      e14 != null && e14.video && (yield i10 == null ? void 0 : i10.setSettings(e14.video)), e14 != null && e14.audio && (yield r9 == null ? void 0 : r9.setSettings(e14.audio));
      let a4 = this.getScreenshareSettings(true);
      return a4 != null && a4.video && (yield s11 == null ? void 0 : s11.setSettings(a4 == null ? void 0 : a4.video)), { videoTrack: i10, audioTrack: r9 };
    });
  }
  getAudioSettings(e14) {
    var a4;
    let t9 = this.store.getPublishParams();
    if (!t9 || !((a4 = t9.allowed) != null && a4.includes("audio")))
      return null;
    let i10 = this.store.getLocalPeer(), r9 = i10 == null ? void 0 : i10.audioTrack, s11 = (r9 == null ? void 0 : r9.settings.deviceId) || e14.audioInputDeviceId;
    return new x().codec(t9.audio.codec).maxBitrate(t9.audio.bitRate).deviceId(s11 || li.audioInputDeviceId).build();
  }
  getVideoSettings(e14) {
    var c5;
    let t9 = this.store.getPublishParams();
    if (!t9 || !((c5 = t9.allowed) != null && c5.includes("video")))
      return null;
    let i10 = this.store.getLocalPeer(), r9 = i10 == null ? void 0 : i10.videoTrack, s11 = (r9 == null ? void 0 : r9.settings.deviceId) || e14.videoDeviceId, a4 = t9.video;
    return new N().codec(a4.codec).maxBitrate(a4.bitRate).maxFramerate(a4.frameRate).setWidth(a4.width).setHeight(a4.height).deviceId(s11 || li.videoDeviceId).build();
  }
  getScreenshareSettings(e14 = false) {
    var r9;
    let t9 = this.store.getPublishParams();
    if (!t9 || !((r9 = t9.allowed) != null && r9.includes("screen")))
      return null;
    let i10 = t9.screen;
    return { video: new N().maxBitrate(i10.bitRate, false).codec(i10.codec).maxFramerate(i10.frameRate).setWidth(i10.width).setHeight(i10.height).build(), audio: e14 ? void 0 : new x().build() };
  }
  getOrDefaultScreenshareConfig(e14) {
    return d(this, null, function* () {
      var i10;
      let t9 = Object.assign({ videoOnly: false, audioOnly: false, forceCurrentTab: false, preferCurrentTab: false, selfBrowserSurface: "exclude", surfaceSwitching: "include", systemAudio: "exclude", displaySurface: "monitor" }, e14 || {});
      return t9.forceCurrentTab && (t9.videoOnly = true, t9.preferCurrentTab = true, t9.selfBrowserSurface = "include", t9.surfaceSwitching = "exclude"), t9.preferCurrentTab && (t9.selfBrowserSurface = "include", t9.displaySurface = void 0), t9.cropElement && ((i10 = window.CropTarget) != null && i10.fromElement) && (t9.cropTarget = yield window.CropTarget.fromElement(t9.cropElement)), t9;
    });
  }
  createHMSLocalTracks(e14, t9, i10) {
    let r9 = e14.find((c5) => c5.kind === "video"), s11 = e14.find((c5) => c5.kind === "audio");
    i10 ? e14.forEach((c5) => i10 == null ? void 0 : i10.nativeStream.addTrack(c5)) : i10 = new se(new MediaStream(e14));
    let a4 = [];
    if (s11 && (t9 != null && t9.audio)) {
      let c5 = new pe(i10, s11, "regular", this.eventBus, t9.audio);
      a4.push(c5);
    }
    if (r9 && (t9 != null && t9.video)) {
      let c5 = new F(i10, r9, "regular", this.eventBus, t9.video);
      c5.setSimulcastDefinitons(this.store.getSimulcastDefinitionsForPeer(this.store.getLocalPeer(), "regular")), a4.push(c5);
    }
    return a4;
  }
};
var ht = class {
  constructor(e14, t9) {
    this.eventBus = e14;
    this.listener = t9;
    this.TAG = "[NetworkTestManager]";
    this.controller = new AbortController();
    this.start = (e15) => d(this, null, function* () {
      var h4;
      if (!e15)
        return;
      let { url: t10, timeout: i10, scoreMap: r9 } = e15, s11 = this.controller.signal, a4 = Date.now(), c5 = 0, l5 = R(i10).then(() => {
        this.controller.abort();
      });
      try {
        let m4 = (h4 = (yield fetch(`${t10}?${Date.now()}`, { signal: s11 })).body) == null ? void 0 : h4.getReader();
        if (!m4)
          throw Error("unable to process request");
        let S4 = () => d(this, null, function* () {
          if (m4)
            try {
              let T2 = false;
              for (; !T2; ) {
                let { value: y2, done: b4 } = yield m4.read();
                T2 = b4, y2 && (c5 += y2.byteLength, this.sendScore({ scoreMap: r9, downloadedSize: c5, startTime: a4 }));
              }
            } catch (T2) {
              T2.name !== "AbortError" && o.d(this.TAG, T2);
            }
        });
        return Promise.race([S4(), l5]).then(() => {
          this.sendScore({ scoreMap: r9, downloadedSize: c5, startTime: a4, finished: true });
        }).catch((T2) => {
          o.d(this.TAG, T2), this.updateScoreToListener(0), this.eventBus.analytics.publish(E.previewNetworkQuality({ error: T2.message }));
        });
      } catch (u5) {
        u5.name !== "AbortError" ? (o.d(this.TAG, u5), this.updateScoreToListener(0), this.eventBus.analytics.publish(E.previewNetworkQuality({ error: u5.message }))) : o.d(this.TAG, u5);
      }
    });
    this.stop = () => {
      this.controller.signal.aborted || this.controller.abort();
    };
    this.sendScore = ({ scoreMap: e15, downloadedSize: t10, startTime: i10, finished: r9 = false }) => {
      let s11 = (Date.now() - i10) / 1e3, c5 = t10 / 1024 / s11 * 8, l5 = -1;
      for (let h4 in e15) {
        let u5 = e15[h4];
        c5 >= u5.low && (!u5.high || c5 <= u5.high) && (l5 = Number(h4));
      }
      this.updateScoreToListener(l5), r9 && this.eventBus.analytics.publish(E.previewNetworkQuality({ score: l5, downLink: c5.toFixed(2) }));
    };
  }
  updateScoreToListener(e14) {
    var t9, i10;
    e14 !== this.score && (this.score = e14, (i10 = (t9 = this.listener) == null ? void 0 : t9.onNetworkQuality) == null || i10.call(t9, e14));
  }
};
var Ge = class {
  constructor(e14, t9, i10, r9, s11, a4) {
    this.store = e14;
    this.transport = t9;
    this.deviceManager = i10;
    this.publish = r9;
    this.removeAuxiliaryTrack = s11;
    this.listener = a4;
    this.handleLocalPeerRoleUpdate = (i11) => d(this, [i11], function* ({ oldRole: e15, newRole: t10 }) {
      var s12;
      let r10 = this.store.getLocalPeer();
      r10 && (yield this.diffRolesAndPublishTracks({ oldRole: e15, newRole: t10 }), (s12 = this.listener) == null || s12.onPeerUpdate(8, r10));
    });
    this.diffRolesAndPublishTracks = (i11) => d(this, [i11], function* ({ oldRole: e15, newRole: t10 }) {
      var T2, y2, b4, G3, gi2, Si, vi2;
      let r10 = new Set(e15.publishParams.allowed), s12 = new Set(t10.publishParams.allowed), a5 = this.removeTrack(r10, s12, "video"), c5 = this.removeTrack(r10, s12, "audio"), l5 = this.removeTrack(r10, s12, "screen"), h4 = this.hasSimulcastDifference((T2 = e15.publishParams.simulcast) == null ? void 0 : T2.video, (y2 = t10.publishParams.simulcast) == null ? void 0 : y2.video), u5 = this.hasSimulcastDifference((b4 = e15.publishParams.simulcast) == null ? void 0 : b4.screen, (G3 = t10.publishParams.simulcast) == null ? void 0 : G3.screen), m4 = (Si = (gi2 = this.store.getLocalPeer()) == null ? void 0 : gi2.videoTrack) == null ? void 0 : Si.enabled;
      yield this.removeAudioTrack(c5), yield this.removeVideoTracks(a5 || h4), yield this.removeScreenTracks(l5 || u5);
      let S4 = ((vi2 = this.store.getConfig()) == null ? void 0 : vi2.settings) || { isAudioMuted: true, isVideoMuted: true, audioInputDeviceId: "default", videoDeviceId: "default", audioOutputDeviceId: "default" };
      h4 && (S4.isVideoMuted = !m4), yield this.publish(S4), yield this.syncDevices(S4, t10);
    });
  }
  syncDevices(e14, t9) {
    return d(this, null, function* () {
      (!e14.isAudioMuted || !e14.isVideoMuted) && t9.publishParams.allowed.length > 0 && (yield this.deviceManager.init(true));
    });
  }
  removeVideoTracks(e14) {
    return d(this, null, function* () {
      var i10;
      if (!e14)
        return;
      let t9 = this.store.getLocalPeer();
      t9 != null && t9.videoTrack && (t9.videoTrack.isPublished ? yield this.transport.unpublish([t9.videoTrack]) : yield t9.videoTrack.cleanup(), (i10 = this.listener) == null || i10.onTrackUpdate(1, t9.videoTrack, t9), t9.videoTrack = void 0), yield this.removeAuxTracks((r9) => r9.source !== "screen" && r9.type === "video");
    });
  }
  removeAudioTrack(e14) {
    return d(this, null, function* () {
      var i10;
      if (!e14)
        return;
      let t9 = this.store.getLocalPeer();
      t9 != null && t9.audioTrack && (t9.audioTrack.isPublished ? yield this.transport.unpublish([t9.audioTrack]) : yield t9.audioTrack.cleanup(), (i10 = this.listener) == null || i10.onTrackUpdate(1, t9.audioTrack, t9), t9.audioTrack = void 0), yield this.removeAuxTracks((r9) => r9.source !== "screen" && r9.type === "audio");
    });
  }
  removeScreenTracks(e14) {
    return d(this, null, function* () {
      e14 && (yield this.removeAuxTracks((t9) => t9.source === "screen"));
    });
  }
  removeAuxTracks(e14) {
    return d(this, null, function* () {
      let t9 = this.store.getLocalPeer();
      if (t9 != null && t9.auxiliaryTracks) {
        let i10 = [...t9.auxiliaryTracks];
        for (let r9 of i10)
          e14(r9) && (yield this.removeAuxiliaryTrack(r9.trackId));
      }
    });
  }
  removeTrack(e14, t9, i10) {
    return e14.has(i10) && !t9.has(i10);
  }
  hasSimulcastDifference(e14, t9) {
    var i10, r9, s11;
    return !e14 && !t9 ? false : ((i10 = e14 == null ? void 0 : e14.layers) == null ? void 0 : i10.length) !== ((r9 = t9 == null ? void 0 : t9.layers) == null ? void 0 : r9.length) ? true : !!((s11 = e14 == null ? void 0 : e14.layers) != null && s11.some((a4) => {
      var l5;
      let c5 = (l5 = t9 == null ? void 0 : t9.layers) == null ? void 0 : l5.find((h4) => h4.rid === a4.rid);
      return (c5 == null ? void 0 : c5.maxBitrate) !== a4.maxBitrate || (c5 == null ? void 0 : c5.maxFramerate) !== a4.maxFramerate;
    }));
  }
};
var ui = class {
  constructor() {
    this.TAG = "[HTTPAnalyticsTransport]";
    this.failedEvents = new U("client-events");
    this.isConnected = true;
    this.env = null;
    this.websocketURL = "";
  }
  setEnv(e14) {
    this.env = e14, this.flushFailedEvents();
  }
  setWebsocketEndpoint(e14) {
    this.websocketURL = e14;
  }
  sendEvent(e14) {
    if (!this.env || !this.websocketURL) {
      this.addEventToStorage(e14);
      return;
    }
    let t9 = { event: e14.name, payload: e14.properties, event_id: String(e14.timestamp), peer: e14.metadata.peer, timestamp: e14.timestamp, device_id: e14.device_id, cluster: { websocket_url: this.websocketURL } }, i10 = this.env === "prod" ? $i : Wi;
    fetch(i10, { method: "POST", headers: { "Content-Type": "application/json", Authorization: `Bearer ${e14.metadata.token}`, user_agent_v2: e14.metadata.userAgent }, body: JSON.stringify(t9) }).then((r9) => {
      if (r9.status === 401) {
        this.removeFromStorage(e14);
        return;
      }
      if (r9.status !== 200)
        throw Error(r9.statusText);
      this.removeFromStorage(e14);
    }).catch((r9) => {
      o.v(this.TAG, "Failed to send event", r9, e14), this.addEventToStorage(e14);
    });
  }
  flushFailedEvents() {
    let e14 = this.failedEvents.get();
    e14 == null || e14.forEach((t9) => this.sendEvent(t9));
  }
  addEventToStorage(e14) {
    let t9 = this.failedEvents.get() || [];
    t9.find((i10) => i10.timestamp === e14.timestamp) || (t9.length === 100 && t9.shift(), t9.push(e14), this.failedEvents.set(t9));
  }
  removeFromStorage(e14) {
    let t9 = this.failedEvents.get() || [], i10 = t9.findIndex((r9) => r9.timestamp === e14.timestamp);
    i10 > -1 && (t9.splice(i10, 1), this.failedEvents.set(t9));
  }
};
var J = new ui();
var Ue = class {
  constructor() {
    this.knownRoles = {};
    this.peers = {};
    this.tracks = /* @__PURE__ */ new Map();
    this.peerTrackStates = {};
    this.speakers = [];
    this.roleDetailsArrived = false;
    this.env = "prod";
    this.simulcastEnabled = false;
    this.userAgent = Le(this.env);
    this.polls = /* @__PURE__ */ new Map();
  }
  getConfig() {
    return this.config;
  }
  setSimulcastEnabled(e14) {
    this.simulcastEnabled = e14;
  }
  getEnv() {
    return this.env;
  }
  getPublishParams() {
    let e14 = this.getLocalPeer(), t9 = (e14 == null ? void 0 : e14.asRole) || (e14 == null ? void 0 : e14.role);
    return t9 == null ? void 0 : t9.publishParams;
  }
  getRoom() {
    return this.room;
  }
  getPolicyForRole(e14) {
    return this.knownRoles[e14];
  }
  getKnownRoles() {
    return this.knownRoles;
  }
  getTemplateAppData() {
    return this.templateAppData;
  }
  getLocalPeer() {
    if (this.localPeerId && this.peers[this.localPeerId])
      return this.peers[this.localPeerId];
  }
  getRemotePeers() {
    return Object.values(this.peers).filter((e14) => !e14.isLocal);
  }
  getPeers() {
    return Object.values(this.peers);
  }
  getPeerMap() {
    return this.peers;
  }
  getPeerById(e14) {
    if (this.peers[e14])
      return this.peers[e14];
  }
  getTracksMap() {
    return this.tracks;
  }
  getTracks() {
    return Array.from(this.tracks.values());
  }
  getVideoTracks() {
    return this.getTracks().filter((e14) => e14.type === "video");
  }
  getRemoteVideoTracks() {
    return this.getTracks().filter((e14) => e14 instanceof H);
  }
  getAudioTracks() {
    return this.getTracks().filter((e14) => e14.type === "audio");
  }
  getPeerTracks(e14) {
    let t9 = e14 ? this.peers[e14] : void 0, i10 = [];
    return t9 != null && t9.videoTrack && i10.push(t9.videoTrack), t9 != null && t9.audioTrack && i10.push(t9.audioTrack), i10.concat((t9 == null ? void 0 : t9.auxiliaryTracks) || []);
  }
  getLocalPeerTracks() {
    return this.getPeerTracks(this.localPeerId);
  }
  hasTrack(e14) {
    return this.tracks.has(e14);
  }
  getTrackById(e14) {
    var r9, s11;
    let t9 = Array.from(this.tracks.values()).find((a4) => a4.trackId === e14);
    if (t9)
      return t9;
    let i10 = this.getLocalPeer();
    if (i10) {
      if ((r9 = i10.audioTrack) != null && r9.isPublishedTrackId(e14))
        return i10.audioTrack;
      if ((s11 = i10.videoTrack) != null && s11.isPublishedTrackId(e14))
        return i10.videoTrack;
    }
  }
  getPeerByTrackId(e14) {
    let t9 = Array.from(this.tracks.values()).find((i10) => i10.trackId === e14);
    return t9 != null && t9.peerId ? this.peers[t9.peerId] : void 0;
  }
  getSpeakers() {
    return this.speakers;
  }
  getSpeakerPeers() {
    return this.speakers.map((e14) => e14.peer);
  }
  getUserAgent() {
    return this.userAgent;
  }
  createAndSetUserAgent(e14) {
    this.userAgent = Le(this.env, e14);
  }
  setRoom(e14) {
    this.room = e14;
  }
  setKnownRoles(e14) {
    var i10, r9;
    if (this.knownRoles = e14.known_roles, this.roleDetailsArrived = true, this.templateAppData = e14.app_data, !this.simulcastEnabled)
      return;
    let t9 = (i10 = this.knownRoles[e14.name]) == null ? void 0 : i10.publishParams;
    this.videoLayers = this.convertSimulcastLayers((r9 = t9.simulcast) == null ? void 0 : r9.video), this.updatePeersPolicy();
  }
  hasRoleDetailsArrived() {
    return this.roleDetailsArrived;
  }
  setConfig(e14) {
    var t9, i10, r9;
    if (O.rememberDevices(!!e14.rememberDeviceSelection), e14.rememberDeviceSelection) {
      let s11 = O.getSelection();
      s11 && (e14.settings || (e14.settings = {}), (t9 = s11.audioInput) != null && t9.deviceId && (e14.settings.audioInputDeviceId = e14.settings.audioInputDeviceId || s11.audioInput.deviceId), (i10 = s11.audioOutput) != null && i10.deviceId && (e14.settings.audioOutputDeviceId = e14.settings.audioOutputDeviceId || s11.audioOutput.deviceId), (r9 = s11.videoInput) != null && r9.deviceId && (e14.settings.videoDeviceId = e14.settings.videoDeviceId || s11.videoInput.deviceId));
    }
    e14.autoManageVideo = e14.autoManageVideo !== false, e14.autoManageWakeLock = e14.autoManageWakeLock !== false, this.config = e14, this.setEnv();
  }
  addPeer(e14) {
    this.peers[e14.peerId] = e14, e14.isLocal && (this.localPeerId = e14.peerId);
  }
  addTrack(e14) {
    this.tracks.set(e14, e14);
  }
  getTrackState(e14) {
    return this.peerTrackStates[e14];
  }
  setTrackState(e14) {
    this.peerTrackStates[e14.trackInfo.track_id] = e14;
  }
  removePeer(e14) {
    this.localPeerId === e14 && (this.localPeerId = void 0), delete this.peers[e14];
  }
  removeTrack(e14) {
    this.tracks.delete(e14);
  }
  updateSpeakers(e14) {
    this.speakers = e14;
  }
  updateAudioOutputVolume(e14) {
    return d(this, null, function* () {
      for (let t9 of this.getAudioTracks())
        yield t9.setVolume(e14);
    });
  }
  updateAudioOutputDevice(e14) {
    return d(this, null, function* () {
      let t9 = [];
      this.getAudioTracks().forEach((i10) => {
        i10 instanceof re && t9.push(i10.setOutputDevice(e14));
      }), yield Promise.all(t9);
    });
  }
  getSimulcastLayers(e14) {
    var t9;
    return !this.simulcastEnabled || !["screen", "regular"].includes(e14) ? [] : e14 === "screen" ? [] : ((t9 = this.videoLayers) == null ? void 0 : t9.layers) || [];
  }
  convertSimulcastLayers(e14) {
    if (e14)
      return M(g({}, e14), { layers: (e14.layers || []).map((t9) => M(g({}, t9), { maxBitrate: t9.maxBitrate * 1e3 })) });
  }
  getSimulcastDefinitionsForPeer(e14, t9) {
    var c5, l5, h4;
    if ([!e14 || !e14.role, t9 === "screen", !this.simulcastEnabled].some((u5) => !!u5))
      return [];
    let i10 = this.getPolicyForRole(e14.role.name).publishParams, r9, s11, a4;
    return t9 === "regular" ? (r9 = (c5 = i10.simulcast) == null ? void 0 : c5.video, s11 = i10.video.width, a4 = i10.video.height) : t9 === "screen" && (r9 = (l5 = i10.simulcast) == null ? void 0 : l5.screen, s11 = i10.screen.width, a4 = i10.screen.height), ((h4 = r9 == null ? void 0 : r9.layers) == null ? void 0 : h4.map((u5) => {
      let m4 = Yt[u5.rid], S4 = { width: Math.floor(s11 / u5.scaleResolutionDownBy), height: Math.floor(a4 / u5.scaleResolutionDownBy) };
      return { layer: m4, resolution: S4 };
    })) || [];
  }
  setPoll(e14) {
    this.polls.set(e14.id, e14);
  }
  getPoll(e14) {
    return this.polls.get(e14);
  }
  getErrorListener() {
    return this.errorListener;
  }
  cleanup() {
    let e14 = this.getTracks();
    for (let t9 of e14)
      t9.cleanup();
    this.room = void 0, this.config = void 0, this.localPeerId = void 0, this.roleDetailsArrived = false;
  }
  setErrorListener(e14) {
    this.errorListener = e14;
  }
  updatePeersPolicy() {
    this.getPeers().forEach((e14) => {
      var t9;
      if (!e14.role) {
        (t9 = this.errorListener) == null || t9.onError(p.GenericErrors.InvalidRole("VALIDATION", ""));
        return;
      }
      e14.role = this.getPolicyForRole(e14.role.name);
    });
  }
  setEnv() {
    var r9;
    let t9 = ((r9 = this.config) == null ? void 0 : r9.initEndpoint).split("https://")[1], i10 = "prod";
    t9.startsWith("prod") ? i10 = "prod" : t9.startsWith("qa") ? i10 = "qa" : t9.startsWith("dev") && (i10 = "dev"), this.env = i10, J.setEnv(i10);
  }
};
var pt = class {
  constructor() {
    this.TAG = "[WakeLockManager]";
    this.wakeLock = null;
    this.acquireLock = () => d(this, null, function* () {
      yield this.requestWakeLock(), document == null || document.addEventListener("visibilitychange", this.visibilityHandler);
    });
    this.cleanup = () => d(this, null, function* () {
      if (this.wakeLock && !this.wakeLock.released)
        try {
          yield this.wakeLock.release(), o.d(this.TAG, "Wake lock released");
        } catch (e14) {
          let t9 = e14;
          o.w(this.TAG, "Error while releasing wake lock", `name=${t9.name}, message=${t9.message}`);
        }
      this.wakeLock = null;
    });
    this.visibilityHandler = () => d(this, null, function* () {
      (document == null ? void 0 : document.visibilityState) === "visible" && (!this.wakeLock || this.wakeLock.released) && (o.d(this.TAG, "Re-acquiring wake lock due to visibility change"), yield this.requestWakeLock());
    });
    this.requestWakeLock = () => d(this, null, function* () {
      try {
        if (!("wakeLock" in navigator)) {
          o.d(this.TAG, "Wake lock feature not supported");
          return;
        }
        this.wakeLock = yield navigator.wakeLock.request("screen"), o.d(this.TAG, "Wake lock acquired");
      } catch (e14) {
        let t9 = e14;
        o.w(this.TAG, "Error acquiring wake lock", `name=${t9.name}, message=${t9.message}`);
      }
    });
  }
};
var mt = class {
  constructor(e14) {
    this.store = e14;
    this.bufferSize = 100;
    this.TAG = "[AnalyticsEventsService]";
    this.transport = null;
    this.pendingEvents = [];
    this.level = 1;
  }
  setTransport(e14) {
    this.transport = e14;
  }
  reset() {
    this.transport = null, this.pendingEvents = [];
  }
  queue(e14) {
    if (e14.level >= this.level && (this.pendingEvents.push(e14), this.pendingEvents.length > this.bufferSize)) {
      let t9 = this.pendingEvents.shift();
      o.d(this.TAG, "Max buffer size reached", "Removed event to accommodate new events", t9);
    }
    return this;
  }
  flushFailedClientEvents() {
    J.flushFailedEvents();
  }
  flush() {
    var e14;
    try {
      for (; this.pendingEvents.length > 0; ) {
        let t9 = this.pendingEvents.shift();
        t9 && (t9.metadata.peer.peer_id = (e14 = this.store.getLocalPeer()) == null ? void 0 : e14.peerId, t9.metadata.userAgent = this.store.getUserAgent(), this.transport && this.transport.transportProvider.isConnected ? this.transport.sendEvent(t9) : this.sendClientEventOnHTTP(t9));
      }
    } catch (t9) {
      o.w(this.TAG, "Flush Failed", t9);
    }
  }
  sendClientEventOnHTTP(e14) {
    var r9, s11, a4, c5;
    let t9 = this.store.getRoom(), i10 = this.store.getLocalPeer();
    e14.metadata.token = (r9 = this.store.getConfig()) == null ? void 0 : r9.authToken, e14.metadata.peer = { session_id: t9 == null ? void 0 : t9.sessionId, room_id: t9 == null ? void 0 : t9.id, room_name: t9 == null ? void 0 : t9.name, template_id: t9 == null ? void 0 : t9.templateId, joined_at: (s11 = t9 == null ? void 0 : t9.joinedAt) == null ? void 0 : s11.getTime(), session_started_at: (a4 = t9 == null ? void 0 : t9.startedAt) == null ? void 0 : a4.getTime(), role: (c5 = i10 == null ? void 0 : i10.role) == null ? void 0 : c5.name, user_name: i10 == null ? void 0 : i10.name, user_data: i10 == null ? void 0 : i10.metadata }, J.sendEvent(e14);
  }
};
var Xi = { autoplayFailed: void 0, initialized: false, autoplayCheckPromise: void 0 };
var Ve = class {
  constructor(e14, t9, i10) {
    this.store = e14;
    this.deviceManager = t9;
    this.eventBus = i10;
    this.autoPausedTracks = /* @__PURE__ */ new Set();
    this.TAG = "[AudioSinkManager]:";
    this.volume = 100;
    this.state = g({}, Xi);
    this.handleAudioPaused = (e15) => d(this, null, function* () {
      var s11;
      let i11 = (s11 = e15.target.srcObject) == null ? void 0 : s11.getAudioTracks()[0];
      if (!(i11 != null && i11.enabled))
        return;
      o.d(this.TAG, "Audio Paused", e15.target.id);
      let r9 = this.store.getTrackById(e15.target.id);
      r9 && (Mi() ? (yield R(500), this.playAudioFor(r9)) : this.autoPausedTracks.add(r9));
    });
    this.handleTrackUpdate = ({ track: e15 }) => {
      o.d(this.TAG, "Track updated", `${e15}`);
    };
    this.handleTrackAdd = (r9) => d(this, [r9], function* ({ track: e15, peer: t10, callListener: i11 = true }) {
      var a4, c5;
      let s11 = document.createElement("audio");
      s11.style.display = "none", s11.id = e15.trackId, s11.addEventListener("pause", this.handleAudioPaused), s11.onerror = () => d(this, null, function* () {
        var h4, u5;
        o.e(this.TAG, "error on audio element", s11.error);
        let l5 = p.TracksErrors.AudioPlaybackError(`Audio playback error for track - ${e15.trackId} code - ${(h4 = s11 == null ? void 0 : s11.error) == null ? void 0 : h4.code}`);
        this.eventBus.analytics.publish(E.audioPlaybackError(l5)), ((u5 = s11 == null ? void 0 : s11.error) == null ? void 0 : u5.code) === MediaError.MEDIA_ERR_DECODE && (this.removeAudioElement(s11, e15), yield R(500), yield this.handleTrackAdd({ track: e15, peer: t10, callListener: false }));
      }), e15.setAudioElement(s11), e15.setVolume(this.volume), o.d(this.TAG, "Audio track added", `${e15}`), this.init(), (a4 = this.audioSink) == null || a4.append(s11), this.outputDevice && (yield e15.setOutputDevice(this.outputDevice)), s11.srcObject = new MediaStream([e15.nativeTrack]), i11 && ((c5 = this.listener) == null || c5.onTrackUpdate(0, e15, t10)), yield this.handleAutoplayError(e15);
    });
    this.handleAutoplayError = (e15) => d(this, null, function* () {
      if (this.state.autoplayFailed === void 0 && (this.state.autoplayCheckPromise || (this.state.autoplayCheckPromise = new Promise((t10) => {
        this.playAudioFor(e15).then(t10);
      })), yield this.state.autoplayCheckPromise), this.state.autoplayFailed) {
        this.autoPausedTracks.add(e15);
        return;
      }
      yield this.playAudioFor(e15);
    });
    this.handleAudioDeviceChange = (e15) => {
      e15.error || !e15.selection || e15.type === "video" || this.unpauseAudioTracks();
    };
    this.handleTrackRemove = (e15) => {
      this.autoPausedTracks.delete(e15);
      let t10 = document.getElementById(e15.trackId);
      t10 && this.removeAudioElement(t10, e15), this.audioSink && this.audioSink.childElementCount === 0 && (this.state.autoplayCheckPromise = void 0, this.state.autoplayFailed = void 0), o.d(this.TAG, "Audio track removed", `${e15}`);
    };
    this.unpauseAudioTracks = () => d(this, null, function* () {
      let e15 = [];
      this.autoPausedTracks.forEach((t10) => {
        e15.push(this.playAudioFor(t10));
      }), yield Promise.all(e15);
    });
    this.removeAudioElement = (e15, t10) => {
      e15 && (o.d(this.TAG, "removing audio element", `${t10}`), e15.removeEventListener("pause", this.handleAudioPaused), e15.srcObject = null, e15.remove(), t10.setAudioElement(null));
    };
    this.eventBus.audioTrackAdded.subscribe(this.handleTrackAdd), this.eventBus.audioTrackRemoved.subscribe(this.handleTrackRemove), this.eventBus.audioTrackUpdate.subscribe(this.handleTrackUpdate), this.eventBus.deviceChange.subscribe(this.handleAudioDeviceChange);
  }
  setListener(e14) {
    this.listener = e14;
  }
  get outputDevice() {
    return this.deviceManager.outputDevice;
  }
  getVolume() {
    return this.volume;
  }
  setVolume(e14) {
    return d(this, null, function* () {
      yield this.store.updateAudioOutputVolume(e14), this.volume = e14;
    });
  }
  unblockAutoplay() {
    return d(this, null, function* () {
      this.autoPausedTracks.size > 0 && this.unpauseAudioTracks();
    });
  }
  init(e14) {
    if (this.state.initialized || this.audioSink)
      return;
    this.state.initialized = true;
    let t9 = document.createElement("div");
    t9.id = `HMS-SDK-audio-sink-${v4_default()}`, (e14 && document.getElementById(e14) || document.body).append(t9), this.audioSink = t9, o.d(this.TAG, "audio sink created", this.audioSink);
  }
  cleanup() {
    var e14;
    (e14 = this.audioSink) == null || e14.remove(), this.audioSink = void 0, this.eventBus.audioTrackAdded.unsubscribe(this.handleTrackAdd), this.eventBus.audioTrackRemoved.unsubscribe(this.handleTrackRemove), this.eventBus.audioTrackUpdate.unsubscribe(this.handleTrackUpdate), this.eventBus.deviceChange.unsubscribe(this.handleAudioDeviceChange), this.autoPausedTracks = /* @__PURE__ */ new Set(), this.state = g({}, Xi);
  }
  playAudioFor(e14) {
    return d(this, null, function* () {
      let t9 = e14.getAudioElement();
      if (!t9) {
        o.w(this.TAG, "No audio element found on track", e14.trackId);
        return;
      }
      try {
        yield t9.play(), this.state.autoplayFailed = false, this.autoPausedTracks.delete(e14), o.d(this.TAG, "Played track", `${e14}`);
      } catch (i10) {
        this.autoPausedTracks.add(e14), o.w(this.TAG, "Failed to play track", `${e14}`, i10);
        let r9 = i10;
        if (!this.state.autoplayFailed && r9.name === "NotAllowedError") {
          this.state.autoplayFailed = true;
          let s11 = p.TracksErrors.AutoplayBlocked("AUTOPLAY", "");
          s11.addNativeError(r9), this.eventBus.analytics.publish(E.autoplayError()), this.eventBus.autoplayError.publish(s11);
        }
      }
    });
  }
};
var Be = class {
  constructor(e14, t9) {
    this.store = e14;
    this.eventBus = t9;
    this.audioInput = [];
    this.audioOutput = [];
    this.videoInput = [];
    this.hasWebcamPermission = false;
    this.hasMicrophonePermission = false;
    this.TAG = "[Device Manager]:";
    this.initialized = false;
    this.videoInputChanged = false;
    this.audioInputChanged = false;
    this.updateOutputDevice = (e15) => d(this, null, function* () {
      let t10 = this.audioOutput.find((i11) => i11.deviceId === e15);
      return t10 && (this.outputDevice = t10, yield this.store.updateAudioOutputDevice(t10), O.updateSelection("audioOutput", { deviceId: t10.deviceId, groupId: t10.groupId })), t10;
    });
    this.getCurrentSelection = () => {
      var a4, c5;
      let e15 = this.store.getLocalPeer(), t10 = this.createIdentifier((a4 = e15 == null ? void 0 : e15.audioTrack) == null ? void 0 : a4.getMediaTrackSettings()), i11 = this.createIdentifier((c5 = e15 == null ? void 0 : e15.videoTrack) == null ? void 0 : c5.getMediaTrackSettings()), r9 = this.audioInput.find((l5) => this.createIdentifier(l5) === t10), s11 = this.videoInput.find((l5) => this.createIdentifier(l5) === i11);
      return { audioInput: r9, videoInput: s11, audioOutput: this.outputDevice };
    };
    this.computeChange = (e15, t10) => e15.length !== t10.length ? true : t10.some((i11) => !e15.includes(this.createIdentifier(i11)));
    this.enumerateDevices = () => d(this, null, function* () {
      try {
        let e15 = yield navigator.mediaDevices.enumerateDevices(), t10 = this.videoInput.map(this.createIdentifier), i11 = this.audioInput.map(this.createIdentifier);
        this.audioInput = [], this.audioOutput = [], this.videoInput = [], e15.forEach((r9) => {
          r9.kind === "audioinput" && r9.label ? (this.hasMicrophonePermission = true, this.audioInput.push(r9)) : r9.kind === "audiooutput" ? this.audioOutput.push(r9) : r9.kind === "videoinput" && r9.label && (this.hasWebcamPermission = true, this.videoInput.push(r9));
        }), this.videoInputChanged = this.computeChange(t10, this.videoInput), this.audioInputChanged = this.computeChange(i11, this.audioInput), O.setDevices({ videoInput: [...this.videoInput], audioInput: [...this.audioInput], audioOutput: [...this.audioOutput] }), this.logDevices("Enumerate Devices");
      } catch (e15) {
        o.e(this.TAG, "Failed enumerating devices", e15);
      }
    });
    this.handleDeviceChange = nt(() => d(this, null, function* () {
      yield this.enumerateDevices(), this.logDevices("After Device Change");
      let e15 = this.store.getLocalPeer();
      yield this.setOutputDevice(true), yield this.handleAudioInputDeviceChange(e15 == null ? void 0 : e15.audioTrack), yield this.handleVideoInputDeviceChange(e15 == null ? void 0 : e15.videoTrack), this.eventBus.analytics.publish(E.deviceChange({ selection: this.getCurrentSelection(), type: "change", devices: this.getDevices() }));
    }), 500).bind(this);
    this.handleAudioInputDeviceChange = (e15) => d(this, null, function* () {
      if (!e15) {
        o.d(this.TAG, "No Audio track on local peer");
        return;
      }
      if (!this.audioInputChanged) {
        o.d(this.TAG, "No Change in AudioInput Device");
        return;
      }
      let t10 = this.getNewAudioInputDevice();
      if (!t10 || !t10.deviceId) {
        this.eventBus.analytics.publish(E.deviceChange({ selection: { audioInput: t10 }, error: new Error("Audio device not found"), devices: this.getDevices(), type: "audioInput" })), o.w(this.TAG, "Audio device not found");
        return;
      }
      let { settings: i11 } = e15, r9 = new x().codec(i11.codec).maxBitrate(i11.maxBitrate).deviceId(t10.deviceId).build();
      try {
        yield e15.setSettings(r9, true), this.eventBus.deviceChange.publish({ devices: this.getDevices(), selection: t10, type: "audioInput" }), this.logDevices("Audio Device Change Success");
      } catch (s11) {
        o.e(this.TAG, "[Audio Device Change]", s11), this.eventBus.analytics.publish(E.deviceChange({ selection: { audioInput: t10 }, devices: this.getDevices(), type: "audioInput", error: s11 })), this.eventBus.deviceChange.publish({ error: s11, selection: t10, type: "audioInput", devices: this.getDevices() });
      }
    });
    this.handleVideoInputDeviceChange = (e15) => d(this, null, function* () {
      if (!e15) {
        o.d(this.TAG, "No video track on local peer");
        return;
      }
      if (!this.videoInputChanged) {
        o.d(this.TAG, "No Change in VideoInput Device");
        return;
      }
      let t10 = this.videoInput[0];
      if (!t10 || !t10.deviceId) {
        this.eventBus.analytics.publish(E.deviceChange({ selection: { videoInput: t10 }, error: new Error("Video device not found"), devices: this.getDevices(), type: "video" })), o.w(this.TAG, "Video device not found");
        return;
      }
      let { settings: i11 } = e15, r9 = new N().codec(i11.codec).maxBitrate(i11.maxBitrate).maxFramerate(i11.maxFramerate).setWidth(i11.width).setHeight(i11.height).deviceId(t10.deviceId).build();
      try {
        yield e15.setSettings(r9, true), this.eventBus.deviceChange.publish({ devices: this.getDevices(), selection: t10, type: "video" }), this.logDevices("Video Device Change Success");
      } catch (s11) {
        o.e(this.TAG, "[Video Device Change]", s11), this.eventBus.analytics.publish(E.deviceChange({ selection: { videoInput: t10 }, devices: this.getDevices(), type: "video", error: s11 })), this.eventBus.deviceChange.publish({ error: s11, type: "video", selection: t10, devices: this.getDevices() });
      }
    });
    let i10 = ({ enabled: r9, track: s11 }) => r9 && s11.source === "regular";
    this.eventBus.localVideoEnabled.waitFor(i10).then(() => d(this, null, function* () {
      yield this.enumerateDevices(), this.videoInputChanged && this.eventBus.deviceChange.publish({ devices: this.getDevices() });
    })), this.eventBus.localAudioEnabled.waitFor(i10).then(() => d(this, null, function* () {
      yield this.enumerateDevices(), this.audioInputChanged && this.eventBus.deviceChange.publish({ devices: this.getDevices() });
    }));
  }
  init(e14 = false) {
    return d(this, null, function* () {
      this.initialized && !e14 || (!this.initialized && navigator.mediaDevices.addEventListener("devicechange", this.handleDeviceChange), this.initialized = true, yield this.enumerateDevices(), this.logDevices("Init"), yield this.setOutputDevice(), this.eventBus.deviceChange.publish({ devices: this.getDevices() }), this.eventBus.analytics.publish(E.deviceChange({ selection: this.getCurrentSelection(), type: "list", devices: this.getDevices() })));
    });
  }
  getDevices() {
    return { audioInput: this.audioInput, audioOutput: this.audioOutput, videoInput: this.videoInput };
  }
  cleanup() {
    this.initialized = false, this.audioInput = [], this.audioOutput = [], this.videoInput = [], this.outputDevice = void 0, navigator.mediaDevices.removeEventListener("devicechange", this.handleDeviceChange);
  }
  createIdentifier(e14) {
    return e14 ? `${e14.deviceId}${e14.groupId}` : "";
  }
  getNewAudioInputDevice() {
    let e14 = this.audioInput.find((t9) => t9.deviceId === "default");
    return e14 ? this.audioInput.find((i10) => i10.deviceId !== "default" && e14.label.includes(i10.label)) : this.audioInput[0];
  }
  setOutputDevice(e14 = false) {
    return d(this, null, function* () {
      let t9 = this.getNewAudioInputDevice(), i10 = this.createIdentifier(this.outputDevice);
      this.outputDevice = this.getAudioOutputDeviceMatchingInput(t9), this.outputDevice || (this.outputDevice = this.audioOutput.find((r9) => this.createIdentifier(r9) === i10), this.outputDevice || (this.outputDevice = this.audioOutput.find((r9) => r9.deviceId === "default") || this.audioOutput[0])), yield this.store.updateAudioOutputDevice(this.outputDevice), e14 && i10 !== this.createIdentifier(this.outputDevice) && (this.eventBus.analytics.publish(E.deviceChange({ selection: { audioOutput: this.outputDevice }, devices: this.getDevices(), type: "audioOutput" })), this.eventBus.deviceChange.publish({ selection: this.outputDevice, type: "audioOutput", devices: this.getDevices() }));
    });
  }
  getAudioOutputDeviceMatchingInput(e14) {
    var r9, s11;
    let t9 = ((s11 = (r9 = this.store.getConfig()) == null ? void 0 : r9.settings) == null ? void 0 : s11.speakerAutoSelectionBlacklist) || [];
    if (t9 === "all")
      return;
    let i10 = (e14 == null ? void 0 : e14.label.toLowerCase()) || "";
    if (!t9.some((a4) => i10.includes(a4.toLowerCase())) && e14 != null && e14.groupId)
      return this.audioOutput.find((a4) => e14.deviceId !== "default" && a4.label === e14.label);
  }
  logDevices(e14 = "") {
    o.d(this.TAG, e14, JSON.stringify({ videoInput: [...this.videoInput], audioInput: [...this.audioInput], audioOutput: [...this.audioOutput], selected: this.getCurrentSelection() }, null, 4));
  }
};
var gt = class {
  constructor(e14, t9) {
    this.deviceManager = e14;
    this.audioSinkManager = t9;
  }
  getVolume() {
    return this.audioSinkManager.getVolume();
  }
  setVolume(e14) {
    if (e14 < 0 || e14 > 100)
      throw Error("Please pass a valid number between 0-100");
    this.audioSinkManager.setVolume(e14);
  }
  getDevice() {
    return this.deviceManager.outputDevice;
  }
  setDevice(e14) {
    return this.deviceManager.updateOutputDevice(e14);
  }
  unblockAutoplay() {
    return d(this, null, function* () {
      yield this.audioSinkManager.unblockAutoplay(), yield ee.resumeContext();
    });
  }
};
var C = class {
  constructor(e14, t9) {
    this.eventName = e14;
    this.eventEmitter = t9;
    this.publish = (e15) => {
      this.eventEmitter.emit(this.eventName, e15);
    };
    this.subscribe = (e15) => {
      this.eventEmitter.on(this.eventName, e15);
    };
    this.subscribeOnce = (e15) => {
      this.eventEmitter.once(this.eventName, e15);
    };
    this.unsubscribe = (e15) => {
      this.eventEmitter.off(this.eventName, e15);
    };
    this.waitFor = (e15) => this.eventEmitter.waitFor(this.eventName, { filter: e15 });
    this.removeAllListeners = () => {
      this.eventEmitter.removeAllListeners(this.eventName);
    };
  }
};
var St = class {
  constructor() {
    this.eventEmitter = new import_eventemitter2.EventEmitter2();
    this.deviceChange = new C(L.DEVICE_CHANGE, this.eventEmitter);
    this.localAudioEnabled = new C(L.LOCAL_AUDIO_ENABLED, this.eventEmitter);
    this.localVideoEnabled = new C(L.LOCAL_VIDEO_ENABLED, this.eventEmitter);
    this.statsUpdate = new C(L.STATS_UPDATE, this.eventEmitter);
    this.trackDegraded = new C(L.TRACK_DEGRADED, this.eventEmitter);
    this.trackRestored = new C(L.TRACK_RESTORED, this.eventEmitter);
    this.trackAudioLevelUpdate = new C(L.TRACK_AUDIO_LEVEL_UPDATE, this.eventEmitter);
    this.audioPluginFailed = new C(L.AUDIO_PLUGIN_FAILED, this.eventEmitter);
    this.localAudioSilence = new C(L.LOCAL_AUDIO_SILENCE, this.eventEmitter);
    this.analytics = new C(L.ANALYTICS, this.eventEmitter);
    this.policyChange = new C(L.POLICY_CHANGE, this.eventEmitter);
    this.localRoleUpdate = new C(L.LOCAL_ROLE_UPDATE, this.eventEmitter);
    this.audioTrackUpdate = new C(L.AUDIO_TRACK_UPDATE, this.eventEmitter);
    this.audioTrackAdded = new C(L.AUDIO_TRACK_ADDED, this.eventEmitter);
    this.audioTrackRemoved = new C(L.AUDIO_TRACK_REMOVED, this.eventEmitter);
    this.autoplayError = new C(L.AUTOPLAY_ERROR, this.eventEmitter);
    this.leave = new C(L.LEAVE, this.eventEmitter);
  }
};
var $e = class {
  constructor(e14) {
    this.type = e14.type, this.source = e14.source || "regular", this.description = "", e14 instanceof Z ? (this.mute = !e14.enabled, this.track_id = e14.publishedTrackId, this.stream_id = e14.stream.id) : (this.mute = e14.mute, this.track_id = e14.track_id, this.stream_id = e14.stream_id);
  }
};
var vt = class {
  constructor(e14, t9, i10) {
    this.store = e14;
    this.listener = t9;
    this.audioListener = i10;
  }
  handleActiveSpeakers(e14) {
    var s11, a4, c5;
    let t9 = e14["speaker-list"], i10 = t9.map((l5) => ({ audioLevel: l5.level, peer: this.store.getPeerById(l5.peer_id), track: this.store.getTrackById(l5.track_id) }));
    (s11 = this.audioListener) == null || s11.onAudioLevelUpdate(i10), this.store.updateSpeakers(i10);
    let r9 = t9[0];
    if (r9) {
      let l5 = this.store.getPeerById(r9.peer_id);
      (a4 = this.listener) == null || a4.onPeerUpdate(4, l5);
    } else
      (c5 = this.listener) == null || c5.onPeerUpdate(5, null);
  }
};
var Tt = class {
  constructor(e14, t9) {
    this.store = e14;
    this.listener = t9;
    this.TAG = "[BroadcastManager]";
  }
  handleNotification(e14, t9) {
    e14 === "on-broadcast" && this.handleBroadcast(t9);
  }
  handleBroadcast(e14) {
    var h4;
    let t9 = e14.peer, i10 = e14.info, r9 = e14.roles, s11 = this.getSender(t9), a4 = e14.private ? this.store.getLocalPeer() : void 0, c5 = [];
    if (r9 != null && r9.length) {
      let u5 = this.store.getKnownRoles();
      for (let m4 of r9)
        u5[m4] && c5.push(u5[m4]);
    }
    let l5 = new ne(M(g({}, i10), { sender: s11, recipientRoles: c5, recipientPeer: a4, time: new Date(e14.timestamp), id: e14.message_id }));
    o.d(this.TAG, `Received Message from sender=${t9 == null ? void 0 : t9.peer_id}: ${l5}`), (h4 = this.listener) == null || h4.onMessageReceived(l5);
  }
  getSender(e14) {
    let t9 = e14 ? this.store.getPeerById(e14.peer_id) : void 0;
    return !t9 && e14 && (t9 = new W({ peerId: e14.peer_id, name: e14.info.name, isLocal: false, customerUserId: e14.info.user_id, metadata: e14.info.data })), t9;
  }
};
var ft = class {
  constructor(e14) {
    this.listener = e14;
  }
  handleQualityUpdate(e14) {
    var r9;
    let i10 = e14.peers.map((s11) => ({ peerID: s11.peer_id, downlinkQuality: s11.downlink_score }));
    (r9 = this.listener) == null || r9.onConnectionQualityUpdate(i10);
  }
};
var Ae = class {
  constructor(e14, t9, i10) {
    this.store = e14;
    this.eventBus = t9;
    this.listener = i10;
    this.TAG = "[TrackManager]";
    this.tracksToProcess = /* @__PURE__ */ new Map();
    this.handleTrackAdd = (e15) => {
      o.d(this.TAG, "ONTRACKADD", `${e15}`), this.tracksToProcess.set(e15.trackId, e15), this.processPendingTracks();
    };
    this.handleTrackRemovedPermanently = (e15) => {
      o.d(this.TAG, "ONTRACKREMOVE", e15), Object.keys(e15.tracks).forEach((i11) => {
        var c5;
        let r9 = this.store.getTrackState(i11);
        if (!r9)
          return;
        let s11 = this.store.getTrackById(i11);
        if (!s11) {
          o.d(this.TAG, "Track not found in store");
          return;
        }
        s11.type === "audio" && this.eventBus.audioTrackRemoved.publish(s11), this.store.removeTrack(s11);
        let a4 = this.store.getPeerById(r9.peerId);
        a4 && (this.removePeerTracks(a4, s11), (c5 = this.listener) == null || c5.onTrackUpdate(1, s11, a4));
      });
    };
    this.handleTrackLayerUpdate = (e15) => {
      for (let t10 in e15.tracks) {
        let i11 = e15.tracks[t10], r9 = this.store.getTrackById(t10);
        !r9 || !this.store.getPeerByTrackId(t10) || r9 instanceof H && this.setLayer(r9, i11);
      }
    };
    this.handleTrackUpdate = (e15, t10 = true) => {
      var r9, s11;
      let i11 = this.store.getPeerById(e15.peer.peer_id);
      if (!i11) {
        o.d(this.TAG, "Track Update ignored - Peer not added to store");
        return;
      }
      for (let a4 in e15.tracks) {
        let c5 = Object.assign({}, (r9 = this.store.getTrackState(a4)) == null ? void 0 : r9.trackInfo), l5 = e15.tracks[a4], h4 = this.store.getTrackById(a4);
        if (this.store.setTrackState({ peerId: e15.peer.peer_id, trackInfo: g(g({}, c5), l5) }), !h4 || this.tracksToProcess.has(a4))
          this.processTrackInfo(l5, e15.peer.peer_id, t10), this.processPendingTracks();
        else {
          h4.setEnabled(!l5.mute);
          let u5 = this.processTrackUpdate(h4, c5, l5);
          u5 && ((s11 = this.listener) == null || s11.onTrackUpdate(u5, h4, i11));
        }
      }
    };
    this.processTrackInfo = (e15, t10, i11) => {
    };
    this.processPendingTracks = () => {
      new Map(this.tracksToProcess).forEach((t10) => {
        var s11;
        let i11 = this.store.getTrackState(t10.trackId);
        if (!i11) {
          o.d(this.TAG, "TrackState not added to store", `peerId - ${t10.peerId}`, `trackId -${t10.trackId}`);
          return;
        }
        let r9 = this.store.getPeerById(i11.peerId);
        if (!r9) {
          o.d(this.TAG, "Peer not added to store, peerId", i11.peerId);
          return;
        }
        t10.source = i11.trackInfo.source, t10.peerId = r9.peerId, t10.logIdentifier = r9.name, t10.setEnabled(!i11.trackInfo.mute), this.addAudioTrack(r9, t10), this.addVideoTrack(r9, t10), t10.type === "audio" ? this.eventBus.audioTrackAdded.publish({ track: t10, peer: r9 }) : (s11 = this.listener) == null || s11.onTrackUpdate(0, t10, r9), this.tracksToProcess.delete(t10.trackId);
      });
    };
  }
  handleTrackMetadataAdd(e14) {
    o.d(this.TAG, "TRACK_METADATA_ADD", JSON.stringify(e14, null, 2));
    for (let t9 in e14.tracks) {
      let i10 = e14.tracks[t9];
      this.store.setTrackState({ peerId: e14.peer.peer_id, trackInfo: i10 });
    }
    this.processPendingTracks();
  }
  handleTrackRemove(e14) {
    if (o.d(this.TAG, "ONTRACKREMOVE", `${e14}`), !this.store.getTrackState(e14.trackId))
      return;
    if (!this.store.hasTrack(e14)) {
      o.d(this.TAG, "Track not found in store");
      return;
    }
    e14.type === "audio" && this.eventBus.audioTrackRemoved.publish(e14);
  }
  setLayer(e14, t9) {
    var s11, a4;
    let i10 = this.store.getPeerByTrackId(e14.trackId);
    if (!i10)
      return;
    e14.setLayerFromServer(t9) ? (s11 = this.listener) == null || s11.onTrackUpdate(5, e14, i10) : (a4 = this.listener) == null || a4.onTrackUpdate(6, e14, i10);
  }
  removePeerTracks(e14, t9) {
    let i10 = e14.auxiliaryTracks.indexOf(t9);
    i10 > -1 ? (e14.auxiliaryTracks.splice(i10, 1), o.d(this.TAG, "auxiliary track removed", `${t9}`)) : t9.type === "audio" && e14.audioTrack === t9 ? (e14.audioTrack = void 0, o.d(this.TAG, "audio track removed", `${t9}`)) : t9.type === "video" && e14.videoTrack === t9 && (e14.videoTrack = void 0, o.d(this.TAG, "video track removed", `${t9}`));
  }
  addAudioTrack(e14, t9) {
    var i10;
    t9.type === "audio" && (t9.source === "regular" && (!e14.audioTrack || ((i10 = e14.audioTrack) == null ? void 0 : i10.trackId) === t9.trackId) ? e14.audioTrack = t9 : e14.auxiliaryTracks.push(t9), this.store.addTrack(t9), o.d(this.TAG, "audio track added", `${t9}`));
  }
  addVideoTrack(e14, t9) {
    if (t9.type !== "video")
      return;
    let i10 = t9, r9 = this.store.getSimulcastDefinitionsForPeer(e14, i10.source);
    if (i10.setSimulcastDefinitons(r9), this.addAsPrimaryVideoTrack(e14, i10))
      e14.videoTrack ? e14.videoTrack.replaceTrack(i10) : e14.videoTrack = i10, this.store.addTrack(e14.videoTrack);
    else {
      let s11 = e14.auxiliaryTracks.findIndex((a4) => a4.trackId === i10.trackId);
      s11 === -1 ? (e14.auxiliaryTracks.push(i10), this.store.addTrack(i10)) : (e14.auxiliaryTracks[s11].replaceTrack(i10), this.store.addTrack(e14.auxiliaryTracks[s11]));
    }
    o.d(this.TAG, "video track added", `${t9}`);
  }
  addAsPrimaryVideoTrack(e14, t9) {
    var i10;
    return t9.source === "regular" && (!e14.videoTrack || ((i10 = e14.videoTrack) == null ? void 0 : i10.trackId) === t9.trackId);
  }
  processTrackUpdate(e14, t9, i10) {
    let r9;
    return t9.mute !== i10.mute ? (r9 = i10.mute ? 2 : 3, e14.type === "audio" && this.eventBus.audioTrackUpdate.publish({ track: e14, enabled: !i10.mute })) : t9.description !== i10.description && (r9 = 4), r9;
  }
};
var Et = class extends Ae {
  constructor(t9, i10, r9, s11) {
    super(t9, i10, s11);
    this.transport = r9;
    this.TAG = "[OnDemandTrackManager]";
    this.processTrackInfo = (t10, i11, r10 = true) => {
      var h4;
      if (t10.type !== "video")
        return;
      let s12 = this.store.getPeerById(i11);
      if (!s12 || !this.isPeerRoleSubscribed(i11)) {
        o.d(this.TAG, `no peer in store for peerId: ${i11}`);
        return;
      }
      let a4 = new K(new MediaStream(), this.transport.getSubscribeConnection()), c5 = j.getEmptyVideoTrack();
      c5.enabled = !t10.mute;
      let l5 = new H(a4, c5, t10.source);
      l5.setTrackId(t10.track_id), l5.peerId = s12.peerId, l5.logIdentifier = s12.name, this.addVideoTrack(s12, l5), r10 && ((h4 = this.listener) == null || h4.onTrackUpdate(0, s12.videoTrack, s12));
    };
  }
  handleTrackMetadataAdd(t9) {
    super.handleTrackMetadataAdd(t9);
    for (let i10 in t9.tracks)
      t9.tracks[i10].type === "video" && this.processTrackInfo(t9.tracks[i10], t9.peer.peer_id);
  }
  handleTrackRemove(t9) {
    super.handleTrackRemove(t9), t9.type === "video" && t9.source === "regular" && this.processTrackInfo({ track_id: t9.trackId, mute: !t9.enabled, type: t9.type, source: t9.source, stream_id: t9.stream.id }, t9.peerId, false);
  }
  addAsPrimaryVideoTrack(t9, i10) {
    return i10.source !== "regular" ? false : !t9.videoTrack || t9.videoTrack.trackId === i10.trackId ? true : t9.videoTrack.enabled && B(t9.videoTrack.nativeTrack);
  }
  isPeerRoleSubscribed(t9) {
    var s11, a4, c5, l5;
    if (!t9)
      return true;
    let i10 = this.store.getLocalPeer(), r9 = this.store.getPeerById(t9);
    return r9 && ((l5 = (a4 = (s11 = i10 == null ? void 0 : i10.role) == null ? void 0 : s11.subscribeParams) == null ? void 0 : a4.subscribeToRoles) == null ? void 0 : l5.includes((c5 = r9.role) == null ? void 0 : c5.name));
  }
};
var kt = class {
  constructor(e14, t9, i10, r9) {
    this.store = e14;
    this.peerManager = t9;
    this.trackManager = i10;
    this.listener = r9;
    this.TAG = "[PeerListManager]";
    this.handleInitialPeerList = (e15) => {
      let t10 = Object.values(e15.peers);
      this.peerManager.handlePeerList(t10);
    };
    this.handleReconnectPeerList = (e15) => {
      this.handleRepeatedPeerList(e15.peers);
    };
    this.handlePreviewRoomState = (e15) => {
      if (!this.store.hasRoleDetailsArrived())
        return;
      let t10 = e15.peers;
      if (t10 == null) {
        e15.peer_count === 0 && this.handleRepeatedPeerList({});
        return;
      }
      Object.keys(t10).forEach((i11) => {
        t10[i11].tracks = {}, t10[i11].is_from_room_state = true;
      }), this.handleRepeatedPeerList(t10);
    };
    this.handleRepeatedPeerList = (e15) => {
      let t10 = this.store.getRemotePeers(), i11 = Object.values(e15), r10 = t10.filter((a4) => !e15[a4.peerId]);
      r10.length > 0 && o.d(this.TAG, `${r10}`), r10.forEach((a4) => {
        var l5;
        let c5 = { peer_id: a4.peerId, role: ((l5 = a4.role) == null ? void 0 : l5.name) || "", info: { name: a4.name, data: a4.metadata || "", user_id: a4.customerUserId || "" }, tracks: {} };
        this.peerManager.handlePeerLeave(c5);
      });
      let s11 = [];
      i11.forEach((a4) => {
        let c5 = this.store.getPeerById(a4.peer_id), l5 = Object.values(a4.tracks);
        c5 && (this.store.getPeerTracks(c5.peerId).forEach((u5) => {
          var m4;
          a4.tracks[u5.trackId] || (this.removePeerTrack(c5, u5.trackId), (m4 = this.listener) == null || m4.onTrackUpdate(1, u5, c5));
        }), l5.forEach((u5) => {
          this.store.getTrackById(u5.track_id) || this.store.setTrackState({ peerId: c5.peerId, trackInfo: u5 });
        }), this.trackManager.handleTrackUpdate({ peer: { info: a4.info, peer_id: a4.peer_id }, tracks: a4.tracks }, false), this.peerManager.handlePeerUpdate(a4)), s11.push(a4);
      }), s11.length > 0 && this.peerManager.handlePeerList(s11);
    };
  }
  handleNotification(e14, t9, i10) {
    if (e14 === "peer-list") {
      let r9 = t9;
      i10 ? (o.d(this.TAG, "RECONNECT_PEER_LIST event", JSON.stringify(r9, null, 2)), this.handleReconnectPeerList(r9)) : (o.d(this.TAG, "PEER_LIST event", JSON.stringify(r9, null, 2)), this.handleInitialPeerList(r9));
    } else if (e14 === "room-state") {
      let r9 = t9;
      this.handlePreviewRoomState(r9);
    }
  }
  removePeerTrack(e14, t9) {
    var i10, r9;
    if (o.d(this.TAG, `removing track - ${t9} from ${e14}`), ((i10 = e14.audioTrack) == null ? void 0 : i10.trackId) === t9)
      e14.audioTrack = void 0;
    else if (((r9 = e14.videoTrack) == null ? void 0 : r9.trackId) === t9)
      e14.videoTrack = void 0;
    else {
      let s11 = e14.auxiliaryTracks.findIndex((a4) => a4.trackId === t9);
      s11 >= 0 && e14.auxiliaryTracks.splice(s11, 1);
    }
  }
};
var A = (n18) => n18 ? new Date(n18) : void 0;
var Mt = class {
  constructor(e14, t9, i10) {
    this.store = e14;
    this.trackManager = t9;
    this.listener = i10;
    this.TAG = "[PeerManager]";
    this.handlePeerList = (e15) => {
      var r9, s11;
      if (e15.length === 0) {
        (r9 = this.listener) == null || r9.onPeerUpdate(9, []);
        return;
      }
      let t10 = [], i11 = new Set(e15.map((a4) => a4.peer_id));
      this.store.getRemotePeers().forEach(({ peerId: a4, fromRoomState: c5 }) => {
        !i11.has(a4) && c5 && this.store.removePeer(a4);
      });
      for (let a4 of e15)
        t10.push(this.makePeer(a4));
      (s11 = this.listener) == null || s11.onPeerUpdate(9, t10), this.trackManager.processPendingTracks();
    };
    this.handlePeerJoin = (e15) => {
      var i11;
      let t10 = this.makePeer(e15);
      (i11 = this.listener) == null || i11.onPeerUpdate(0, t10), this.trackManager.processPendingTracks();
    };
    this.handlePeerLeave = (e15) => {
      var i11, r9, s11, a4;
      let t10 = this.store.getPeerById(e15.peer_id);
      this.store.removePeer(e15.peer_id), o.d(this.TAG, "PEER_LEAVE", e15.peer_id, `remainingPeers=${this.store.getPeers().length}`), t10 && (t10.audioTrack && ((i11 = this.listener) == null || i11.onTrackUpdate(1, t10.audioTrack, t10)), t10.videoTrack && ((r9 = this.listener) == null || r9.onTrackUpdate(1, t10.videoTrack, t10)), (s11 = t10.auxiliaryTracks) == null || s11.forEach((c5) => {
        var l5;
        (l5 = this.listener) == null || l5.onTrackUpdate(1, c5, t10);
      }), (a4 = this.listener) == null || a4.onPeerUpdate(1, t10));
    };
  }
  handleNotification(e14, t9) {
    switch (e14) {
      case "on-peer-join": {
        let i10 = t9;
        this.handlePeerJoin(i10);
        break;
      }
      case "on-peer-leave": {
        let i10 = t9;
        this.handlePeerLeave(i10);
        break;
      }
      case "on-peer-update":
        this.handlePeerUpdate(t9);
        break;
      default:
        break;
    }
  }
  handlePeerUpdate(e14) {
    var i10;
    let t9 = this.store.getPeerById(e14.peer_id);
    if (t9) {
      if (t9.role && t9.role.name !== e14.role) {
        let r9 = this.store.getPolicyForRole(e14.role);
        t9.updateRole(r9), this.updateSimulcastLayersForPeer(t9), (i10 = this.listener) == null || i10.onPeerUpdate(8, t9);
      }
      this.handlePeerInfoUpdate(g({ peer: t9 }, e14.info));
    }
  }
  handlePeerInfoUpdate({ peer: e14, name: t9, data: i10 }) {
    var r9, s11;
    e14 && (t9 && e14.name !== t9 && (e14.updateName(t9), (r9 = this.listener) == null || r9.onPeerUpdate(10, e14)), i10 && e14.metadata !== i10 && (e14.updateMetadata(i10), (s11 = this.listener) == null || s11.onPeerUpdate(11, e14)));
  }
  makePeer(e14) {
    let t9 = this.store.getPeerById(e14.peer_id);
    t9 || (t9 = new we({ peerId: e14.peer_id, name: e14.info.name, customerUserId: e14.info.user_id, metadata: e14.info.data, role: this.store.getPolicyForRole(e14.role), joinedAt: A(e14.joined_at), fromRoomState: !!e14.is_from_room_state }), this.store.addPeer(t9), o.d(this.TAG, "adding to the peerList", `${t9}`));
    for (let i10 in e14.tracks) {
      let r9 = e14.tracks[i10];
      this.store.setTrackState({ peerId: e14.peer_id, trackInfo: r9 }), r9.type === "video" && this.trackManager.processTrackInfo(r9, e14.peer_id, false);
    }
    return t9;
  }
  updateSimulcastLayersForPeer(e14) {
    this.store.getPeerTracks(e14.peerId).forEach((t9) => {
      if (t9.type === "video" && ["regular", "screen"].includes(t9.source)) {
        let i10 = t9, r9 = this.store.getSimulcastDefinitionsForPeer(e14, i10.source);
        i10.setSimulcastDefinitons(r9);
      }
    });
  }
};
var yt = class {
  constructor(e14, t9) {
    this.store = e14;
    this.eventBus = t9;
  }
  handlePolicyChange(e14) {
    let t9 = this.store.getLocalPeer();
    if (t9 && !t9.role) {
      let r9 = e14.known_roles[e14.name];
      t9.updateRole(r9);
    }
    this.store.setKnownRoles(e14);
    let i10 = this.store.getRoom();
    if (i10 ? i10.templateId = e14.template_id : o.w("[PolicyChangeManager]", "on policy change - room not present"), t9 != null && t9.role && t9.role.name !== e14.name) {
      let r9 = this.store.getPolicyForRole(e14.name), s11 = t9.role;
      t9.updateRole(r9), this.eventBus.localRoleUpdate.publish({ oldRole: s11, newRole: r9 });
    }
    this.eventBus.policyChange.publish(e14);
  }
};
var Pt = class {
  constructor(e14, t9, i10) {
    this.store = e14;
    this.transport = t9;
    this.listener = i10;
  }
  handleNotification(e14, t9) {
    switch (e14) {
      case "on-poll-start": {
        this.handlePollStart(t9);
        break;
      }
      case "on-poll-stop": {
        this.handlePollStop(t9);
        break;
      }
      case "on-poll-stats":
        this.handlePollStats(t9);
        break;
      default:
        break;
    }
  }
  handlePollStart(e14) {
    return d(this, null, function* () {
      var i10;
      let t9 = [];
      for (let r9 of e14.polls) {
        let s11 = yield this.transport.getPollQuestions({ poll_id: r9.poll_id, index: 0, count: 50 }), a4 = { id: r9.poll_id, title: r9.title, startedBy: r9.started_by, createdBy: r9.created_by, anonymous: r9.anonymous, type: r9.type, duration: r9.duration, locked: r9.locked, mode: r9.mode, visibility: r9.visibility, rolesThatCanVote: r9.vote || [], rolesThatCanViewResponses: r9.responses || [], state: r9.state, stoppedBy: r9.stopped_by, startedAt: A(r9.started_at), stoppedAt: A(r9.stopped_at), createdAt: A(r9.created_at), questions: s11.questions.map(({ question: c5, options: l5, answer: h4 }) => M(g({}, c5), { options: l5, answer: h4 })) };
        t9.push(a4), this.store.setPoll(a4);
      }
      (i10 = this.listener) == null || i10.onPollsUpdate(1, t9);
    });
  }
  handlePollStop(e14) {
    return d(this, null, function* () {
      var i10;
      let t9 = [];
      for (let r9 of e14.polls) {
        let s11 = this.store.getPoll(r9.poll_id);
        if (s11) {
          s11.state = "stopped", s11.stoppedAt = A(r9.stopped_at), s11.stoppedBy = r9.stopped_by;
          let a4 = yield this.transport.getPollResult({ poll_id: r9.poll_id });
          this.updatePollResult(s11, a4), t9.push(s11);
        }
      }
      t9.length > 0 && ((i10 = this.listener) == null || i10.onPollsUpdate(2, t9));
    });
  }
  handlePollStats(e14) {
    return d(this, null, function* () {
      var i10, r9;
      let t9 = [];
      for (let s11 of e14.polls) {
        let a4 = this.store.getPoll(s11.poll_id);
        if (!a4)
          return;
        this.updatePollResult(a4, s11), (i10 = (yield this.transport.getPollResponses({ poll_id: s11.poll_id, index: 0, count: 50, self: false })).responses) == null || i10.forEach(({ response: l5, peer: h4, final: u5 }) => {
          var T2;
          let m4 = (T2 = a4 == null ? void 0 : a4.questions) == null ? void 0 : T2.find((y2) => y2.index === l5.question);
          if (!m4)
            return;
          let S4 = { id: l5.response_id, questionIndex: l5.question, option: l5.option, options: l5.options, text: l5.text, responseFinal: u5, peer: { peerid: h4.peerid, userHash: h4.hash, userid: h4.userid, username: h4.username }, skipped: l5.skipped, type: l5.type, update: l5.update };
          Array.isArray(m4.responses) && m4.responses.length > 0 ? m4.responses.find(({ id: y2 }) => y2 === S4.id) || m4.responses.push(S4) : m4.responses = [S4];
        }), t9.push(a4);
      }
      t9.length > 0 && ((r9 = this.listener) == null || r9.onPollsUpdate(3, t9));
    });
  }
  updatePollResult(e14, t9) {
    var i10;
    e14.result = g({}, e14.result), e14.result.totalUsers = t9.user_count, e14.result.maxUsers = t9.max_user, e14.result.totalResponses = t9.total_response, (i10 = t9.questions) == null || i10.forEach((r9) => {
      var a4, c5;
      let s11 = (a4 = e14.questions) == null ? void 0 : a4.find((l5) => l5.index === r9.question);
      s11 && (s11.result = g({}, s11.result), s11.result.correctResponses = r9.correct, s11.result.skippedCount = r9.skipped, s11.result.totalResponses = r9.total, (c5 = r9.options) == null || c5.forEach((l5, h4) => {
        var m4;
        let u5 = (m4 = s11.options) == null ? void 0 : m4[h4];
        u5 && u5.voteCount !== l5 && (u5.voteCount = l5);
      }));
    });
  }
};
var At = class {
  constructor(e14, t9) {
    this.store = e14;
    this.listener = t9;
  }
  handleNotification(e14, t9) {
    switch (e14) {
      case "on-role-change-request":
        this.handleRoleChangeRequest(t9);
        break;
      case "on-track-update-request":
        this.handleTrackUpdateRequest(t9);
        break;
      case "on-change-track-mute-state-request":
        this.handleChangeTrackStateRequest(t9);
        break;
      default:
        return;
    }
  }
  handleRoleChangeRequest(e14) {
    var i10;
    let t9 = { requestedBy: e14.requested_by ? this.store.getPeerById(e14.requested_by) : void 0, role: this.store.getPolicyForRole(e14.role), token: e14.token };
    (i10 = this.listener) == null || i10.onRoleChangeRequest(t9);
  }
  handleTrackUpdateRequest(e14) {
    let { requested_by: t9, track_id: i10, mute: r9 } = e14, s11 = t9 ? this.store.getPeerById(t9) : void 0, a4 = this.store.getLocalPeerTracks().find((l5) => l5.publishedTrackId === i10);
    if (!a4)
      return;
    let c5 = () => {
      var l5;
      (l5 = this.listener) == null || l5.onChangeTrackStateRequest({ requestedBy: s11, track: a4, enabled: !r9 });
    };
    if (r9) {
      if (a4.enabled === !r9)
        return;
      a4.setEnabled(!r9).then(c5);
    } else
      c5();
  }
  handleChangeTrackStateRequest(e14) {
    var h4;
    let { type: t9, source: i10, value: r9, requested_by: s11 } = e14, a4 = s11 ? this.store.getPeerById(s11) : void 0, c5 = !r9, l5 = this.getTracksToBeUpdated({ type: t9, source: i10, enabled: c5 });
    if (l5.length !== 0)
      if (c5)
        (h4 = this.listener) == null || h4.onChangeMultiTrackStateRequest({ requestedBy: a4, tracks: l5, type: t9, source: i10, enabled: true });
      else {
        let u5 = [];
        for (let m4 of l5)
          u5.push(m4.setEnabled(false));
        Promise.all(u5).then(() => {
          var m4;
          (m4 = this.listener) == null || m4.onChangeMultiTrackStateRequest({ requestedBy: a4, tracks: l5, enabled: false });
        });
      }
  }
  getTracksToBeUpdated({ type: e14, source: t9, enabled: i10 }) {
    let s11 = this.store.getLocalPeerTracks();
    return e14 && (s11 = s11.filter((a4) => a4.type === e14)), t9 && (s11 = s11.filter((a4) => a4.source === t9)), s11.filter((a4) => a4.enabled !== i10);
  }
};
var bt = class {
  constructor(e14, t9) {
    this.store = e14;
    this.listener = t9;
    this.TAG = "[RoomUpdateManager]";
  }
  handleNotification(e14, t9) {
    switch (e14) {
      case "peer-list":
        this.onRoomState(t9.room);
        break;
      case "on-rtmp-start":
        this.onRTMPStart(t9);
        break;
      case "on-rtmp-stop":
        this.onRTMPStop(t9);
        break;
      case "on-record-start":
        this.onRecordingStart(t9);
        break;
      case "on-record-stop":
        this.onRecordingStop(t9);
        break;
      case "room-state":
        this.handlePreviewRoomState(t9);
        break;
      default:
        this.onHLS(e14, t9);
        break;
    }
  }
  handlePreviewRoomState(e14) {
    let { room: t9 } = e14;
    this.onRoomState(t9, e14.peer_count);
  }
  onRoomState(e14, t9) {
    var h4, u5, m4;
    let { recording: i10, streaming: r9, session_id: s11, started_at: a4, name: c5 } = e14, l5 = this.store.getRoom();
    if (!l5) {
      o.w(this.TAG, "on room state - room not present");
      return;
    }
    l5.peerCount = t9, l5.name = c5, l5.recording.server.running = !!(i10 != null && i10.sfu.enabled), l5.recording.browser.running = !!(i10 != null && i10.browser.enabled), l5.rtmp.running = !!((h4 = r9 == null ? void 0 : r9.rtmp) != null && h4.enabled), l5.rtmp.startedAt = A((u5 = r9 == null ? void 0 : r9.rtmp) == null ? void 0 : u5.started_at), l5.recording.server.startedAt = A(i10 == null ? void 0 : i10.sfu.started_at), l5.recording.browser.startedAt = A(i10 == null ? void 0 : i10.browser.started_at), l5.recording.hls = this.getPeerListHLSRecording(i10), l5.hls = this.convertHls(r9 == null ? void 0 : r9.hls), l5.sessionId = s11, l5.startedAt = A(a4), (m4 = this.listener) == null || m4.onRoomUpdate("RECORDING_STATE_UPDATED", l5);
  }
  onRTMPStart(e14) {
    var t9;
    this.setRTMPStatus(!((t9 = e14.error) != null && t9.code), e14);
  }
  onRTMPStop(e14) {
    this.setRTMPStatus(false, e14);
  }
  onRecordingStart(e14) {
    var t9;
    this.setRecordingStatus(!((t9 = e14.error) != null && t9.code), e14);
  }
  onRecordingStop(e14) {
    this.setRecordingStatus(false, e14);
  }
  onHLS(e14, t9) {
    var r9, s11;
    if (!["on-hls-start", "on-hls-stop"].includes(e14))
      return;
    let i10 = this.store.getRoom();
    if (!i10) {
      o.w(this.TAG, "on hls - room not present");
      return;
    }
    t9.enabled = e14 === "on-hls-start" && !((r9 = t9.error) != null && r9.code), i10.hls = this.convertHls(t9), i10.recording.hls = this.getHLSRecording(t9), (s11 = this.listener) == null || s11.onRoomUpdate("HLS_STREAMING_STATE_UPDATED", i10);
  }
  convertHls(e14) {
    var i10;
    let t9 = { running: !!(e14 != null && e14.enabled), variants: [], error: this.toSdkError(e14 == null ? void 0 : e14.error) };
    return (i10 = e14 == null ? void 0 : e14.variants) == null || i10.forEach((r9) => {
      t9.variants.push({ meetingURL: r9.meeting_url, url: r9.url, metadata: r9.metadata, startedAt: A(r9.started_at) });
    }), t9;
  }
  getHLSRecording(e14) {
    var i10, r9, s11;
    let t9 = { running: false };
    return e14 != null && e14.hls_recording && (t9 = { running: !!(e14 != null && e14.enabled), singleFilePerLayer: !!((i10 = e14.hls_recording) != null && i10.single_file_per_layer), hlsVod: !!((r9 = e14.hls_recording) != null && r9.hls_vod), startedAt: A((s11 = e14 == null ? void 0 : e14.variants) == null ? void 0 : s11[0].started_at), error: this.toSdkError(e14.error) }), t9;
  }
  getPeerListHLSRecording(e14) {
    var i10, r9;
    let t9 = e14 == null ? void 0 : e14.hls;
    return { running: !!(t9 != null && t9.enabled), startedAt: A(t9 == null ? void 0 : t9.started_at), singleFilePerLayer: !!((i10 = t9 == null ? void 0 : t9.config) != null && i10.single_file_per_layer), hlsVod: !!((r9 = t9 == null ? void 0 : t9.config) != null && r9.hls_vod) };
  }
  setRecordingStatus(e14, t9) {
    var s11;
    let i10 = this.store.getRoom();
    if (!i10) {
      o.w(this.TAG, `set recording status running=${e14} - room not present`);
      return;
    }
    let r9;
    t9.type === "sfu" ? (i10.recording.server = { running: e14, startedAt: e14 ? A(t9.started_at) : void 0, error: this.toSdkError(t9.error) }, r9 = "SERVER_RECORDING_STATE_UPDATED") : (i10.recording.browser = { running: e14, startedAt: e14 ? A(t9.started_at) : void 0, error: this.toSdkError(t9.error) }, r9 = "BROWSER_RECORDING_STATE_UPDATED"), (s11 = this.listener) == null || s11.onRoomUpdate(r9, i10);
  }
  setRTMPStatus(e14, t9) {
    var r9;
    let i10 = this.store.getRoom();
    if (!i10) {
      o.w(this.TAG, "on policy change - room not present");
      return;
    }
    i10.rtmp = { running: e14, startedAt: e14 ? A(t9.started_at) : void 0, error: this.toSdkError(t9.error) }, (r9 = this.listener) == null || r9.onRoomUpdate("RTMP_STREAMING_STATE_UPDATED", i10);
  }
  toSdkError(e14) {
    if (!(e14 != null && e14.code))
      return;
    let t9 = e14.message || "error in streaming/recording", i10 = new v(e14.code, "ServerErrors", "NONE", t9, t9);
    return o.e(this.TAG, "error in streaming/recording", i10), i10;
  }
};
var It = class {
  constructor(e14, t9) {
    this.store = e14;
    this.listener = t9;
  }
  handleNotification(e14, t9) {
    e14 === "on-metadata-change" && this.handleMetadataChange(t9);
  }
  handleMetadataChange(e14) {
    var i10;
    let t9 = e14.values.map((r9) => ({ key: r9.key, value: r9.data, updatedAt: A(r9.updated_at), updatedBy: r9.updated_by ? this.store.getPeerById(r9.updated_by) : void 0 }));
    (i10 = this.listener) == null || i10.onSessionStoreUpdate(t9);
  }
};
var Rt = class {
  constructor(e14, t9, i10, r9, s11, a4) {
    this.store = e14;
    this.transport = i10;
    this.listener = r9;
    this.audioListener = s11;
    this.connectionQualityListener = a4;
    this.TAG = "[HMSNotificationManager]";
    this.hasConsistentRoomStateArrived = false;
    this.ignoreNotification = (e15) => {
      if (e15 === "peer-list")
        this.hasConsistentRoomStateArrived = true;
      else if (e15 === "room-state")
        return this.hasConsistentRoomStateArrived;
      return false;
    };
    this.handleTrackAdd = (e15) => {
      this.trackManager.handleTrackAdd(e15);
    };
    this.handleTrackRemove = (e15) => {
      this.trackManager.handleTrackRemove(e15);
    };
    this.updateLocalPeer = ({ name: e15, metadata: t10 }) => {
      let i11 = this.store.getLocalPeer();
      this.peerManager.handlePeerInfoUpdate({ peer: i11, name: e15, data: t10 });
    };
    let c5 = this.transport.isFlagEnabled("onDemandTracks");
    this.trackManager = c5 ? new Et(this.store, t9, this.transport, this.listener) : new Ae(this.store, t9, this.listener), this.peerManager = new Mt(this.store, this.trackManager, this.listener), this.peerListManager = new kt(this.store, this.peerManager, this.trackManager, this.listener), this.broadcastManager = new Tt(this.store, this.listener), this.policyChangeManager = new yt(this.store, t9), this.requestManager = new At(this.store, this.listener), this.activeSpeakerManager = new vt(this.store, this.listener, this.audioListener), this.connectionQualityManager = new ft(this.connectionQualityListener), this.roomUpdateManager = new bt(this.store, this.listener), this.sessionMetadataManager = new It(this.store, this.listener), this.pollsManager = new Pt(this.store, this.transport, this.listener);
  }
  setListener(e14) {
    this.listener = e14, this.trackManager.listener = e14, this.peerManager.listener = e14, this.peerListManager.listener = e14, this.broadcastManager.listener = e14, this.requestManager.listener = e14, this.activeSpeakerManager.listener = e14, this.roomUpdateManager.listener = e14, this.sessionMetadataManager.listener = e14, this.pollsManager.listener = e14;
  }
  setAudioListener(e14) {
    this.audioListener = e14, this.activeSpeakerManager.audioListener = e14;
  }
  setConnectionQualityListener(e14) {
    this.connectionQualityListener = e14, this.connectionQualityManager.listener = e14;
  }
  handleNotification(e14, t9 = false) {
    var s11, a4;
    let i10 = e14.method, r9 = e14.params;
    ["active-speakers", "sfu-stats", "on-connection-quality-update", void 0].includes(i10) || o.d(this.TAG, `Received notification - ${i10}`, { notification: r9 }), i10 === "sfu-stats" && (s11 = window.HMS) != null && s11.ON_SFU_STATS && typeof ((a4 = window.HMS) == null ? void 0 : a4.ON_SFU_STATS) == "function" && window.HMS.ON_SFU_STATS(e14.params), !this.ignoreNotification(i10) && (this.roomUpdateManager.handleNotification(i10, r9), this.peerManager.handleNotification(i10, r9), this.requestManager.handleNotification(i10, r9), this.peerListManager.handleNotification(i10, r9, t9), this.broadcastManager.handleNotification(i10, r9), this.sessionMetadataManager.handleNotification(i10, r9), this.pollsManager.handleNotification(i10, r9), this.handleIsolatedMethods(i10, r9));
  }
  handleIsolatedMethods(e14, t9) {
    switch (e14) {
      case "on-track-add": {
        this.trackManager.handleTrackMetadataAdd(t9);
        break;
      }
      case "on-track-update": {
        this.trackManager.handleTrackUpdate(t9);
        break;
      }
      case "on-track-remove": {
        if (!t9.peer) {
          o.d(this.TAG, `Ignoring sfu notification - ${e14}`, { notification: t9 });
          return;
        }
        this.trackManager.handleTrackRemovedPermanently(t9);
        break;
      }
      case "on-track-layer-update": {
        this.trackManager.handleTrackLayerUpdate(t9);
        break;
      }
      case "active-speakers":
        this.activeSpeakerManager.handleActiveSpeakers(t9);
        break;
      case "on-connection-quality-update":
        this.connectionQualityManager.handleQualityUpdate(t9);
        break;
      case "on-policy-change":
        this.policyChangeManager.handlePolicyChange(t9);
        break;
      default:
        break;
    }
  }
};
var be = class {
  constructor(e14) {
    this.TAG = "[AudioContextManager]";
    this.audioContext = new AudioContext(), this.source = this.audioContext.createMediaElementSource(e14), this.source.connect(this.audioContext.destination);
  }
  resumeContext() {
    return d(this, null, function* () {
      this.audioContext.state === "suspended" && (yield this.audioContext.resume(), o.d(this.TAG, "AudioContext is resumed"));
    });
  }
  getAudioTrack() {
    return this.destinationNode && this.source.disconnect(this.destinationNode), this.destinationNode = this.audioContext.createMediaStreamDestination(), this.source.connect(this.destinationNode), this.destinationNode.stream.getAudioTracks()[0];
  }
  cleanup() {
    this.audioContext.state !== "closed" && this.audioContext.close().catch((e14) => {
      o.d(this.TAG, "AudioContext close error", e14.message);
    });
  }
};
var ae = class extends import_eventemitter22.EventEmitter2 {
  on(e14, t9) {
    return super.on(e14, t9);
  }
  off(e14, t9) {
    return super.off(e14, t9);
  }
  emit(e14, t9) {
    return super.emit(e14, t9);
  }
  listeners(e14) {
    return super.listeners(e14);
  }
};
var Ct = class extends ae {
  constructor() {
    super(...arguments);
    this.audioElement = null;
    this.TAG = "[PlaylistAudioManager]";
    this.seeked = false;
  }
  play(t9) {
    return d(this, null, function* () {
      return this.audioElement = this.getAudioElement(), new Promise((i10, r9) => {
        this.audioElement = this.getAudioElement(), this.audioElement.src = t9, this.seeked = false, this.audioElement.onerror = () => {
          let s11 = `Error loading ${t9}`;
          o.e(this.TAG, s11), this.stop(), r9(s11);
        }, this.audioElement.oncanplaythrough = () => d(this, null, function* () {
          try {
            if (!this.audioElement)
              return;
            if (this.audioContextManager.resumeContext(), this.track)
              this.seeked ? this.seeked = false : (yield this.audioElement.play(), i10([this.track]));
            else {
              yield this.audioElement.play();
              let s11 = this.audioContextManager.getAudioTrack();
              this.track = s11, i10([s11]);
            }
          } catch (s11) {
            o.e(this.TAG, "Error playing audio", t9, s11.message), r9(s11);
          }
        }), this.audioElement.onseeked = () => {
          this.seeked = true;
        };
      });
    });
  }
  getTracks() {
    return this.track ? [this.track.id] : [];
  }
  getElement() {
    return this.audioElement || (this.audioElement = this.getAudioElement()), this.audioElement;
  }
  stop() {
    var t9, i10, r9;
    (t9 = this.audioElement) == null || t9.pause(), (i10 = this.audioElement) == null || i10.removeAttribute("src"), this.audioElement = null, (r9 = this.audioContextManager) == null || r9.cleanup(), this.track = void 0;
  }
  getAudioElement() {
    if (this.audioElement)
      return this.audioElement;
    let t9 = document.createElement("audio");
    return t9.crossOrigin = "anonymous", t9.addEventListener("timeupdate", (i10) => this.emit("progress", i10)), t9.addEventListener("ended", () => {
      this.emit("ended", null);
    }), this.audioContextManager = new be(t9), t9;
  }
};
var wt = class extends ae {
  constructor() {
    super(...arguments);
    this.TAG = "[PlaylistVideoManager]";
    this.videoElement = null;
    this.canvasContext = null;
    this.tracks = [];
    this.DEFAUL_FPS = 24;
    this.seeked = false;
    this.drawImage = () => {
      var t9, i10, r9;
      this.videoElement && !this.videoElement.paused && !this.videoElement.ended && ((r9 = this.canvasContext) == null || r9.drawImage(this.videoElement, 0, 0, (t9 = this.canvas) == null ? void 0 : t9.width, (i10 = this.canvas) == null ? void 0 : i10.height), this.timer = setTimeout(() => {
        this.drawImage();
      }, 1e3 / this.DEFAUL_FPS));
    };
  }
  play(t9) {
    return this.videoElement = this.getVideoElement(), this.createCanvas(), new Promise((i10, r9) => {
      this.videoElement = this.getVideoElement(), this.videoElement.src = t9, this.seeked = false, this.videoElement.onerror = () => {
        let s11 = `Error loading ${t9}`;
        o.e(this.TAG, s11), this.stop(), r9(s11);
      }, this.videoElement.oncanplaythrough = () => d(this, null, function* () {
        var s11, a4, c5;
        try {
          if (!this.videoElement)
            return;
          if (this.canvas.width = this.videoElement.videoWidth, this.canvas.height = this.videoElement.videoHeight, this.tracks.length === 0) {
            this.clearCanvasAndTracks();
            let l5 = this.canvas.captureStream();
            if (!l5) {
              o.e(this.TAG, "Browser does not support captureStream");
              return;
            }
            this.videoElement.onplay = this.drawImage, yield this.audioContextManager.resumeContext(), yield this.videoElement.play();
            let h4 = this.audioContextManager.getAudioTrack();
            l5.addTrack(h4), l5.getTracks().forEach((u5) => {
              this.tracks.push(u5);
            }), i10(this.tracks);
          } else
            this.seeked ? (this.seeked = false, (c5 = this.canvasContext) == null || c5.drawImage(this.videoElement, 0, 0, (s11 = this.canvas) == null ? void 0 : s11.width, (a4 = this.canvas) == null ? void 0 : a4.height)) : (yield this.videoElement.play(), i10(this.tracks));
        } catch (l5) {
          o.e(this.TAG, "Error playing video", t9, l5.message), r9(l5);
        }
      }), this.videoElement.onseeked = () => {
        this.seeked = true;
      };
    });
  }
  getTracks() {
    return this.tracks.map((t9) => t9.id);
  }
  getElement() {
    return this.videoElement || (this.videoElement = this.getVideoElement()), this.videoElement;
  }
  stop() {
    var t9, i10, r9;
    (t9 = this.videoElement) == null || t9.pause(), (i10 = this.videoElement) == null || i10.removeAttribute("src"), this.videoElement = null, (r9 = this.audioContextManager) == null || r9.cleanup(), this.clearCanvasAndTracks();
  }
  clearCanvasAndTracks() {
    var t9;
    this.tracks = [], (t9 = this.canvasContext) == null || t9.clearRect(0, 0, this.canvas.width, this.canvas.height), clearTimeout(this.timer);
  }
  getVideoElement() {
    if (this.videoElement)
      return this.videoElement;
    let t9 = document.createElement("video");
    return t9.crossOrigin = "anonymous", t9.addEventListener("timeupdate", (i10) => this.emit("progress", i10)), t9.addEventListener("ended", () => {
      this.emit("ended", null);
    }), this.audioContextManager = new be(t9), t9;
  }
  createCanvas() {
    this.canvas || (this.canvas = document.createElement("canvas"), this.canvasContext = this.canvas.getContext("2d"));
  }
};
var Lt = { audio: { list: [], currentIndex: -1, isAutoplayOn: true }, video: { list: [], currentIndex: -1, isAutoplayOn: true } };
var We = class extends ae {
  constructor(t9, i10) {
    super();
    this.sdk = t9;
    this.eventBus = i10;
    this.state = { audio: g({}, Lt.audio), video: g({}, Lt.video) };
    this.TAG = "[PlaylistManager]";
    this.handlePausePlaylist = (r9) => d(this, [r9], function* ({ enabled: t10, track: i11 }) {
      var a4;
      if (t10)
        return;
      let s11;
      i11.source === "audioplaylist" && (s11 = "audio"), i11.source === "videoplaylist" && (s11 = "video"), s11 && ((a4 = this.getElement(s11)) == null || a4.pause());
    });
    this.addTrack = (t10, i11) => d(this, null, function* () {
      yield this.sdk.addTrack(t10, i11), o.d(this.TAG, "Playlist track added", X(t10));
    });
    this.removeTrack = (t10) => d(this, null, function* () {
      yield this.sdk.removeTrack(t10, true), o.d(this.TAG, "Playlist track removed", t10);
    });
    this.audioManager = new Ct(), this.videoManager = new wt(), this.addListeners();
  }
  getList(t9 = "audio") {
    return this.state[t9].list;
  }
  setList(t9) {
    if (!t9 || t9.length === 0) {
      o.w(this.TAG, "Please pass in a list of HMSPlaylistItem's");
      return;
    }
    t9.forEach((i10) => {
      this.state[i10.type].list.find((r9) => r9.id === i10.id) || this.state[i10.type].list.push(i10);
    });
  }
  clearList(t9) {
    return d(this, null, function* () {
      this.isPlaying(t9) && (yield this.stop(t9)), this.state[t9].list = [];
    });
  }
  removeItem(t9, i10) {
    return d(this, null, function* () {
      let { list: r9, currentIndex: s11 } = this.state[i10], a4 = r9.findIndex((c5) => t9 === c5.id);
      return a4 > -1 ? (s11 === a4 && this.isPlaying(i10) && (yield this.stop(i10)), r9.splice(a4, 1), true) : false;
    });
  }
  seek(t9, i10 = "audio") {
    let { currentIndex: r9 } = this.state[i10];
    if (r9 === -1)
      throw p.PlaylistErrors.NoEntryToPlay("PLAYLIST", "No item is currently playing");
    let s11 = this.getElement(i10);
    if (s11) {
      let a4 = Math.max(s11.currentTime + t9, 0);
      s11.currentTime = Math.min(a4, s11.duration);
    }
  }
  seekTo(t9, i10 = "audio") {
    let { currentIndex: r9 } = this.state[i10];
    if (r9 === -1)
      throw p.PlaylistErrors.NoEntryToPlay("PLAYLIST", "No item is currently playing");
    if (t9 < 0)
      throw Error("value cannot be negative");
    let s11 = this.getElement(i10);
    s11 && (s11.currentTime = Math.min(t9, s11.duration));
  }
  setVolume(t9, i10 = "audio") {
    if (t9 < 0 || t9 > 100)
      throw Error("Please pass a valid number between 0-100");
    let r9 = this.getElement(i10);
    r9 && (r9.volume = t9 * 0.01);
  }
  getVolume(t9 = "audio") {
    let i10 = this.getElement(t9);
    return i10 ? Math.floor(i10.volume * 100) : 0;
  }
  getCurrentTime(t9 = "audio") {
    let i10 = this.getElement(t9);
    return (i10 == null ? void 0 : i10.currentTime) || 0;
  }
  getCurrentIndex(t9 = "audio") {
    return this.state[t9].currentIndex;
  }
  getCurrentProgress(t9 = "audio") {
    var c5;
    let { list: i10, currentIndex: r9 } = this.state[t9], s11 = (c5 = i10[r9]) == null ? void 0 : c5.url, a4 = this.getElement(t9);
    return !s11 || !a4 ? 0 : Math.floor(100 * (a4.currentTime / a4.duration));
  }
  getCurrentSelection(t9 = "audio") {
    let { list: i10, currentIndex: r9 } = this.state[t9];
    if (r9 !== -1)
      return i10[r9];
  }
  isPlaying(t9 = "audio") {
    let i10 = this.getElement(t9);
    return !!i10 && !i10.paused;
  }
  setIsAutoplayOn(t9 = "audio", i10) {
    this.state[t9].isAutoplayOn = i10;
  }
  getPlaybackRate(t9 = "audio") {
    let i10 = this.getElement(t9);
    return i10 ? i10.playbackRate : 1;
  }
  setPlaybackRate(t9 = "audio", i10) {
    if (i10 < 0.25 || i10 > 2)
      throw Error("Please pass a value between 0.25 and 2.0");
    let r9 = this.getElement(t9);
    r9 && (r9.playbackRate = i10);
  }
  setEnabled(s11, a4) {
    return d(this, arguments, function* (t9, { id: i10, type: r9 = "audio" }) {
      let l5 = this.state[r9].list.findIndex((u5) => u5.id === i10);
      if (!i10 || l5 === -1) {
        o.w(this.TAG, "Pass a valid id");
        return;
      }
      let h4 = this.state[r9].list[l5].url;
      t9 ? yield this.play(h4, r9) : yield this.pause(h4, r9), this.state[r9].currentIndex = l5, this.setDuration(r9);
    });
  }
  playNext() {
    return d(this, arguments, function* (t9 = "audio") {
      let { list: i10, currentIndex: r9 } = this.state[t9];
      if (r9 >= i10.length - 1)
        throw p.PlaylistErrors.NoEntryToPlay("PLAYLIST", "Reached end of playlist");
      yield this.play(i10[r9 + 1].url, t9), this.state[t9].currentIndex = r9 + 1, this.setDuration(t9);
    });
  }
  playPrevious() {
    return d(this, arguments, function* (t9 = "audio") {
      let { list: i10, currentIndex: r9 } = this.state[t9];
      if (r9 <= 0)
        throw p.PlaylistErrors.NoEntryToPlay("PLAYLIST", "Reached start of playlist");
      yield this.play(i10[r9 - 1].url, t9), this.state[t9].currentIndex = r9 - 1, this.setDuration(t9);
    });
  }
  stop() {
    return d(this, arguments, function* (t9 = "audio") {
      var r9;
      let i10 = t9 === "audio" ? this.audioManager : this.videoManager;
      (r9 = i10.getElement()) == null || r9.pause(), yield this.removeTracks(t9), i10.stop(), this.state[t9].currentIndex = -1;
    });
  }
  cleanup() {
    this.state = { audio: g({}, Lt.audio), video: g({}, Lt.video) }, this.eventBus.localAudioEnabled.unsubscribe(this.handlePausePlaylist), this.eventBus.localVideoEnabled.unsubscribe(this.handlePausePlaylist), this.audioManager.stop(), this.videoManager.stop();
  }
  onProgress(t9) {
    this.videoManager.on("progress", () => {
      try {
        t9({ type: "video", progress: this.getCurrentProgress("video") });
      } catch (i10) {
        o.e(this.TAG, "Error in onProgress callback");
      }
    }), this.audioManager.on("progress", () => {
      try {
        t9({ type: "audio", progress: this.getCurrentProgress("audio") });
      } catch (i10) {
        o.e(this.TAG, "Error in onProgress callback");
      }
    });
  }
  onNewTrackStart(t9) {
    this.on("newTrackStart", t9);
  }
  onPlaylistEnded(t9) {
    this.on("playlistEnded", t9);
  }
  onCurrentTrackEnded(t9) {
    this.on("currentTrackEnded", t9);
  }
  getElement(t9 = "audio") {
    return t9 === "audio" ? this.audioManager.getElement() : this.videoManager.getElement();
  }
  removeTracks() {
    return d(this, arguments, function* (t9 = "audio") {
      let r9 = (t9 === "audio" ? this.audioManager : this.videoManager).getTracks();
      for (let s11 of r9)
        yield this.removeTrack(s11);
    });
  }
  play(r9) {
    return d(this, arguments, function* (t9, i10 = "audio") {
      let s11 = i10 === "audio" ? this.audioManager : this.videoManager, a4 = s11.getElement();
      if (this.isItemCurrentlyPlaying(t9, i10)) {
        o.w(this.TAG, `The ${i10} is currently playing`);
        return;
      }
      if (a4 != null && a4.src.includes(t9))
        yield a4.play();
      else {
        a4 == null || a4.pause();
        let c5 = yield s11.play(t9);
        for (let l5 of c5)
          yield this.addTrack(l5, i10 === "audio" ? "audioplaylist" : "videoplaylist");
      }
    });
  }
  isItemCurrentlyPlaying(t9, i10) {
    let r9 = this.getElement(i10);
    return !!(r9 && !r9.paused && r9.src.includes(t9));
  }
  setDuration(t9 = "audio") {
    let i10 = this.getElement(t9), { list: r9, currentIndex: s11 } = this.state[t9];
    r9[s11] && (r9[s11].duration = (i10 == null ? void 0 : i10.duration) || 0), this.emit("newTrackStart", r9[s11]);
  }
  pause(r9) {
    return d(this, arguments, function* (t9, i10 = "audio") {
      let s11 = this.getElement(i10);
      s11 && !s11.paused && s11.src.includes(t9) ? (s11.pause(), o.d(this.TAG, "paused url", t9)) : o.w(this.TAG, "The passed in url is not currently playing");
    });
  }
  addListeners() {
    this.audioManager.on("ended", () => this.handleEnded("audio")), this.videoManager.on("ended", () => this.handleEnded("video")), this.eventBus.localAudioEnabled.subscribe(this.handlePausePlaylist), this.eventBus.localVideoEnabled.subscribe(this.handlePausePlaylist);
  }
  handleEnded() {
    return d(this, arguments, function* (t9 = "audio") {
      let { list: i10, currentIndex: r9, isAutoplayOn: s11 } = this.state[t9];
      r9 === i10.length - 1 ? (yield this.stop(t9), this.emit("playlistEnded", t9)) : s11 ? this.playNext(t9) : yield this.pause(i10[r9].url, t9), this.emit("currentTrackEnded", i10[r9]);
    });
  }
};
var Ht = class {
  constructor(e14) {
    this.transport = e14;
    this.observedKeys = /* @__PURE__ */ new Set();
  }
  get(e14) {
    return d(this, null, function* () {
      let { data: t9, updated_at: i10 } = yield this.transport.getSessionMetadata(e14);
      return { value: t9, updatedAt: A(i10) };
    });
  }
  set(e14, t9) {
    return d(this, null, function* () {
      let { data: i10, updated_at: r9 } = yield this.transport.setSessionMetadata({ key: e14, data: t9 }), s11 = A(r9);
      return { value: i10, updatedAt: s11 };
    });
  }
  observe(e14) {
    return d(this, null, function* () {
      let t9 = new Set(this.observedKeys);
      if (e14.forEach((i10) => this.observedKeys.add(i10)), this.observedKeys.size !== t9.size)
        try {
          yield this.transport.listenMetadataChange(Array.from(this.observedKeys));
        } catch (i10) {
          throw this.observedKeys = t9, i10;
        }
    });
  }
  unobserve(e14) {
    return d(this, null, function* () {
      let t9 = new Set(this.observedKeys);
      if (this.observedKeys = new Set([...this.observedKeys].filter((i10) => !e14.includes(i10))), this.observedKeys.size !== t9.size)
        try {
          yield this.transport.listenMetadataChange(Array.from(this.observedKeys));
        } catch (i10) {
          throw this.observedKeys = t9, i10;
        }
    });
  }
};
var Ke = class {
  constructor(e14, t9, i10) {
    this.transport = e14;
    this.store = t9;
    this.listener = i10;
  }
  setListener(e14) {
    this.listener = e14;
  }
  createPoll(e14) {
    return d(this, null, function* () {
      var s11, a4;
      let { poll_id: t9 } = yield this.transport.setPollInfo(M(g({}, e14), { poll_id: e14.id, vote: e14.rolesThatCanVote, responses: e14.rolesThatCanViewResponses }));
      e14.id || (e14.id = t9), Array.isArray(e14.questions) && (yield this.addQuestionsToPoll(e14.id, e14.questions));
      let i10 = yield this.transport.getPollQuestions({ poll_id: e14.id, index: 0, count: 50 }), r9 = { id: e14.id, title: e14.title, anonymous: e14.anonymous, type: e14.type, duration: e14.duration, locked: e14.locked, mode: e14.mode, visibility: e14.visibility, rolesThatCanVote: e14.rolesThatCanVote || [], rolesThatCanViewResponses: e14.rolesThatCanViewResponses || [], state: "created", createdBy: (s11 = this.store.getLocalPeer()) == null ? void 0 : s11.peerId, questions: i10.questions.map(({ question: c5, options: l5, answer: h4 }) => M(g({}, c5), { options: l5, answer: h4 })) };
      (a4 = this.listener) == null || a4.onPollsUpdate(0, [r9]);
    });
  }
  startPoll(e14) {
    return d(this, null, function* () {
      typeof e14 == "string" ? yield this.transport.startPoll({ poll_id: e14 }) : (yield this.createPoll(e14), yield this.transport.startPoll({ poll_id: e14.id }));
    });
  }
  addQuestionsToPoll(e14, t9) {
    return d(this, null, function* () {
      t9.length > 0 && (yield this.transport.setPollQuestions({ poll_id: e14, questions: t9.map((i10, r9) => this.createQuestionSetParams(i10, r9)) }));
    });
  }
  stopPoll(e14) {
    return d(this, null, function* () {
      yield this.transport.stopPoll({ poll_id: e14 });
    });
  }
  addResponsesToPoll(e14, t9) {
    return d(this, null, function* () {
      let i10 = this.store.getPoll(e14);
      if (!i10)
        throw new Error("Invalid poll ID - Poll not found");
      let r9 = t9.map((s11) => {
        var c5, l5;
        let a4 = this.getQuestionInPoll(i10, s11.questionIndex);
        return a4.type === "single-choice" ? (s11.option = s11.option || ((c5 = s11.options) == null ? void 0 : c5[0]) || -1, delete s11.text, delete s11.options) : a4.type === "multiple-choice" ? ((l5 = s11.options) == null || l5.sort(), delete s11.text, delete s11.option) : (delete s11.option, delete s11.options), s11.skipped && (delete s11.option, delete s11.options, delete s11.text), g({ duration: 0, type: a4.type, question: s11.questionIndex }, s11);
      });
      yield this.transport.setPollResponses({ poll_id: e14, responses: r9 });
    });
  }
  getPolls() {
    return d(this, null, function* () {
      let e14 = yield this.transport.getPollsList({ count: 50 }), t9 = [];
      for (let i10 of e14.polls) {
        let r9 = yield this.transport.getPollQuestions({ poll_id: i10.poll_id, index: 0, count: 50 }), s11 = { id: i10.poll_id, title: i10.title, startedBy: i10.started_by, createdBy: i10.created_by, anonymous: i10.anonymous, type: i10.type, duration: i10.duration, locked: i10.locked, mode: i10.mode, visibility: i10.visibility, rolesThatCanVote: i10.vote || [], rolesThatCanViewResponses: i10.responses || [], state: i10.state, stoppedBy: i10.stopped_by, startedAt: A(i10.started_at), stoppedAt: A(i10.stopped_at), createdAt: A(i10.created_at), questions: r9.questions.map(({ question: a4, options: c5, answer: l5 }) => M(g({}, a4), { options: c5, answer: l5 })) };
        t9.push(s11), this.store.setPoll(s11);
      }
      return t9;
    });
  }
  getResponses(e14) {
    throw new Error("Method not implemented.");
  }
  createQuestionSetParams(e14, t9) {
    var a4;
    let i10 = M(g({}, e14), { index: t9 + 1 }), r9, s11 = e14.answer || { hidden: false };
    return Array.isArray(e14.options) && ["single-choice", "multiple-choice"].includes(e14.type) ? (r9 = (a4 = e14.options) == null ? void 0 : a4.map((c5, l5) => ({ index: l5 + 1, text: c5.text, weight: c5.weight })), s11 == null || delete s11.text, e14.type === "single-choice" ? s11.option = e14.options.findIndex((c5) => c5.isCorrectAnswer) + 1 || void 0 : s11.options = e14.options.map((c5, l5) => c5.isCorrectAnswer ? l5 + 1 : void 0).filter((c5) => !!c5)) : (s11 == null || delete s11.options, s11 == null || delete s11.option), { question: i10, options: r9, answer: s11 };
  }
  getQuestionInPoll(e14, t9) {
    var r9;
    let i10 = (r9 = e14 == null ? void 0 : e14.questions) == null ? void 0 : r9.find((s11) => s11.index === t9);
    if (!i10)
      throw new Error("Invalid question index - Question not found in poll");
    return i10;
  }
};
var _t = class {
  constructor(e14, t9, i10 = "", r9 = "", s11 = "https://prod-init.100ms.live/init", a4 = false) {
    this.authToken = e14;
    this.peerId = t9;
    this.peerName = i10;
    this.data = r9;
    this.endpoint = s11;
    this.autoSubscribeVideo = a4;
  }
};
var _ = ((s11) => (s11[s11.ConnectFailed = 0] = "ConnectFailed", s11[s11.SignalDisconnect = 1] = "SignalDisconnect", s11[s11.JoinWSMessageFailed = 2] = "JoinWSMessageFailed", s11[s11.PublishIceConnectionFailed = 3] = "PublishIceConnectionFailed", s11[s11.SubscribeIceConnectionFailed = 4] = "SubscribeIceConnectionFailed", s11))(_ || {});
var er = { 0: [], 1: [], 2: [1], 3: [1], 4: [1] };
var Ie = ((c5) => (c5.Disconnected = "Disconnected", c5.Connecting = "Connecting", c5.Joined = "Joined", c5.Preview = "Preview", c5.Failed = "Failed", c5.Reconnecting = "Reconnecting", c5.Leaving = "Leaving", c5))(Ie || {});
var Dt = class {
  constructor(e14) {
    this.promise = new Promise((t9, i10) => {
      this.resolve = t9, this.reject = i10, e14(t9, i10);
    });
  }
};
var Nt = class {
  constructor(e14, t9) {
    this.onStateChange = e14;
    this.sendEvent = t9;
    this.TAG = "[RetryScheduler]";
    this.inProgress = /* @__PURE__ */ new Map();
    this.retryTaskIds = [];
  }
  schedule(c5) {
    return d(this, arguments, function* ({ category: e14, error: t9, task: i10, originalState: r9, maxFailedRetries: s11 = 5, changeState: a4 = true }) {
      yield this.scheduleTask({ category: e14, error: t9, changeState: a4, task: i10, originalState: r9, maxFailedRetries: s11 });
    });
  }
  reset() {
    this.retryTaskIds.forEach((e14) => clearTimeout(e14)), this.retryTaskIds = [], this.inProgress.clear();
  }
  isTaskInProgress(e14) {
    return !!this.inProgress.get(e14);
  }
  scheduleTask(l5) {
    return d(this, arguments, function* ({ category: e14, error: t9, changeState: i10, task: r9, originalState: s11, maxFailedRetries: a4 = 5, failedRetryCount: c5 = 0 }) {
      if (o.d(this.TAG, "schedule: ", { category: _[e14], error: t9 }), c5 === 0) {
        let T2 = this.inProgress.get(e14);
        if (T2) {
          o.d(this.TAG, `schedule: Already a task for ${_[e14]} scheduled, waiting for its completion`), yield T2.promise;
          return;
        }
        let y2 = new Dt((b4, G3) => {
        });
        this.inProgress.set(e14, y2), this.sendEvent(t9, e14);
      }
      let h4 = false, u5 = er[e14];
      for (let T2 in u5) {
        let y2 = u5[parseInt(T2)];
        try {
          let b4 = this.inProgress.get(y2);
          b4 && (o.d(this.TAG, `schedule: Suspending retry task of ${_[e14]}, waiting for ${_[y2]} to recover`), yield b4.promise, o.d(this.TAG, `schedule: Resuming retry task ${_[e14]} as it's dependency ${_[y2]} is recovered`));
        } catch (b4) {
          o.d(this.TAG, `schedule: Stopping retry task of ${_[e14]} as it's dependency ${_[y2]} failed to recover`), h4 = true;
          break;
        }
      }
      if (c5 >= a4 || h4) {
        if (t9.description += `. [${_[e14]}] Could not recover after ${c5} tries`, h4 && (t9.description += ` Could not recover all of it's required dependencies - [${u5.map((T2) => _[T2]).toString()}]`), t9.isTerminal = true, this.inProgress.delete(e14), this.sendEvent(t9, e14), this.reset(), i10)
          this.onStateChange("Failed", t9);
        else
          throw t9;
        return;
      }
      i10 && this.onStateChange("Reconnecting", t9);
      let m4 = this.getDelayForRetryCount(e14, c5);
      o.d(this.TAG, `schedule: [${_[e14]}] [failedRetryCount=${c5}] Scheduling retry task in ${m4}ms`);
      let S4;
      try {
        S4 = yield this.setTimeoutPromise(r9, m4);
      } catch (T2) {
        S4 = false, o.w(this.TAG, `[${_[e14]}] Un-caught exception ${T2.name} in retry-task, initiating retry`, T2);
      }
      if (S4) {
        let T2 = this.inProgress.get(e14);
        this.inProgress.delete(e14), T2 == null || T2.resolve(c5), i10 && this.inProgress.size === 0 && this.onStateChange(s11), o.d(this.TAG, `schedule: [${_[e14]}] [failedRetryCount=${c5}] Recovered \u267B\uFE0F`);
      } else
        yield this.scheduleTask({ category: e14, error: t9, changeState: i10, task: r9, originalState: s11, maxFailedRetries: a4, failedRetryCount: c5 + 1 });
    });
  }
  getBaseDelayForTask(e14, t9) {
    return e14 === 2 ? 2 : Math.pow(2, t9);
  }
  getDelayForRetryCount(e14, t9) {
    let i10 = this.getBaseDelayForTask(e14, t9), r9 = e14 === 2 ? Math.random() * 2 : Math.random();
    return Math.round(Math.min(i10 + r9, 60) * 1e3);
  }
  setTimeoutPromise(e14, t9) {
    return d(this, null, function* () {
      return new Promise((i10, r9) => {
        let s11 = window.setTimeout(() => d(this, null, function* () {
          try {
            let a4 = yield e14();
            a4 && this.retryTaskIds.splice(this.retryTaskIds.indexOf(s11), 1), i10(a4);
          } catch (a4) {
            r9(a4);
          }
        }), t9);
        this.retryTaskIds.push(s11);
      });
    });
  }
};
var xt = class {
  constructor(e14, t9, i10 = 30, r9 = 300) {
    this.store = e14;
    this.eventBus = t9;
    this.sampleWindowSize = i10;
    this.pushInterval = r9;
    this.shouldSendEvent = false;
    this.sequenceNum = 1;
    this.trackAnalytics = /* @__PURE__ */ new Map();
    this.stop = () => {
      this.shouldSendEvent && this.sendEvent(), this.eventBus.statsUpdate.unsubscribe(this.handleStatsUpdate), this.shouldSendEvent = false;
    };
    this.sendEvent = () => {
      this.eventBus.analytics.publish(E.publishStats(this.toAnalytics()));
    };
    this.handleStatsUpdate = (e15) => {
      let t10 = e15.getLocalTrackStats();
      Object.keys(t10).forEach((i11) => {
        let r10 = t10[i11], s11 = this.store.getLocalPeerTracks().find((a4) => a4.getTrackIDBeingSent() === i11);
        Object.keys(r10).forEach((a4) => {
          var h4, u5, m4, S4, T2;
          let c5 = r10[a4], l5 = s11 && this.getTrackIdentifier(s11 == null ? void 0 : s11.trackId, c5);
          if (l5 && this.trackAnalytics.has(l5))
            (m4 = this.trackAnalytics.get(l5)) == null || m4.push(M(g({}, c5), { availableOutgoingBitrate: (u5 = (h4 = e15.getLocalPeerStats()) == null ? void 0 : h4.publish) == null ? void 0 : u5.availableOutgoingBitrate }));
          else if (s11) {
            let y2 = new mi({ track: s11, sampleWindowSize: this.sampleWindowSize, rid: c5.rid, ssrc: c5.ssrc.toString(), kind: c5.kind });
            y2.push(M(g({}, c5), { availableOutgoingBitrate: (T2 = (S4 = e15.getLocalPeerStats()) == null ? void 0 : S4.publish) == null ? void 0 : T2.availableOutgoingBitrate })), this.trackAnalytics.set(this.getTrackIdentifier(s11 == null ? void 0 : s11.trackId, c5), y2);
          }
        });
      });
    };
    this.start();
  }
  start() {
    this.shouldSendEvent || (this.stop(), this.shouldSendEvent = true, this.eventBus.statsUpdate.subscribe(this.handleStatsUpdate), this.startLoop().catch((e14) => o.e("[PublishStatsAnalytics]", e14.message)));
  }
  startLoop() {
    return d(this, null, function* () {
      for (; this.shouldSendEvent; )
        yield R(this.pushInterval * 1e3), this.sendEvent();
    });
  }
  toAnalytics() {
    var i10, r9;
    let e14 = [], t9 = [];
    return this.trackAnalytics.forEach((s11) => {
      s11.track.type === "audio" ? e14.push(s11.toAnalytics()) : s11.track.type === "video" && t9.push(s11.toAnalytics());
    }), { audio: e14, video: t9, joined_at: (r9 = (i10 = this.store.getRoom()) == null ? void 0 : i10.joinedAt) == null ? void 0 : r9.getTime(), sequence_num: this.sequenceNum++, max_window_sec: 30 };
  }
  getTrackIdentifier(e14, t9) {
    return t9.rid ? `${e14}:${t9.rid}` : e14;
  }
};
var mi = class {
  constructor({ track: e14, ssrc: t9, rid: i10, kind: r9, sampleWindowSize: s11 }) {
    this.samples = [];
    this.tempStats = [];
    this.track = e14, this.ssrc = t9, this.rid = i10, this.kind = r9, this.track_id = this.track.trackId, this.source = this.track.source, this.sampleWindowSize = s11;
  }
  push(e14) {
    this.tempStats.push(e14), this.shouldCreateSample() && (this.samples.push(this.createSample()), this.tempStats.length = 0);
  }
  toAnalytics() {
    return { track_id: this.track_id, ssrc: this.ssrc, source: this.source, rid: this.rid, samples: this.samples };
  }
  createSample() {
    let e14 = this.getLatestStat(), t9 = e14.qualityLimitationDurations, i10 = t9 && { bandwidth_sec: t9.bandwidth, cpu_sec: t9.cpu, other_sec: t9.other }, r9 = e14.frameHeight ? { height_px: this.getLatestStat().frameHeight, width_px: this.getLatestStat().frameWidth } : void 0, s11 = this.calculateAverage("jitter", false), a4 = s11 ? Math.round(s11 * 1e3) : void 0, c5 = this.calculateAverage("roundTripTime", false), l5 = c5 ? Math.round(c5 * 1e3) : void 0;
    return ts({ timestamp: Date.now(), avg_available_outgoing_bitrate_bps: this.calculateAverage("availableOutgoingBitrate"), avg_bitrate_bps: this.calculateAverage("bitrate"), avg_fps: this.calculateAverage("framesPerSecond"), total_packets_lost: this.calculateDifferenceForSample("packetsLost"), total_packets_sent: this.calculateDifferenceForSample("packetsSent"), total_packet_sent_delay_sec: parseFloat(this.calculateDifferenceForSample("totalPacketSendDelay").toFixed(4)), total_fir_count: this.calculateDifferenceForSample("firCount"), total_pli_count: this.calculateDifferenceForSample("pliCount"), total_nack_count: this.calculateDifferenceForSample("nackCount"), avg_jitter_ms: a4, avg_round_trip_time_ms: l5, total_quality_limitation: i10, resolution: r9 });
  }
  getLatestStat() {
    return this.tempStats[this.tempStats.length - 1];
  }
  shouldCreateSample() {
    let e14 = this.tempStats.length, t9 = this.tempStats[e14 - 1], i10 = this.tempStats[e14 - 2];
    return e14 === 30 || es(t9, i10) || t9.kind === "video" && Zr(t9, i10);
  }
  calculateSum(e14) {
    if (typeof this.getLatestStat()[e14] == "number")
      return this.tempStats.reduce((i10, r9) => i10 + (r9[e14] || 0), 0);
  }
  calculateAverage(e14, t9 = true) {
    let i10 = this.calculateSum(e14), r9 = i10 !== void 0 ? i10 / this.tempStats.length : void 0;
    return r9 ? t9 ? Math.round(r9) : r9 : void 0;
  }
  calculateDifferenceForSample(e14) {
    let t9 = Number(this.tempStats[0][e14]) || 0;
    return (Number(this.getLatestStat()[e14]) || 0) - t9;
  }
};
var Zr = (n18, e14) => n18 && e14 && (n18.frameWidth !== e14.frameWidth || n18.frameHeight !== e14.frameHeight);
var es = (n18, e14) => n18 && e14 && n18.enabled !== e14.enabled;
var ts = (n18) => Object.entries(n18).filter(([, e14]) => e14 !== void 0).reduce((e14, [t9, i10]) => (e14[t9] = i10, e14), {});
var Ft = class extends te {
  constructor() {
    super(100);
    this.localStorage = new U("hms-analytics");
    this.localStorage.clear(), this.initLocalStorageQueue();
  }
  enqueue(t9) {
    super.enqueue(t9), this.localStorage.set(this.storage);
  }
  dequeue() {
    let t9 = super.dequeue();
    return this.localStorage.set(this.storage), t9;
  }
  initLocalStorageQueue() {
    var t9;
    (t9 = this.localStorage.get()) == null || t9.forEach((i10) => {
      let r9 = new P(i10);
      super.enqueue(r9);
    });
  }
};
var Gt = class {
  constructor() {
    this.TAG = "[AnalyticsTransport]";
  }
  sendEvent(e14) {
    try {
      this.sendSingleEvent(e14), this.flushFailedEvents();
    } catch (t9) {
      o.w(this.TAG, "sendEvent failed", t9);
    }
  }
  flushFailedEvents(e14) {
    var t9;
    try {
      for (o.d(this.TAG, "Flushing failed events", this.failedEvents); this.failedEvents.size() > 0; ) {
        let i10 = this.failedEvents.dequeue();
        i10 && (((t9 = i10.metadata) == null ? void 0 : t9.peer.peer_id) === e14 || !i10.metadata.peer.peer_id ? this.sendSingleEvent(i10) : J.sendEvent(i10));
      }
    } catch (i10) {
      o.w(this.TAG, "flushFailedEvents failed", i10);
    }
  }
  sendSingleEvent(e14) {
    try {
      this.transportProvider.sendEvent(e14), o.d(this.TAG, "Sent event", e14.name, e14);
    } catch (t9) {
      throw o.w(this.TAG, `${this.transportProvider.TAG}.sendEvent failed, adding to local storage events`, { event: e14, error: t9 }), this.failedEvents.enqueue(e14), t9;
    }
  }
};
var Ut = class extends Gt {
  constructor(t9) {
    super();
    this.transportProvider = t9;
    this.failedEvents = new Ft();
  }
};
var me = ((t9) => (t9[t9.Publish = 0] = "Publish", t9[t9.Subscribe = 1] = "Subscribe", t9))(me || {});
function tr(n18, e14) {
  var r9;
  let t9 = qe.parse(n18.sdp);
  if (!((r9 = t9.origin) != null && r9.username.startsWith("mozilla")))
    return n18;
  let i10 = e14 ? Array.from(e14.values()) : [];
  return t9.media.forEach((s11) => {
    var l5, h4, u5;
    let a4 = (l5 = s11.msid) == null ? void 0 : l5.split(" ")[0], c5 = (h4 = i10.find((m4) => m4.type === s11.type && m4.stream_id === a4)) == null ? void 0 : h4.track_id;
    c5 && (s11.msid = (u5 = s11.msid) == null ? void 0 : u5.replace(/\s(.+)/, ` ${c5}`));
  }), { type: n18.type, sdp: qe.write(t9) };
}
function ir(n18, e14) {
  var s11;
  if (!(n18 != null && n18.sdp) || !e14)
    return;
  let i10 = qe.parse(n18.sdp).media.find((a4) => Q(a4.mid) && parseInt(a4.mid) === parseInt(e14));
  return (s11 = i10 == null ? void 0 : i10.msid) == null ? void 0 : s11.split(" ")[1];
}
function rr(n18) {
  return n18.sdp.includes("usedtx=1") ? n18 : { type: n18.type, sdp: n18.sdp.replace("useinbandfec=1", "useinbandfec=1;usedtx=1") };
}
var Y = "[HMSConnection]";
var ge = class {
  constructor(e14, t9) {
    this.candidates = new Array();
    this.role = e14, this.signal = t9;
  }
  get iceConnectionState() {
    return this.nativeConnection.iceConnectionState;
  }
  get connectionState() {
    return this.nativeConnection.connectionState;
  }
  get action() {
    return this.role === 0 ? "PUBLISH" : "SUBSCRIBE";
  }
  addTransceiver(e14, t9) {
    return this.nativeConnection.addTransceiver(e14, t9);
  }
  createOffer(e14, t9) {
    return d(this, null, function* () {
      try {
        let i10 = yield this.nativeConnection.createOffer(t9);
        return o.d(Y, `[role=${this.role}] createOffer offer=${JSON.stringify(i10, null, 1)}`), rr(tr(i10, e14));
      } catch (i10) {
        throw p.WebrtcErrors.CreateOfferFailed(this.action, i10.message);
      }
    });
  }
  createAnswer(e14 = void 0) {
    return d(this, null, function* () {
      try {
        let t9 = yield this.nativeConnection.createAnswer(e14);
        return o.d(Y, `[role=${this.role}] createAnswer answer=${JSON.stringify(t9, null, 1)}`), t9;
      } catch (t9) {
        throw p.WebrtcErrors.CreateAnswerFailed(this.action, t9.message);
      }
    });
  }
  setLocalDescription(e14) {
    return d(this, null, function* () {
      try {
        o.d(Y, `[role=${this.role}] setLocalDescription description=${JSON.stringify(e14, null, 1)}`), yield this.nativeConnection.setLocalDescription(e14);
      } catch (t9) {
        throw p.WebrtcErrors.SetLocalDescriptionFailed(this.action, t9.message);
      }
    });
  }
  setRemoteDescription(e14) {
    return d(this, null, function* () {
      try {
        o.d(Y, `[role=${this.role}] setRemoteDescription description=${JSON.stringify(e14, null, 1)}`), yield this.nativeConnection.setRemoteDescription(e14);
      } catch (t9) {
        throw p.WebrtcErrors.SetRemoteDescriptionFailed(this.action, t9.message);
      }
    });
  }
  addIceCandidate(e14) {
    return d(this, null, function* () {
      if (this.nativeConnection.signalingState === "closed") {
        o.d(Y, `[role=${this.role}] addIceCandidate signalling state closed`);
        return;
      }
      o.d(Y, `[role=${this.role}] addIceCandidate candidate=${JSON.stringify(e14, null, 1)}`), yield this.nativeConnection.addIceCandidate(e14);
    });
  }
  get remoteDescription() {
    return this.nativeConnection.remoteDescription;
  }
  getSenders() {
    return this.nativeConnection.getSenders();
  }
  logSelectedIceCandidatePairs() {
    try {
      (this.role === 0 ? this.getSenders() : this.getReceivers()).forEach((t9) => {
        var r9;
        let i10 = (r9 = t9.track) == null ? void 0 : r9.kind;
        if (t9.transport) {
          let s11 = t9.transport.iceTransport, a4 = () => {
            typeof s11.getSelectedCandidatePair == "function" && (this.selectedCandidatePair = s11.getSelectedCandidatePair(), o.d(Y, `${me[this.role]} connection`, `selected ${i10 || "unknown"} candidate pair`, JSON.stringify(this.selectedCandidatePair, null, 2)));
          };
          typeof s11.onselectedcandidatepairchange == "function" && (s11.onselectedcandidatepairchange = a4), a4();
        }
      });
    } catch (e14) {
      o.w(Y, `Error in logging selected ice candidate pair for ${me[this.role]} connection`, e14);
    }
  }
  removeTrack(e14) {
    this.nativeConnection.signalingState !== "closed" && this.nativeConnection.removeTrack(e14);
  }
  setMaxBitrateAndFramerate(e14) {
    return d(this, null, function* () {
      let t9 = e14.settings.maxBitrate, i10 = e14 instanceof F && e14.settings.maxFramerate, r9 = this.getSenders().find((s11) => {
        var a4;
        return ((a4 = s11 == null ? void 0 : s11.track) == null ? void 0 : a4.id) === e14.getTrackIDBeingSent();
      });
      if (r9) {
        let s11 = r9.getParameters();
        s11.encodings.length > 0 && (t9 && (s11.encodings[0].maxBitrate = t9 * 1e3), i10 && (s11.encodings[0].maxFramerate = i10)), yield r9.setParameters(s11);
      } else
        o.w(Y, `no sender found to setMaxBitrate for track - ${e14.trackId}, sentTrackId - ${e14.getTrackIDBeingSent()}`);
    });
  }
  getStats() {
    return d(this, null, function* () {
      return yield this.nativeConnection.getStats();
    });
  }
  close() {
    return d(this, null, function* () {
      this.nativeConnection.close();
    });
  }
  getReceivers() {
    return this.nativeConnection.getReceivers();
  }
};
var je = class extends ge {
  constructor(t9, i10, r9) {
    super(0, t9);
    this.TAG = "[HMSPublishConnection]";
    this.observer = r9, this.nativeConnection = new RTCPeerConnection(i10), this.nativeConnection.createDataChannel(lt, { protocol: "SCTP" }), this.nativeConnection.onicecandidate = ({ candidate: s11 }) => {
      s11 && t9.trickle(this.role, s11);
    }, this.nativeConnection.oniceconnectionstatechange = () => {
      this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState);
    }, this.nativeConnection.onconnectionstatechange = () => {
      this.observer.onConnectionStateChange(this.nativeConnection.connectionState);
    };
  }
  initAfterJoin() {
    this.nativeConnection.onnegotiationneeded = () => d(this, null, function* () {
      o.d(this.TAG, "onnegotiationneeded"), yield this.observer.onRenegotiationNeeded();
    });
  }
};
var Qe = class {
  constructor(e14, t9, i10 = "") {
    this.TAG = "[HMSDataChannel]";
    this.nativeChannel = e14, this.observer = t9, this.metadata = i10, e14.onmessage = (r9) => {
      this.observer.onMessage(r9.data);
    };
  }
  get id() {
    return this.nativeChannel.id;
  }
  get label() {
    return this.nativeChannel.label;
  }
  get readyState() {
    return this.nativeChannel.readyState;
  }
  send(e14) {
    o.d(this.TAG, `[${this.metadata}] Sending [size=${e14.length}] message=${e14}`), this.nativeChannel.send(e14);
  }
  close() {
    this.nativeChannel.close();
  }
};
var Je = class n7 extends ge {
  constructor(t9, i10, r9, s11) {
    super(1, t9);
    this.isFlagEnabled = r9;
    this.TAG = "[HMSSubscribeConnection]";
    this.remoteStreams = /* @__PURE__ */ new Map();
    this.MAX_RETRIES = 3;
    this.pendingMessageQueue = [];
    this.eventEmitter = new import_eventemitter23.default({ maxListeners: 60 });
    this.handlePendingApiMessages = () => {
      this.eventEmitter.emit("open", true), this.pendingMessageQueue.length > 0 && (o.d(this.TAG, "Found pending message queue, sending messages"), this.pendingMessageQueue.forEach((t10) => this.sendOverApiDataChannel(t10)), this.pendingMessageQueue.length = 0);
    };
    this.sendMessage = (t10, i11) => d(this, null, function* () {
      var s12;
      ((s12 = this.apiChannel) == null ? void 0 : s12.readyState) !== "open" && (yield this.eventEmitter.waitFor("open"));
      let r10;
      for (let a4 = 0; a4 < this.MAX_RETRIES; a4++) {
        this.apiChannel.send(t10), r10 = yield this.waitForResponse(i11);
        let c5 = r10.error;
        if (c5) {
          if (c5.code === 404) {
            o.d(this.TAG, `Track not found ${i11}`, { request: t10, try: a4 + 1, error: c5 });
            break;
          }
          if (o.d(this.TAG, `Failed sending ${i11}`, { request: t10, try: a4 + 1, error: c5 }), !(c5.code / 100 === 5 || c5.code === 429))
            throw Error(`code=${c5.code}, message=${c5.message}`);
          let h4 = (2 + Math.random() * 2) * 1e3;
          yield R(h4);
        } else
          break;
      }
      return r10;
    });
    this.waitForResponse = (t10) => d(this, null, function* () {
      let i11 = yield this.eventEmitter.waitFor("message", function(s12) {
        return s12.includes(t10);
      }), r10 = JSON.parse(i11[0]);
      return o.d(this.TAG, `response for ${t10} -`, JSON.stringify(r10, null, 2)), r10;
    });
    this.observer = s11, this.nativeConnection = new RTCPeerConnection(i10), this.initNativeConnectionCallbacks();
  }
  initNativeConnectionCallbacks() {
    this.nativeConnection.oniceconnectionstatechange = () => {
      this.observer.onIceConnectionChange(this.nativeConnection.iceConnectionState);
    }, this.nativeConnection.onconnectionstatechange = () => {
      this.observer.onConnectionStateChange(this.nativeConnection.connectionState);
    }, this.nativeConnection.ondatachannel = (t9) => {
      t9.channel.label === lt && (this.apiChannel = new Qe(t9.channel, { onMessage: (i10) => {
        this.eventEmitter.emit("message", i10), this.observer.onApiChannelMessage(i10);
      } }, `role=${this.role}`), t9.channel.onopen = this.handlePendingApiMessages);
    }, this.nativeConnection.onicecandidate = (t9) => {
      t9.candidate !== null && this.signal.trickle(this.role, t9.candidate);
    }, this.nativeConnection.ontrack = (t9) => {
      var h4;
      let i10 = t9.streams[0], r9 = i10.id;
      if (!this.remoteStreams.has(r9)) {
        let u5 = new K(i10, this);
        this.remoteStreams.set(r9, u5);
      }
      i10.addEventListener("removetrack", (u5) => {
        if (u5.track.id !== t9.track.id)
          return;
        let m4 = s11.tracks.findIndex((S4) => {
          var T2;
          return S4.nativeTrack.id === u5.track.id && t9.transceiver.mid === ((T2 = S4.transceiver) == null ? void 0 : T2.mid);
        });
        if (m4 >= 0) {
          let S4 = s11.tracks[m4];
          this.observer.onTrackRemove(S4), s11.tracks.splice(m4, 1), s11.tracks.length === 0 && this.remoteStreams.delete(r9);
        }
      });
      let s11 = this.remoteStreams.get(r9), a4 = t9.track.kind === "audio" ? re : H, c5 = new a4(s11, t9.track);
      c5.transceiver = t9.transceiver;
      let l5 = ir(this.remoteDescription, (h4 = t9.transceiver) == null ? void 0 : h4.mid);
      l5 && c5.setSdpTrackId(l5), s11.tracks.push(c5), this.observer.onTrackAdd(c5);
    };
  }
  sendOverApiDataChannel(t9) {
    this.apiChannel && this.apiChannel.readyState === "open" ? this.apiChannel.send(t9) : (o.w(this.TAG, `API Data channel not ${this.apiChannel ? "open" : "present"}, queueing`, t9), this.pendingMessageQueue.push(t9));
  }
  sendOverApiDataChannelWithResponse(t9, i10) {
    return d(this, null, function* () {
      let r9 = v4_default();
      if (t9.method === "prefer-video-track-state" && this.isFlagEnabled("disableVideoTrackAutoUnsubscribe") && t9.params.max_spatial_layer === "none")
        return o.d(this.TAG, "video auto unsubscribe is disabled, request is ignored"), { id: r9 };
      let s11 = JSON.stringify(g({ id: i10 || r9, jsonrpc: "2.0" }, t9));
      return this.sendMessage(s11, r9);
    });
  }
  close() {
    return d(this, null, function* () {
      var t9;
      yield D(n7.prototype, this, "close").call(this), (t9 = this.apiChannel) == null || t9.close();
    });
  }
};
var Vt = "[InitService]";
var ze = class {
  static handleError(e14, t9) {
    switch (e14.status) {
      case 404:
        throw p.APIErrors.EndpointUnreachable("INIT", t9.message || e14.statusText);
      case 200:
        break;
      default:
        throw p.APIErrors.ServerErrors(t9.code || e14.status, "INIT", t9.message || (e14 == null ? void 0 : e14.statusText));
    }
  }
  static fetchInitConfig(a4) {
    return d(this, arguments, function* ({ token: e14, peerId: t9, userAgent: i10, initEndpoint: r9 = "https://prod-init.100ms.live", region: s11 = "" }) {
      o.d(Vt, `fetchInitConfig: initEndpoint=${r9} token=${e14} peerId=${t9} region=${s11} `);
      let c5 = ss(r9, t9, i10, s11);
      try {
        let l5 = yield fetch(c5, { headers: { Authorization: `Bearer ${e14}` } });
        try {
          let h4 = yield l5.clone().json();
          return this.handleError(l5, h4), o.d(Vt, `config is ${JSON.stringify(h4, null, 2)}`), as(h4);
        } catch (h4) {
          let u5 = yield l5.text();
          throw o.e(Vt, "json error", h4.message, u5), p.APIErrors.ServerErrors(l5.status, "INIT", u5);
        }
      } catch (l5) {
        let h4 = l5;
        throw ["Failed to fetch", "NetworkError", "ECONNRESET"].some((u5) => h4.message.includes(u5)) ? p.APIErrors.EndpointUnreachable("INIT", h4.message) : h4;
      }
    });
  }
};
function ss(n18, e14, t9, i10) {
  try {
    let r9 = new URL("/init", n18);
    return i10 && i10.trim().length > 0 && r9.searchParams.set("region", i10.trim()), r9.searchParams.set("peer_id", e14), r9.searchParams.set("user_agent_v2", t9), r9.toString();
  } catch (r9) {
    let s11 = r9;
    throw o.e(Vt, s11.name, s11.message), s11;
  }
}
function as(n18) {
  var e14;
  return M(g({}, n18), { rtcConfiguration: M(g({}, n18.rtcConfiguration), { iceServers: (e14 = n18.rtcConfiguration) == null ? void 0 : e14.ice_servers }) });
}
var Ye = class {
  constructor(e14) {
    this.TAG = "[SIGNAL]: ";
    this.pongResponseTimes = new te(5);
    this.isJoinCompleted = false;
    this.pendingTrickle = [];
    this.socket = null;
    this.callbacks = /* @__PURE__ */ new Map();
    this._isConnected = false;
    this.id = 0;
    this.onCloseHandler = () => {
    };
    this.resolvePingOnAnyResponse = () => {
      this.callbacks.forEach((e15, t9) => {
        var i10;
        ((i10 = e15.metadata) == null ? void 0 : i10.method) === "ping" && (e15.resolve({ timestamp: Date.now() }), this.callbacks.delete(t9));
      });
    };
    this.offlineListener = () => {
      o.d(this.TAG, "Window network offline"), this.setIsConnected(false, "Window network offline");
    };
    this.onlineListener = () => {
      o.d(this.TAG, "Window network online"), this.observer.onNetworkOnline();
    };
    this.observer = e14, window.addEventListener("offline", this.offlineListener), window.addEventListener("online", this.onlineListener), this.onMessageHandler = this.onMessageHandler.bind(this);
  }
  get isConnected() {
    return this._isConnected;
  }
  setIsConnected(e14, t9 = "") {
    o.d(this.TAG, `isConnected set id: ${this.id}, oldValue: ${this._isConnected}, newValue: ${e14}`), this._isConnected !== e14 && (this._isConnected && !e14 ? (this._isConnected = e14, this.rejectPendingCalls(t9), this.observer.onOffline(t9)) : !this._isConnected && e14 && (this._isConnected = e14, this.observer.onOnline()));
  }
  getPongResponseTimes() {
    return this.pongResponseTimes.toList();
  }
  internalCall(e14, t9) {
    return d(this, null, function* () {
      var s11;
      let i10 = v4_default(), r9 = { method: e14, params: t9, id: i10, jsonrpc: "2.0" };
      (s11 = this.socket) == null || s11.send(JSON.stringify(r9));
      try {
        return yield new Promise((c5, l5) => {
          this.callbacks.set(i10, { resolve: c5, reject: l5, metadata: { method: e14 } });
        });
      } catch (a4) {
        if (a4 instanceof v)
          throw a4;
        let c5 = a4;
        throw p.WebsocketMethodErrors.ServerErrors(Number(c5.code), Qt(e14), c5.message);
      }
    });
  }
  notify(e14, t9) {
    var r9, s11;
    let i10 = { method: e14, params: t9 };
    ((r9 = this.socket) == null ? void 0 : r9.readyState) === WebSocket.OPEN && ((s11 = this.socket) == null || s11.send(JSON.stringify(i10)));
  }
  open(e14) {
    return new Promise((t9, i10) => {
      let r9 = false;
      this.socket && (this.socket.close(), this.socket.removeEventListener("close", this.onCloseHandler), this.socket.removeEventListener("message", this.onMessageHandler)), this.socket = new WebSocket(e14);
      let s11 = () => {
        o.e(this.TAG, "Error from websocket"), r9 = true, i10(p.WebSocketConnectionErrors.FailedToConnect("JOIN", "Error opening websocket connection"));
      };
      this.onCloseHandler = (c5) => {
        o.w(`Websocket closed code=${c5.code}`), r9 ? this.setIsConnected(false, `code: ${c5.code}${c5.code !== 1e3 ? ", unexpected websocket close" : ""}`) : (r9 = true, i10(p.WebSocketConnectionErrors.AbnormalClose("JOIN", `Error opening websocket connection - websocket closed unexpectedly with code=${c5.code}`)));
      }, this.socket.addEventListener("error", s11);
      let a4 = () => {
        var c5, l5;
        r9 = true, t9(), this.setIsConnected(true), this.id++, (c5 = this.socket) == null || c5.removeEventListener("open", a4), (l5 = this.socket) == null || l5.removeEventListener("error", s11), this.pingPongLoop(this.id);
      };
      this.socket.addEventListener("open", a4), this.socket.addEventListener("close", this.onCloseHandler), this.socket.addEventListener("message", this.onMessageHandler);
    });
  }
  close() {
    return d(this, null, function* () {
      window.removeEventListener("offline", this.offlineListener), window.removeEventListener("online", this.onlineListener), this.socket ? (this.socket.close(1e3, "Normal Close"), this.setIsConnected(false, "code: 1000, normal websocket close"), this.socket.removeEventListener("close", this.onCloseHandler), this.socket.removeEventListener("message", this.onMessageHandler)) : this.setIsConnected(false, "websocket not connected yet");
    });
  }
  join(e14, t9, i10, r9, s11, a4, c5) {
    return d(this, null, function* () {
      if (!this.isConnected)
        throw p.WebSocketConnectionErrors.WebSocketConnectionLost("JOIN", "Failed to send join over WS connection");
      let l5 = { name: e14, disableVidAutoSub: i10, data: t9, offer: c5, server_sub_degrade: r9, simulcast: s11, onDemandTracks: a4 }, h4 = yield this.internalCall("join", l5);
      return this.isJoinCompleted = true, this.pendingTrickle.forEach(({ target: u5, candidate: m4 }) => this.trickle(u5, m4)), this.pendingTrickle.length = 0, o.d(this.TAG, `join: response=${JSON.stringify(h4, null, 1)}`), h4;
    });
  }
  trickle(e14, t9) {
    this.isJoinCompleted ? this.notify("trickle", { target: e14, candidate: t9 }) : this.pendingTrickle.push({ target: e14, candidate: t9 });
  }
  offer(e14, t9) {
    return d(this, null, function* () {
      return yield this.call("offer", { desc: e14, tracks: Object.fromEntries(t9) });
    });
  }
  answer(e14) {
    this.notify("answer", { desc: e14 });
  }
  trackUpdate(e14) {
    this.notify("track-update", { version: "1.0", tracks: Object.fromEntries(e14) });
  }
  broadcast(e14) {
    return d(this, null, function* () {
      return yield this.call("broadcast", g({ version: "1.0" }, e14.toSignalParams()));
    });
  }
  leave() {
    this.notify("leave", { version: "1.0" });
  }
  endRoom(e14, t9) {
    return d(this, null, function* () {
      yield this.call("end-room", { lock: e14, reason: t9 });
    });
  }
  sendEvent(e14) {
    if (!this.isConnected)
      throw Error(`${this.TAG} not connected. Could not send event ${e14}`);
    this.notify("analytics", e14.toSignalParams());
  }
  ping(e14) {
    let t9 = Date.now(), i10 = new Promise((s11) => {
      setTimeout(() => {
        s11(Date.now() - t9);
      }, e14 + 1);
    }), r9 = this.internalCall("ping", { timestamp: t9 }).then(() => Date.now() - t9).catch(() => Date.now() - t9);
    return Promise.race([i10, r9]);
  }
  requestRoleChange(e14) {
    return d(this, null, function* () {
      yield this.call("role-change-request", e14);
    });
  }
  requestBulkRoleChange(e14) {
    return d(this, null, function* () {
      yield this.call("role-change-request", e14);
    });
  }
  acceptRoleChangeRequest(e14) {
    return d(this, null, function* () {
      yield this.call("role-change", e14);
    });
  }
  requestTrackStateChange(e14) {
    return d(this, null, function* () {
      yield this.call("track-update-request", e14);
    });
  }
  requestMultiTrackStateChange(e14) {
    return d(this, null, function* () {
      yield this.call("change-track-mute-state-request", e14);
    });
  }
  removePeer(e14) {
    return d(this, null, function* () {
      yield this.call("peer-leave-request", e14);
    });
  }
  startRTMPOrRecording(e14) {
    return d(this, null, function* () {
      yield this.call("rtmp-start", g({ version: "1.0" }, e14));
    });
  }
  stopRTMPAndRecording() {
    return d(this, null, function* () {
      yield this.call("rtmp-stop", { version: "1.0" });
    });
  }
  startHLSStreaming(e14) {
    return d(this, null, function* () {
      yield this.call("hls-start", g({ version: "1.0" }, e14));
    });
  }
  stopHLSStreaming(e14) {
    return d(this, null, function* () {
      yield this.call("hls-stop", g({ version: "1.0" }, e14));
    });
  }
  sendHLSTimedMetadata(e14) {
    return d(this, null, function* () {
      yield this.call("hls-timed-metadata", g({ version: "1.0" }, e14));
    });
  }
  updatePeer(e14) {
    return d(this, null, function* () {
      yield this.call("peer-update", g({ version: "1.0" }, e14));
    });
  }
  setSessionMetadata(e14) {
    if (!this.isConnected)
      throw p.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to set session store value due to network disconnection");
    return this.call("set-metadata", g({ version: "1.1" }, e14));
  }
  listenMetadataChange(e14) {
    if (!this.isConnected)
      throw p.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to observe session store key due to network disconnection");
    return this.call("listen-metadata-change", { version: "1.1", keys: e14 });
  }
  getSessionMetadata(e14) {
    if (!this.isConnected)
      throw p.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to set session store value due to network disconnection");
    return this.call("get-metadata", { key: e14, version: "1.1" });
  }
  setPollInfo(e14) {
    return this.valiateConnection(), this.call("poll-info-set", g({ version: "1.0" }, e14));
  }
  getPollInfo(e14) {
    return this.valiateConnection(), this.call("poll-info-get", g({ version: "1.0" }, e14));
  }
  setPollQuestions(e14) {
    return this.valiateConnection(), this.call("poll-questions-set", g({ version: "1.0" }, e14));
  }
  startPoll(e14) {
    return this.valiateConnection(), this.call("poll-start", g({ version: "1.0" }, e14));
  }
  stopPoll(e14) {
    return this.valiateConnection(), this.call("poll-stop", g({ version: "1.0" }, e14));
  }
  getPollQuestions(e14) {
    return this.valiateConnection(), this.call("poll-questions-get", g({ version: "1.0" }, e14));
  }
  setPollResponses(e14) {
    return this.valiateConnection(), this.call("poll-response", g({ version: "1.0" }, e14));
  }
  getPollResponses(e14) {
    return this.valiateConnection(), this.call("poll-responses", g({ version: "1.0" }, e14));
  }
  getPollsList(e14) {
    return this.valiateConnection(), this.call("poll-list", g({ version: "1.0" }, e14));
  }
  getPollResult(e14) {
    return this.valiateConnection(), this.call("poll-result", g({ version: "1.0" }, e14));
  }
  valiateConnection() {
    if (!this.isConnected)
      throw p.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", "Failed to send message due to network disconnection");
  }
  onMessageHandler(e14) {
    let t9 = e14.data, i10 = JSON.parse(t9);
    if (this.resolvePingOnAnyResponse(), i10.id)
      this.handleResponseWithId(i10);
    else if (i10.method)
      this.handleResponseWithMethod(i10);
    else
      throw Error(`WebSocket message has no 'method' or 'id' field, message=${i10}`);
  }
  handleResponseWithId(e14) {
    let t9 = e14, i10 = t9.id;
    if (this.callbacks.has(i10)) {
      let r9 = this.callbacks.get(i10);
      this.callbacks.delete(i10), t9.result ? r9.resolve(t9.result) : r9.reject(t9.error);
    } else
      this.observer.onNotification(t9);
  }
  handleResponseWithMethod(e14) {
    switch (e14.method) {
      case "offer":
        this.observer.onOffer(e14.params);
        break;
      case "trickle":
        this.observer.onTrickle(e14.params);
        break;
      case "on-error":
        this.observer.onServerError(p.WebsocketMethodErrors.ServerErrors(Number(e14.params.code), "on-error", e14.params.message));
        break;
      case "on-warning":
        o.w(this.TAG, e14.params);
        break;
      default:
        this.observer.onNotification(e14);
        break;
    }
  }
  rejectPendingCalls(e14 = "") {
    this.callbacks.forEach((t9, i10) => {
      var r9, s11, a4, c5;
      ((r9 = t9.metadata) == null ? void 0 : r9.method) !== "ping" && (o.e(this.TAG, `rejecting pending callback ${(s11 = t9.metadata) == null ? void 0 : s11.method}, id=${i10}`), t9.reject(p.WebSocketConnectionErrors.WebSocketConnectionLost((a4 = t9.metadata) != null && a4.method ? Qt((c5 = t9.metadata) == null ? void 0 : c5.method) : "RECONNECT_SIGNAL", e14)), this.callbacks.delete(i10));
    });
  }
  pingPongLoop(e14) {
    return d(this, null, function* () {
      var i10, r9;
      let t9 = ((i10 = window.HMS) == null ? void 0 : i10.PING_TIMEOUT) || 12e3;
      if (this.isConnected) {
        let s11 = yield this.ping(t9);
        this.pongResponseTimes.enqueue(s11), s11 > t9 ? (o.d(this.TAG, `Pong timeout ${e14}, pageHidden=${yi()}`), this.id === e14 && this.setIsConnected(false, "ping pong failure")) : setTimeout(() => this.pingPongLoop(e14), ((r9 = window.HMS) == null ? void 0 : r9.PING_INTERVAL) || 3e3);
      }
    });
  }
  call(e14, t9) {
    return d(this, null, function* () {
      let r9 = p.WebsocketMethodErrors.ServerErrors(500, e14, `Default ${e14} error`), s11;
      for (s11 = 1; s11 <= 3; s11++)
        try {
          return o.d(this.TAG, `Try number ${s11} sending ${e14}`, t9), yield this.internalCall(e14, t9);
        } catch (a4) {
          if (r9 = a4, o.e(this.TAG, `Failed sending ${e14} try: ${s11}`, { method: e14, params: t9, error: r9 }), !(parseInt(`${r9.code / 100}`) === 5 || r9.code === 429))
            break;
          let l5 = (2 + Math.random() * 2) * 1e3;
          yield R(l5);
        }
      throw o.e(`Sending ${e14} over WS failed after ${Math.min(s11, 3)} retries`, { method: e14, params: t9, error: r9 }), r9;
    });
  }
};
var sr = () => {
  if (!w || typeof navigator.connection == "undefined")
    return;
  let n18 = navigator.connection;
  return { downlink: n18.downlink, downlinkMax: n18.downlinkMax, effectiveType: n18.effectiveType, rtt: n18.rtt, saveData: n18.saveData, type: n18.type };
};
var k = "[HMSTransport]:";
var Xe = class {
  constructor(e14, t9, i10, r9, s11, a4) {
    this.observer = e14;
    this.deviceManager = t9;
    this.store = i10;
    this.eventBus = r9;
    this.analyticsEventsService = s11;
    this.analyticsTimer = a4;
    this.state = "Disconnected";
    this.trackStates = /* @__PURE__ */ new Map();
    this.publishConnection = null;
    this.subscribeConnection = null;
    this.maxSubscribeBitrate = 0;
    this.joinRetryCount = 0;
    this.callbacks = /* @__PURE__ */ new Map();
    this.signalObserver = { onOffer: (e15) => d(this, null, function* () {
      try {
        if (!this.subscribeConnection)
          return;
        yield this.subscribeConnection.setRemoteDescription(e15), o.d(k, `[SUBSCRIBE] Adding ${this.subscribeConnection.candidates.length} ice-candidates`, this.subscribeConnection.candidates);
        for (let i11 of this.subscribeConnection.candidates)
          yield this.subscribeConnection.addIceCandidate(i11);
        this.subscribeConnection.candidates.length = 0;
        let t10 = yield this.subscribeConnection.createAnswer();
        yield this.subscribeConnection.setLocalDescription(t10), this.signal.answer(t10), o.d(k, "[role=SUBSCRIBE] onOffer renegotiation DONE \u2705");
      } catch (t10) {
        o.d(k, "[role=SUBSCRIBE] onOffer renegotiation FAILED \u274C", t10), this.state = "Failed";
        let i11;
        t10 instanceof v ? i11 = t10 : i11 = p.GenericErrors.Unknown("PUBLISH", t10.message), this.observer.onFailure(i11), this.eventBus.analytics.publish(E.subscribeFail(i11));
      }
    }), onTrickle: (e15) => d(this, null, function* () {
      let t10 = e15.target === 0 ? this.publishConnection : this.subscribeConnection;
      t10 != null && t10.remoteDescription ? yield t10.addIceCandidate(e15.candidate) : t10 == null || t10.candidates.push(e15.candidate);
    }), onNotification: (e15) => this.observer.onNotification(e15), onServerError: (e15) => d(this, null, function* () {
      yield this.observer.onStateChange("Failed", e15);
    }), onFailure: (e15) => {
      this.joinParameters && this.retryScheduler.schedule({ category: 1, error: e15, task: this.retrySignalDisconnectTask, originalState: this.state });
    }, onOffline: (e15) => d(this, null, function* () {
      o.d(k, "socket offline", Ie[this.state]);
      try {
        this.state !== "Leaving" && this.joinParameters && this.retryScheduler.schedule({ category: 1, error: p.WebSocketConnectionErrors.WebSocketConnectionLost("RECONNECT_SIGNAL", e15), task: this.retrySignalDisconnectTask, originalState: this.state });
      } catch (t10) {
        console.error(t10);
      }
    }), onOnline: () => {
      var e15;
      o.d(k, "socket online", Ie[this.state]), this.analyticsSignalTransport.flushFailedEvents((e15 = this.store.getLocalPeer()) == null ? void 0 : e15.peerId);
    }, onNetworkOnline: () => {
      this.analyticsEventsService.flushFailedClientEvents();
    } };
    this.signal = new Ye(this.signalObserver);
    this.analyticsSignalTransport = new Ut(this.signal);
    this.publishConnectionObserver = { onRenegotiationNeeded: () => d(this, null, function* () {
      yield this.performPublishRenegotiation();
    }), onIceConnectionChange: (e15) => d(this, null, function* () {
      (e15 === "disconnected" ? o.w.bind(o) : o.d.bind(o))(k, `Publish ice connection state change: ${e15}`);
    }), onConnectionStateChange: (e15) => d(this, null, function* () {
      var i11, r10, s12, a5, c6;
      (e15 === "disconnected" ? o.w.bind(o) : o.d.bind(o))(k, `Publish connection state change: ${e15}`), e15 === "connected" && ((i11 = this.publishConnection) == null || i11.logSelectedIceCandidatePairs()), e15 === "disconnected" && setTimeout(() => {
        var l6, h5, u5, m4, S4;
        ((l6 = this.publishConnection) == null ? void 0 : l6.connectionState) === "disconnected" && this.handleIceConnectionFailure(0, p.WebrtcErrors.ICEDisconnected("PUBLISH", `local candidate - ${(u5 = (h5 = this.publishConnection) == null ? void 0 : h5.selectedCandidatePair) == null ? void 0 : u5.local.candidate}; remote candidate - ${(S4 = (m4 = this.publishConnection) == null ? void 0 : m4.selectedCandidatePair) == null ? void 0 : S4.remote.candidate}`));
      }, 5e3), e15 === "failed" && (yield this.handleIceConnectionFailure(0, p.WebrtcErrors.ICEFailure("PUBLISH", `local candidate - ${(s12 = (r10 = this.publishConnection) == null ? void 0 : r10.selectedCandidatePair) == null ? void 0 : s12.local.candidate}; remote candidate - ${(c6 = (a5 = this.publishConnection) == null ? void 0 : a5.selectedCandidatePair) == null ? void 0 : c6.remote.candidate}`)));
    }) };
    this.subscribeConnectionObserver = { onApiChannelMessage: (e15) => {
      this.observer.onNotification(JSON.parse(e15));
    }, onTrackAdd: (e15) => {
      o.d(k, "[Subscribe] onTrackAdd", `${e15}`), this.observer.onTrackAdd(e15);
    }, onTrackRemove: (e15) => {
      o.d(k, "[Subscribe] onTrackRemove", `${e15}`), this.observer.onTrackRemove(e15);
    }, onIceConnectionChange: (e15) => d(this, null, function* () {
      if ((e15 === "disconnected" ? o.w.bind(o) : o.d.bind(o))(k, `Subscribe ice connection state change: ${e15}`), e15 === "connected") {
        let i11 = this.callbacks.get(Pe);
        this.callbacks.delete(Pe), i11 && i11.promise.resolve(true);
      }
    }), onConnectionStateChange: (e15) => d(this, null, function* () {
      var i11, r10, s12, a5;
      (e15 === "disconnected" ? o.w.bind(o) : o.d.bind(o))(k, `Subscribe connection state change: ${e15}`), e15 === "failed" && (yield this.handleIceConnectionFailure(1, p.WebrtcErrors.ICEFailure("SUBSCRIBE", `local candidate - ${(r10 = (i11 = this.subscribeConnection) == null ? void 0 : i11.selectedCandidatePair) == null ? void 0 : r10.local.candidate}; remote candidate - ${(a5 = (s12 = this.subscribeConnection) == null ? void 0 : s12.selectedCandidatePair) == null ? void 0 : a5.remote.candidate}`))), e15 === "disconnected" && setTimeout(() => {
        var c6, l6, h5, u5, m4;
        ((c6 = this.subscribeConnection) == null ? void 0 : c6.connectionState) === "disconnected" && this.handleIceConnectionFailure(1, p.WebrtcErrors.ICEDisconnected("SUBSCRIBE", `local candidate - ${(h5 = (l6 = this.subscribeConnection) == null ? void 0 : l6.selectedCandidatePair) == null ? void 0 : h5.local.candidate}; remote candidate - ${(m4 = (u5 = this.subscribeConnection) == null ? void 0 : u5.selectedCandidatePair) == null ? void 0 : m4.remote.candidate}`));
      }, 5e3), e15 === "connected" && this.handleSubscribeConnectionConnected();
    }) };
    this.handleLocalRoleUpdate = (i11) => d(this, [i11], function* ({ oldRole: e15, newRole: t10 }) {
      !this.doesRoleNeedWebRTC(e15) && this.doesRoleNeedWebRTC(t10) && (o.d(k, "Local peer role updated to webrtc role, creating PeerConnections and performing inital publish negotiation \u23F3"), this.createPeerConnections(), yield this.negotiateOnFirstPublish());
    });
    this.retryPublishIceFailedTask = () => d(this, null, function* () {
      if (this.publishConnection) {
        let e15 = new Promise((t10, i11) => {
          this.callbacks.set(ye, { promise: { resolve: t10, reject: i11 }, action: "RESTART_ICE", extra: {} });
        });
        yield this.performPublishRenegotiation({ iceRestart: this.publishConnection.connectionState !== "connected" }), yield e15;
      }
      return true;
    });
    this.retrySubscribeIceFailedTask = () => d(this, null, function* () {
      if (this.subscribeConnection && this.subscribeConnection.connectionState !== "connected") {
        let e15 = new Promise((i11, r10) => {
          this.callbacks.set(Pe, { promise: { resolve: i11, reject: r10 }, action: "RESTART_ICE", extra: {} });
        }), t10 = new Promise((i11) => {
          setTimeout(i11, 6e4, false);
        });
        return Promise.race([e15, t10]);
      }
      return true;
    });
    this.retrySignalDisconnectTask = () => d(this, null, function* () {
      var t10;
      o.d(k, "retrySignalDisconnectTask", { signalConnected: this.signal.isConnected }), this.signal.isConnected || (yield this.internalConnect(this.joinParameters.authToken, this.joinParameters.endpoint, this.joinParameters.peerId));
      let e15 = (t10 = this.store.getRoom()) != null && t10.joinedAt ? this.signal.isConnected && (yield this.retryPublishIceFailedTask()) : this.signal.isConnected;
      return this.signal.trackUpdate(this.trackStates), e15;
    });
    var l5, h4;
    this.webrtcInternals = new Fe(this.store, this.eventBus, (l5 = this.publishConnection) == null ? void 0 : l5.nativeConnection, (h4 = this.subscribeConnection) == null ? void 0 : h4.nativeConnection);
    let c5 = (u5, m4) => d(this, null, function* () {
      u5 !== this.state && (this.state = u5, yield this.observer.onStateChange(this.state, m4));
    });
    this.retryScheduler = new Nt(c5, this.sendErrorAnalyticsEvent.bind(this)), this.eventBus.statsUpdate.subscribe((u5) => {
      var S4, T2;
      let m4 = ((T2 = (S4 = u5.getLocalPeerStats()) == null ? void 0 : S4.subscribe) == null ? void 0 : T2.bitrate) || 0;
      this.maxSubscribeBitrate = Math.max(this.maxSubscribeBitrate, m4);
    }), this.eventBus.localAudioEnabled.subscribe(({ track: u5 }) => this.trackUpdate(u5)), this.eventBus.localVideoEnabled.subscribe(({ track: u5 }) => this.trackUpdate(u5));
  }
  getWebrtcInternals() {
    return this.webrtcInternals;
  }
  isFlagEnabled(e14) {
    var r9;
    let t9 = (r9 = this.initConfig) == null ? void 0 : r9.config;
    return ((t9 == null ? void 0 : t9.enabledFlags) || []).includes(e14);
  }
  preview(e14, t9, i10, r9, s11 = false) {
    return d(this, null, function* () {
      let a4 = yield this.connect(e14, t9, i10, r9, s11);
      return this.state = "Preview", this.observer.onStateChange(this.state), a4;
    });
  }
  join(e14, t9, i10, r9, s11 = false) {
    return d(this, null, function* () {
      o.d(k, "join: started \u23F0");
      try {
        (!this.signal.isConnected || !this.initConfig) && (yield this.connect(e14, r9, t9, i10, s11)), this.validateNotDisconnected("connect"), this.initConfig && (yield this.waitForLocalRoleAvailability(), yield this.createConnectionsAndNegotiateJoin(i10, s11), yield this.initRtcStatsMonitor(), o.d(k, "\u2705 join: Negotiated over PUBLISH connection"));
      } catch (a4) {
        o.e(k, `join: failed \u274C [token=${e14}]`, a4), this.state = "Failed";
        let c5 = a4;
        throw c5.isTerminal = c5.isTerminal || c5.code === 500, yield this.observer.onStateChange(this.state, c5), c5;
      }
      o.d(k, "\u2705 join: successful"), this.state = "Joined", this.observer.onStateChange(this.state);
    });
  }
  connect(e14, t9, i10, r9, s11 = false) {
    return d(this, null, function* () {
      this.setTransportStateForConnect(), this.joinParameters = new _t(e14, i10, r9.name, r9.metaData, t9, s11);
      try {
        return yield this.internalConnect(e14, t9, i10);
      } catch (a4) {
        if (a4 instanceof v && ([f2.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, f2.WebSocketConnectionErrors.FAILED_TO_CONNECT, f2.WebSocketConnectionErrors.ABNORMAL_CLOSE, f2.APIErrors.ENDPOINT_UNREACHABLE].includes(a4.code) || a4.code.toString().startsWith("5") || a4.code.toString().startsWith("429"))) {
          let l5 = () => d(this, null, function* () {
            return yield this.internalConnect(e14, t9, i10), !!(this.initConfig && this.initConfig.endpoint);
          });
          yield this.retryScheduler.schedule({ category: 0, error: a4, task: l5, originalState: this.state, maxFailedRetries: 5, changeState: false });
        } else
          throw a4;
      }
    });
  }
  leave(e14) {
    return d(this, null, function* () {
      var t9, i10, r9, s11;
      this.retryScheduler.reset(), this.joinParameters = void 0, o.d(k, "leaving in transport");
      try {
        if (this.state = "Leaving", (t9 = this.publishStatsAnalytics) == null || t9.stop(), (i10 = this.webrtcInternals) == null || i10.cleanup(), yield (r9 = this.publishConnection) == null ? void 0 : r9.close(), yield (s11 = this.subscribeConnection) == null ? void 0 : s11.close(), e14)
          try {
            this.signal.leave(), o.d(k, "signal leave done");
          } catch (a4) {
            o.w(k, "failed to send leave on websocket to server", a4);
          }
        this.analyticsEventsService.flushFailedClientEvents(), this.analyticsEventsService.reset(), yield this.signal.close();
      } catch (a4) {
        this.eventBus.analytics.publish(E.disconnect(a4)), o.e(k, "leave: FAILED \u274C", a4);
      } finally {
        this.state = "Disconnected", this.observer.onStateChange(this.state);
      }
    });
  }
  publish(e14) {
    return d(this, null, function* () {
      for (let t9 of e14)
        try {
          yield this.publishTrack(t9);
        } catch (i10) {
          this.eventBus.analytics.publish(E.publish({ devices: this.deviceManager.getDevices(), error: i10 }));
        }
    });
  }
  unpublish(e14) {
    return d(this, null, function* () {
      for (let t9 of e14)
        yield this.unpublishTrack(t9);
    });
  }
  sendMessage(e14) {
    return d(this, null, function* () {
      return yield this.signal.broadcast(e14);
    });
  }
  trackUpdate(e14) {
    let i10 = Array.from(this.trackStates.values()).find((r9) => e14.type === r9.type && e14.source === r9.source);
    if (i10) {
      let r9 = new $e(M(g({}, i10), { mute: !e14.enabled }));
      this.trackStates.set(i10.track_id, r9), o.d(k, "Track Update", this.trackStates, e14), this.signal.trackUpdate(/* @__PURE__ */ new Map([[i10.track_id, r9]]));
    }
  }
  changeRole(e14, t9, i10 = false) {
    return d(this, null, function* () {
      yield this.signal.requestRoleChange({ requested_for: e14.peerId, role: t9, force: i10 });
    });
  }
  changeRoleOfPeer(e14, t9, i10) {
    return d(this, null, function* () {
      yield this.signal.requestRoleChange({ requested_for: e14.peerId, role: t9, force: i10 });
    });
  }
  changeRoleOfPeersWithRoles(e14, t9) {
    return d(this, null, function* () {
      yield this.signal.requestBulkRoleChange({ roles: e14.map((i10) => i10.name), role: t9, force: true });
    });
  }
  acceptRoleChange(e14) {
    return d(this, null, function* () {
      var t9;
      yield this.signal.acceptRoleChangeRequest({ requested_by: (t9 = e14.requestedBy) == null ? void 0 : t9.peerId, role: e14.role.name, token: e14.token });
    });
  }
  endRoom(e14, t9) {
    return d(this, null, function* () {
      yield this.signal.endRoom(e14, t9);
    });
  }
  removePeer(e14, t9) {
    return d(this, null, function* () {
      yield this.signal.removePeer({ requested_for: e14, reason: t9 });
    });
  }
  startRTMPOrRecording(e14) {
    return d(this, null, function* () {
      var i10;
      let t9 = { meeting_url: e14.meetingURL, record: e14.record };
      (i10 = e14.rtmpURLs) != null && i10.length && (t9.rtmp_urls = e14.rtmpURLs), e14.resolution && (t9.resolution = e14.resolution), yield this.signal.startRTMPOrRecording(t9);
    });
  }
  stopRTMPOrRecording() {
    return d(this, null, function* () {
      yield this.signal.stopRTMPAndRecording();
    });
  }
  startHLSStreaming(e14) {
    return d(this, null, function* () {
      let t9 = {};
      e14 && e14.variants && e14.variants.length > 0 && (t9.variants = e14.variants.map((i10) => {
        let r9 = { meeting_url: i10.meetingURL };
        return i10.metadata && (r9.metadata = i10.metadata), r9;
      })), e14 != null && e14.recording && (t9.hls_recording = { single_file_per_layer: e14.recording.singleFilePerLayer, hls_vod: e14.recording.hlsVod }), yield this.signal.startHLSStreaming(t9);
    });
  }
  stopHLSStreaming(e14) {
    return d(this, null, function* () {
      var t9;
      if (e14) {
        let i10 = { variants: (t9 = e14 == null ? void 0 : e14.variants) == null ? void 0 : t9.map((r9) => {
          let s11 = { meeting_url: r9.meetingURL };
          return r9.metadata && (s11.metadata = r9.metadata), s11;
        }) };
        yield this.signal.stopHLSStreaming(i10);
      }
      yield this.signal.stopHLSStreaming();
    });
  }
  sendHLSTimedMetadata(e14) {
    return d(this, null, function* () {
      if (e14.length > 0) {
        let t9 = { metadata_objs: e14 };
        yield this.signal.sendHLSTimedMetadata(t9);
      }
    });
  }
  changeName(e14) {
    return d(this, null, function* () {
      let t9 = this.store.getLocalPeer();
      t9 && t9.name !== e14 && (yield this.signal.updatePeer({ name: e14 }));
    });
  }
  changeMetadata(e14) {
    return d(this, null, function* () {
      yield this.signal.updatePeer({ data: e14 });
    });
  }
  getSessionMetadata(e14) {
    return this.signal.getSessionMetadata(e14);
  }
  setSessionMetadata(e14) {
    return this.signal.setSessionMetadata(e14);
  }
  listenMetadataChange(e14) {
    return this.signal.listenMetadataChange(e14);
  }
  setPollInfo(e14) {
    return this.signal.setPollInfo(e14);
  }
  getPollInfo(e14) {
    return this.signal.getPollInfo(e14);
  }
  setPollQuestions(e14) {
    return this.signal.setPollQuestions(e14);
  }
  getPollQuestions(e14) {
    return this.signal.getPollQuestions(e14);
  }
  startPoll(e14) {
    return this.signal.startPoll(e14);
  }
  stopPoll(e14) {
    return this.signal.stopPoll(e14);
  }
  setPollResponses(e14) {
    return this.signal.setPollResponses(e14);
  }
  getPollResponses(e14) {
    return this.signal.getPollResponses(e14);
  }
  getPollsList(e14) {
    return this.signal.getPollsList(e14);
  }
  getPollResult(e14) {
    return this.signal.getPollResult(e14);
  }
  changeTrackState(e14) {
    return d(this, null, function* () {
      yield this.signal.requestTrackStateChange(e14);
    });
  }
  changeMultiTrackState(e14) {
    return d(this, null, function* () {
      yield this.signal.requestMultiTrackStateChange(e14);
    });
  }
  publishTrack(e14) {
    return d(this, null, function* () {
      e14.publishedTrackId = e14.getTrackIDBeingSent(), o.d(k, `\u23F3 publishTrack: trackId=${e14.trackId}, toPublishTrackId=${e14.publishedTrackId}`, `${e14}`), this.trackStates.set(e14.publishedTrackId, new $e(e14));
      let t9 = new Promise((s11, a4) => {
        this.callbacks.set(ye, { promise: { resolve: s11, reject: a4 }, action: "PUBLISH", extra: {} });
      }), i10 = e14.stream;
      i10.setConnection(this.publishConnection);
      let r9 = this.store.getSimulcastLayers(e14.source);
      i10.addTransceiver(e14, r9), o.time(`publish-${e14.trackId}-${e14.type}`), yield t9, o.timeEnd(`publish-${e14.trackId}-${e14.type}`), this.store.addTrack(e14), yield i10.setMaxBitrateAndFramerate(e14).then(() => {
        o.d(k, `Setting maxBitrate=${e14.settings.maxBitrate} kpbs${e14 instanceof F ? ` and maxFramerate=${e14.settings.maxFramerate}` : ""} for ${e14.source} ${e14.type} ${e14.trackId}`);
      }).catch((s11) => o.w(k, "Failed setting maxBitrate and maxFramerate", s11)), e14.isPublished = true, o.d(k, `\u2705 publishTrack: trackId=${e14.trackId}`, `${e14}`, this.callbacks);
    });
  }
  unpublishTrack(e14) {
    return d(this, null, function* () {
      if (o.d(k, `\u23F3 unpublishTrack: trackId=${e14.trackId}`, `${e14}`), e14.publishedTrackId && this.trackStates.has(e14.publishedTrackId))
        this.trackStates.delete(e14.publishedTrackId);
      else {
        let s11 = Array.from(this.trackStates.values()).find((a4) => e14.type === a4.type && e14.source === a4.source);
        s11 && this.trackStates.delete(s11.track_id);
      }
      let t9 = new Promise((r9, s11) => {
        this.callbacks.set(ye, { promise: { resolve: r9, reject: s11 }, action: "UNPUBLISH", extra: {} });
      });
      e14.stream.removeSender(e14), yield t9, yield e14.cleanup(), this.store.removeTrack(e14), o.d(k, `\u2705 unpublishTrack: trackId=${e14.trackId}`, this.callbacks);
    });
  }
  waitForLocalRoleAvailability() {
    if (!this.store.hasRoleDetailsArrived())
      return new Promise((e14) => {
        this.eventBus.policyChange.subscribeOnce(() => e14());
      });
  }
  createConnectionsAndNegotiateJoin(e14, t9 = false) {
    return d(this, null, function* () {
      let i10 = this.doesLocalPeerNeedWebRTC();
      i10 && this.createPeerConnections(), this.analyticsTimer.start("join_response_time"), yield this.negotiateJoinWithRetry({ name: e14.name, data: e14.metaData, autoSubscribeVideo: t9, isWebRTC: i10 }), this.analyticsTimer.end("join_response_time");
    });
  }
  createPeerConnections() {
    this.initConfig && (this.publishConnection || (this.publishConnection = new je(this.signal, this.initConfig.rtcConfiguration, this.publishConnectionObserver)), this.subscribeConnection || (this.subscribeConnection = new Je(this.signal, this.initConfig.rtcConfiguration, this.isFlagEnabled.bind(this), this.subscribeConnectionObserver)));
  }
  negotiateJoinWithRetry(s11) {
    return d(this, arguments, function* ({ name: e14, data: t9, autoSubscribeVideo: i10, isWebRTC: r9 = true }) {
      try {
        yield this.negotiateJoin({ name: e14, data: t9, autoSubscribeVideo: i10, isWebRTC: r9 });
      } catch (a4) {
        o.e(k, "Join negotiation failed \u274C", a4);
        let c5 = a4 instanceof v ? a4 : p.WebsocketMethodErrors.ServerErrors(500, "JOIN", `Websocket join error - ${a4.message}`), l5 = parseInt(`${c5.code / 100}`) === 5 || [f2.WebSocketConnectionErrors.WEBSOCKET_CONNECTION_LOST, 429].includes(c5.code);
        if (c5.code === 410 && (c5.isTerminal = true), l5) {
          this.joinRetryCount = 0, c5.isTerminal = false;
          let h4 = () => d(this, null, function* () {
            return this.joinRetryCount++, yield this.negotiateJoin({ name: e14, data: t9, autoSubscribeVideo: i10, isWebRTC: r9 });
          });
          yield this.retryScheduler.schedule({ category: 2, error: c5, task: h4, originalState: "Joined", maxFailedRetries: 3, changeState: false });
        } else
          throw a4;
      }
    });
  }
  negotiateJoin(s11) {
    return d(this, arguments, function* ({ name: e14, data: t9, autoSubscribeVideo: i10, isWebRTC: r9 = true }) {
      return r9 ? yield this.negotiateJoinWebRTC({ name: e14, data: t9, autoSubscribeVideo: i10 }) : yield this.negotiateJoinNonWebRTC({ name: e14, data: t9, autoSubscribeVideo: i10 });
    });
  }
  negotiateJoinWebRTC(r9) {
    return d(this, arguments, function* ({ name: e14, data: t9, autoSubscribeVideo: i10 }) {
      if (o.d(k, "\u23F3 join: Negotiating over PUBLISH connection"), !this.publishConnection)
        return o.e(k, "Publish peer connection not found, cannot negotiate"), false;
      let s11 = yield this.publishConnection.createOffer();
      yield this.publishConnection.setLocalDescription(s11);
      let a4 = this.isFlagEnabled("subscribeDegradation"), c5 = this.isFlagEnabled("simulcast"), l5 = this.isFlagEnabled("onDemandTracks"), h4 = yield this.signal.join(e14, t9, !i10, a4, c5, l5, s11);
      yield this.publishConnection.setRemoteDescription(h4);
      for (let u5 of this.publishConnection.candidates)
        yield this.publishConnection.addIceCandidate(u5);
      return this.publishConnection.initAfterJoin(), !!h4;
    });
  }
  negotiateJoinNonWebRTC(r9) {
    return d(this, arguments, function* ({ name: e14, data: t9, autoSubscribeVideo: i10 }) {
      o.d(k, "\u23F3 join: Negotiating Non-WebRTC");
      let s11 = this.isFlagEnabled("subscribeDegradation"), a4 = this.isFlagEnabled("simulcast"), c5 = this.isFlagEnabled("onDemandTracks");
      return !!(yield this.signal.join(e14, t9, !i10, s11, a4, c5));
    });
  }
  negotiateOnFirstPublish() {
    return d(this, null, function* () {
      if (o.d(k, "\u23F3 Negotiating offer over PUBLISH connection"), !this.publishConnection)
        return o.e(k, "Publish peer connection not found, cannot negotiate"), false;
      let e14 = yield this.publishConnection.createOffer(this.trackStates);
      yield this.publishConnection.setLocalDescription(e14);
      let t9 = yield this.signal.offer(e14, this.trackStates);
      yield this.publishConnection.setRemoteDescription(t9);
      for (let i10 of this.publishConnection.candidates)
        yield this.publishConnection.addIceCandidate(i10);
      return this.publishConnection.initAfterJoin(), !!t9;
    });
  }
  performPublishRenegotiation(e14) {
    return d(this, null, function* () {
      o.d(k, "\u23F3 [role=PUBLISH] onRenegotiationNeeded START", this.trackStates);
      let t9 = this.callbacks.get(ye);
      if (t9) {
        if (!this.publishConnection) {
          o.e(k, "Publish peer connection not found, cannot renegotiate");
          return;
        }
        try {
          let i10 = yield this.publishConnection.createOffer(this.trackStates, e14);
          yield this.publishConnection.setLocalDescription(i10), o.time("renegotiation-offer-exchange");
          let r9 = yield this.signal.offer(i10, this.trackStates);
          this.callbacks.delete(ye), o.timeEnd("renegotiation-offer-exchange"), yield this.publishConnection.setRemoteDescription(r9), t9.promise.resolve(true), o.d(k, "[role=PUBLISH] onRenegotiationNeeded DONE \u2705");
        } catch (i10) {
          let r9;
          i10 instanceof v ? r9 = i10 : r9 = p.GenericErrors.Unknown("PUBLISH", i10.message), t9.promise.reject(r9), o.d(k, "[role=PUBLISH] onRenegotiationNeeded FAILED \u274C");
        }
      }
    });
  }
  handleIceConnectionFailure(e14, t9) {
    return d(this, null, function* () {
      this.retryScheduler.isTaskInProgress(0 ? 3 : 4) || (e14 === 0 ? this.retryScheduler.schedule({ category: 3, error: t9, task: this.retryPublishIceFailedTask, originalState: "Joined" }) : this.retryScheduler.schedule({ category: 4, error: t9, task: this.retrySubscribeIceFailedTask, originalState: "Joined", maxFailedRetries: 1 }));
    });
  }
  internalConnect(e14, t9, i10) {
    return d(this, null, function* () {
      o.d(k, "connect: started \u23F0");
      let r9 = new Date();
      try {
        return this.analyticsTimer.start("init_response_time"), this.initConfig = yield ze.fetchInitConfig({ token: e14, peerId: i10, userAgent: this.store.getUserAgent(), initEndpoint: t9 }), this.analyticsTimer.end("init_response_time"), J.setWebsocketEndpoint(this.initConfig.endpoint), this.validateNotDisconnected("post init"), yield this.openSignal(e14, i10), this.observer.onConnected(), this.store.setSimulcastEnabled(this.isFlagEnabled("simulcast")), o.d(k, "Adding Analytics Transport: JsonRpcSignal"), this.analyticsEventsService.setTransport(this.analyticsSignalTransport), this.analyticsEventsService.flush(), this.initConfig;
      } catch (s11) {
        throw this.state !== "Reconnecting" && this.eventBus.analytics.publish(E.connect(s11, this.getAdditionalAnalyticsProperties(), r9, new Date(), t9)), o.e(k, "\u274C internal connect: failed", s11), s11;
      }
    });
  }
  validateNotDisconnected(e14) {
    if (this.state === "Disconnected")
      throw o.w(k, "aborting join as transport state is disconnected"), p.GenericErrors.ValidationFailed(`leave called before join could complete - stage=${e14}`);
  }
  openSignal(e14, t9) {
    return d(this, null, function* () {
      if (!this.initConfig)
        throw p.APIErrors.InitConfigNotAvailable("INIT", "Init Config not found");
      o.d(k, "\u23F3 internal connect: connecting to ws endpoint", this.initConfig.endpoint);
      let i10 = new URL(this.initConfig.endpoint);
      i10.searchParams.set("peer", t9), i10.searchParams.set("token", e14), i10.searchParams.set("user_agent_v2", this.store.getUserAgent()), this.endpoint = i10.toString(), this.analyticsTimer.start("ws_connect_time"), yield this.signal.open(this.endpoint), this.analyticsTimer.end("ws_connect_time"), this.analyticsTimer.start("on_policy_change_time"), this.analyticsTimer.start("room_state_time"), o.d(k, "\u2705 internal connect: connected to ws endpoint");
    });
  }
  initRtcStatsMonitor() {
    return d(this, null, function* () {
      var e14, t9, i10, r9, s11, a4, c5;
      (i10 = this.webrtcInternals) == null || i10.setPeerConnections({ publish: (e14 = this.publishConnection) == null ? void 0 : e14.nativeConnection, subscribe: (t9 = this.subscribeConnection) == null ? void 0 : t9.nativeConnection }), this.isFlagEnabled("publishStats") && (this.publishStatsAnalytics = new xt(this.store, this.eventBus, (s11 = (r9 = this.initConfig) == null ? void 0 : r9.config.publishStats) == null ? void 0 : s11.maxSampleWindowSize, (c5 = (a4 = this.initConfig) == null ? void 0 : a4.config.publishStats) == null ? void 0 : c5.maxSamplePushInterval));
    });
  }
  doesRoleNeedWebRTC(e14) {
    var r9, s11;
    if (!this.isFlagEnabled("nonWebRTCDisableOffer"))
      return true;
    let t9 = !!(e14.publishParams.allowed && ((r9 = e14.publishParams.allowed) == null ? void 0 : r9.length) > 0), i10 = !!(e14.subscribeParams.subscribeToRoles && ((s11 = e14.subscribeParams.subscribeToRoles) == null ? void 0 : s11.length) > 0);
    return t9 || i10;
  }
  doesLocalPeerNeedWebRTC() {
    var t9;
    let e14 = (t9 = this.store.getLocalPeer()) == null ? void 0 : t9.role;
    return e14 ? this.doesRoleNeedWebRTC(e14) : true;
  }
  handleSubscribeConnectionConnected() {
    var t9;
    (t9 = this.subscribeConnection) == null || t9.logSelectedIceCandidatePairs();
    let e14 = this.callbacks.get(Pe);
    this.callbacks.delete(Pe), e14 && e14.promise.resolve(true);
  }
  setTransportStateForConnect() {
    if (this.state === "Failed" && (this.state = "Disconnected"), this.state !== "Disconnected" && this.state !== "Reconnecting")
      throw p.WebsocketMethodErrors.AlreadyJoined("JOIN", `Cannot join a meeting in ${this.state} state`);
    this.state === "Disconnected" && (this.state = "Connecting", this.observer.onStateChange(this.state));
  }
  sendErrorAnalyticsEvent(e14, t9) {
    let i10 = this.getAdditionalAnalyticsProperties(), r9;
    switch (t9) {
      case 0:
        r9 = E.connect(e14, i10);
        break;
      case 1:
        r9 = E.disconnect(e14, i10);
        break;
      case 2:
        r9 = E.join({ error: e14, time: this.analyticsTimer.getTimeTaken("join_time"), init_response_time: this.analyticsTimer.getTimeTaken("init_response_time"), ws_connect_time: this.analyticsTimer.getTimeTaken("ws_connect_time"), on_policy_change_time: this.analyticsTimer.getTimeTaken("on_policy_change_time"), local_audio_track_time: this.analyticsTimer.getTimeTaken("local_audio_track_time"), local_video_track_time: this.analyticsTimer.getTimeTaken("local_video_track_time"), retries_join: this.joinRetryCount });
        break;
      case 3:
        r9 = E.publish({ error: e14 });
        break;
      case 4:
        r9 = E.subscribeFail(e14);
        break;
    }
    this.eventBus.analytics.publish(r9);
  }
  getSubscribeConnection() {
    return this.subscribeConnection;
  }
  getAdditionalAnalyticsProperties() {
    var a4, c5, l5, h4, u5, m4, S4, T2;
    let e14 = sr(), t9 = typeof document != "undefined" && document.hidden, i10 = this.store.getRemoteVideoTracks().filter((y2) => y2.degraded).length, r9 = (h4 = (l5 = (c5 = (a4 = this.getWebrtcInternals()) == null ? void 0 : a4.getCurrentStats()) == null ? void 0 : c5.getLocalPeerStats()) == null ? void 0 : l5.publish) == null ? void 0 : h4.bitrate, s11 = (T2 = (S4 = (m4 = (u5 = this.getWebrtcInternals()) == null ? void 0 : u5.getCurrentStats()) == null ? void 0 : m4.getLocalPeerStats()) == null ? void 0 : S4.subscribe) == null ? void 0 : T2.bitrate;
    return { network_info: e14, document_hidden: t9, num_degraded_tracks: i10, bitrate: { publish: r9, subscribe: s11 }, max_sub_bitrate: this.maxSubscribeBitrate, recent_pong_response_times: this.signal.getPongResponseTimes(), transport_state: this.state };
  }
};
var nr = (n18, e14, t9) => d(void 0, null, function* () {
  let r9 = Error("something went wrong during fetch");
  for (let s11 = 0; s11 < 4; s11++)
    try {
      let a4 = yield fetch(n18, e14), c5 = yield a4.clone().json();
      if (t9 && t9.length && !a4.ok && t9.includes(c5.code))
        throw p.APIErrors.ServerErrors(c5.code, "GET_TOKEN", c5.message, false);
      return a4;
    } catch (a4) {
      r9 = a4;
    }
  throw ["Failed to fetch", "NetworkError"].some((s11) => r9.message.includes(s11)) ? p.APIErrors.EndpointUnreachable("GET_TOKEN", r9.message) : r9;
});
function Bt(n18) {
  if (!n18 || n18.length === 0)
    throw p.APIErrors.InvalidTokenFormat("INIT", "Token cannot be an empty string or undefined or null");
  let e14 = n18.split(".");
  if (e14.length !== 3)
    throw p.APIErrors.InvalidTokenFormat("INIT", "Expected 3 '.' separate fields - header, payload and signature respectively");
  let t9 = atob(e14[1]);
  try {
    let i10 = JSON.parse(t9);
    return { roomId: i10.room_id, userId: i10.user_id, role: i10.role };
  } catch (i10) {
    throw p.APIErrors.InvalidTokenFormat("INIT", `couldn't parse to json - ${i10.message}`);
  }
}
var or = { published: false, isInitialised: false, isReconnecting: false, isPreviewInProgress: false, isPreviewCalled: false, isJoinInProgress: false, deviceManagersInitialised: false };
var cr = class {
  constructor() {
    this.TAG = "[HMSSdk]:";
    this.transportState = "Disconnected";
    this.analyticsTimer = new tt();
    this.sdkState = g({}, or);
    this.handleAutoplayError = (e14) => {
      var t9, i10;
      (i10 = (t9 = this.errorListener) == null ? void 0 : t9.onError) == null || i10.call(t9, e14);
    };
    this.observer = { onNotification: (e14) => {
      var t9;
      if (e14.method === "on-peer-leave-request") {
        this.handlePeerLeaveRequest(e14.params);
        return;
      }
      switch (e14.method) {
        case "on-policy-change":
          this.analyticsTimer.end("on_policy_change_time");
          break;
        case "peer-list":
          this.analyticsTimer.end("peer_list_time"), this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled);
          break;
        case "room-state":
          this.analyticsTimer.end("room_state_time");
          break;
        default:
      }
      (t9 = this.notificationManager) == null || t9.handleNotification(e14, this.sdkState.isReconnecting);
    }, onConnected: () => {
      this.initNotificationManager();
    }, onTrackAdd: (e14) => {
      var t9;
      (t9 = this.notificationManager) == null || t9.handleTrackAdd(e14);
    }, onTrackRemove: (e14) => {
      var t9;
      (t9 = this.notificationManager) == null || t9.handleTrackRemove(e14);
    }, onFailure: (e14) => {
      var t9;
      (t9 = this.errorListener) == null || t9.onError(e14);
    }, onStateChange: (e14, t9) => d(this, null, function* () {
      var r9, s11;
      let i10 = (a4) => d(this, null, function* () {
        var c5, l5;
        yield this.internalLeave(true, a4), !this.sdkState.isPreviewInProgress && !this.sdkState.isJoinInProgress && ((l5 = (c5 = this.errorListener) == null ? void 0 : c5.onError) == null || l5.call(c5, a4)), this.sdkState.isReconnecting = false;
      });
      switch (e14) {
        case "Preview":
        case "Joined":
          this.initNotificationManager(), this.transportState === "Reconnecting" && ((r9 = this.listener) == null || r9.onReconnected());
          break;
        case "Failed":
          yield i10(t9);
          break;
        case "Reconnecting":
          this.sdkState.isReconnecting = true, (s11 = this.listener) == null || s11.onReconnecting(t9);
          break;
      }
      this.transportState = e14, o.d(this.TAG, "Transport State Change", this.transportState);
    }) };
    this.handlePeerLeaveRequest = (e14) => {
      var r9;
      let t9 = e14.requested_by ? this.store.getPeerById(e14.requested_by) : void 0, i10 = { roomEnded: e14.room_end, reason: e14.reason, requestedBy: t9 };
      (r9 = this.listener) == null || r9.onRemovedFromRoom(i10), this.internalLeave(false);
    };
    this.handleDeviceChange = (e14) => {
      var t9, i10, r9, s11, a4, c5;
      if (o.d(this.TAG, "Device Change event", e14), (i10 = (t9 = this.deviceChangeListener) == null ? void 0 : t9.onDeviceChange) == null || i10.call(t9, e14), e14.error && e14.type) {
        let l5 = e14.type.includes("audio") ? (r9 = this.localPeer) == null ? void 0 : r9.audioTrack : (s11 = this.localPeer) == null ? void 0 : s11.videoTrack;
        (a4 = this.errorListener) == null || a4.onError(e14.error), [f2.TracksErrors.CANT_ACCESS_CAPTURE_DEVICE, f2.TracksErrors.DEVICE_IN_USE, f2.TracksErrors.DEVICE_NOT_AVAILABLE].includes(e14.error.code) && l5 && (l5.setEnabled(false), (c5 = this.listener) == null || c5.onTrackUpdate(2, l5, this.localPeer));
      }
    };
    this.handleAudioPluginError = (e14) => {
      var t9;
      o.e(this.TAG, "Audio Plugin Error event", e14), (t9 = this.errorListener) == null || t9.onError(e14);
    };
    this.handleLocalRoleUpdate = (i10) => d(this, [i10], function* ({ oldRole: e14, newRole: t9 }) {
      var r9;
      yield this.transport.handleLocalRoleUpdate({ oldRole: e14, newRole: t9 }), yield (r9 = this.roleChangeManager) == null ? void 0 : r9.handleLocalPeerRoleUpdate({ oldRole: e14, newRole: t9 });
    });
    this.sendAudioPresenceFailed = () => {
      let e14 = p.TracksErrors.NoAudioDetected("PREVIEW");
      o.w(this.TAG, "Audio Presence Failure", this.transportState, e14);
    };
    this.sendJoinAnalyticsEvent = (e14 = false, t9) => {
      this.eventBus.analytics.publish(E.join(M(g({ error: t9 }, this.analyticsTimer.getTimes()), { time: this.analyticsTimer.getTimeTaken("join_time"), is_preview_called: e14, retries_join: this.transport.joinRetryCount })));
    };
    this.sendPreviewAnalyticsEvent = (e14) => {
      this.eventBus.analytics.publish(E.preview(M(g({ error: e14 }, this.analyticsTimer.getTimes()), { time: this.analyticsTimer.getTimeTaken("preview_time") })));
    };
    this.sendAnalyticsEvent = (e14) => {
      this.analyticsEventsService.queue(e14).flush();
    };
  }
  initNotificationManager() {
    this.notificationManager || (this.notificationManager = new Rt(this.store, this.eventBus, this.transport, this.listener, this.audioListener));
  }
  initStoreAndManagers() {
    var e14;
    if (this.sdkState.isInitialised) {
      (e14 = this.notificationManager) == null || e14.setListener(this.listener), this.audioSinkManager.setListener(this.listener), this.interactivityCenter.setListener(this.listener);
      return;
    }
    this.sdkState.isInitialised = true, this.store = new Ue(), this.eventBus = new St(), this.wakeLockManager = new pt(), this.networkTestManager = new ht(this.eventBus, this.listener), this.playlistManager = new We(this, this.eventBus), this.deviceManager = new Be(this.store, this.eventBus), this.audioSinkManager = new Ve(this.store, this.deviceManager, this.eventBus), this.audioOutput = new gt(this.deviceManager, this.audioSinkManager), this.audioSinkManager.setListener(this.listener), this.eventBus.autoplayError.subscribe(this.handleAutoplayError), this.localTrackManager = new j(this.store, this.observer, this.deviceManager, this.eventBus, this.analyticsTimer), this.analyticsEventsService = new mt(this.store), this.transport = new Xe(this.observer, this.deviceManager, this.store, this.eventBus, this.analyticsEventsService, this.analyticsTimer), this.sessionStore = new Ht(this.transport), this.interactivityCenter = new Ke(this.transport, this.store, this.listener), this.eventBus.analytics.subscribe(this.sendAnalyticsEvent), this.eventBus.deviceChange.subscribe(this.handleDeviceChange), this.eventBus.audioPluginFailed.subscribe(this.handleAudioPluginError);
  }
  validateJoined(e14) {
    if (!this.localPeer)
      throw p.GenericErrors.NotConnected("VALIDATION", `Not connected - ${e14}`);
  }
  sendHLSAnalytics(e14) {
    this.sendAnalyticsEvent(E.hlsPlayerError(e14));
  }
  refreshDevices() {
    return d(this, null, function* () {
      this.validateJoined("refreshDevices"), yield this.deviceManager.init(true);
    });
  }
  getWebrtcInternals() {
    var e14;
    return (e14 = this.transport) == null ? void 0 : e14.getWebrtcInternals();
  }
  getSessionStore() {
    return this.sessionStore;
  }
  getPlaylistManager() {
    return this.playlistManager;
  }
  getRecordingState() {
    var e14;
    return (e14 = this.store.getRoom()) == null ? void 0 : e14.recording;
  }
  getRTMPState() {
    var e14;
    return (e14 = this.store.getRoom()) == null ? void 0 : e14.rtmp;
  }
  getHLSState() {
    var e14;
    return (e14 = this.store.getRoom()) == null ? void 0 : e14.hls;
  }
  getTemplateAppData() {
    return this.store.getTemplateAppData();
  }
  getInteractivityCenter() {
    return this.interactivityCenter;
  }
  get localPeer() {
    var e14;
    return (e14 = this.store) == null ? void 0 : e14.getLocalPeer();
  }
  preview(e14, t9) {
    return d(this, null, function* () {
      if (ai(), si(), this.sdkState.isPreviewInProgress)
        return Promise.reject(p.GenericErrors.PreviewAlreadyInProgress("PREVIEW", "Preview already called"));
      this.analyticsTimer.start("preview_time"), this.setUpPreview(e14, t9), e14.alwaysRequestPermissions && this.localTrackManager.requestPermissions().then(() => d(this, null, function* () {
        yield this.initDeviceManagers();
      }));
      let i10 = false, r9 = false, s11 = setTimeout(() => {
        var a4, c5;
        (!i10 || !r9) && ((c5 = (a4 = this.listener) == null ? void 0 : a4.onNetworkQuality) == null || c5.call(a4, -1));
      }, 3e3);
      return new Promise((a4, c5) => {
        let l5 = () => d(this, null, function* () {
          var S4;
          if (this.localPeer) {
            let T2 = e14.asRole && this.store.getPolicyForRole(e14.asRole);
            this.localPeer.asRole = T2 || this.localPeer.role;
          }
          let u5 = yield this.localTrackManager.getTracksToPublish(e14.settings);
          u5.forEach((T2) => this.setLocalPeerTrack(T2)), (S4 = this.localPeer) != null && S4.audioTrack && this.initPreviewTrackAudioLevelMonitor(), yield this.initDeviceManagers(), this.sdkState.isPreviewInProgress = false, this.analyticsTimer.end("preview_time");
          let m4 = this.store.getRoom();
          m4 && t9.onPreview(m4, u5), this.sendPreviewAnalyticsEvent(), a4();
        }), h4 = (u5) => {
          var m4;
          this.analyticsTimer.end("preview_time"), u5 && ((m4 = this.errorListener) == null || m4.onError(u5)), this.sendPreviewAnalyticsEvent(u5), this.sdkState.isPreviewInProgress = false, c5(u5);
        };
        this.eventBus.policyChange.subscribeOnce(l5), this.eventBus.leave.subscribeOnce(h4), this.transport.preview(e14.authToken, e14.initEndpoint, this.localPeer.peerId, { name: e14.userName, metaData: e14.metaData || "" }, e14.autoVideoSubscribe).then((u5) => {
          var m4;
          i10 = true, clearTimeout(s11), u5 && e14.captureNetworkQualityInPreview && this.networkTestManager.start((m4 = u5.config) == null ? void 0 : m4.networkHealth).then(() => {
            r9 = true;
          });
        }).catch(h4);
      });
    });
  }
  join(e14, t9) {
    return d(this, null, function* () {
      var l5, h4, u5, m4, S4, T2;
      if (ai(), si(), this.sdkState.isPreviewInProgress)
        throw p.GenericErrors.NotReady("JOIN", "Preview is in progress, can't join");
      this.analyticsTimer.start("join_time"), this.sdkState.isJoinInProgress = true;
      let { roomId: i10, userId: r9, role: s11 } = Bt(e14.authToken), a4 = ((h4 = (l5 = this.localPeer) == null ? void 0 : l5.asRole) == null ? void 0 : h4.name) || ((m4 = (u5 = this.localPeer) == null ? void 0 : u5.role) == null ? void 0 : m4.name);
      (S4 = this.networkTestManager) == null || S4.stop(), this.listener = t9, this.commonSetup(e14, i10, t9), this.removeDevicesFromConfig(e14), this.store.setConfig(e14), this.store.createAndSetUserAgent(this.frameworkInfo), ee.resumeContext();
      let c5 = this.store.getConfig();
      c5 != null && c5.autoManageWakeLock && this.wakeLockManager.acquireLock(), this.localPeer ? (this.localPeer.name = e14.userName, this.localPeer.role = this.store.getPolicyForRole(s11), this.localPeer.customerUserId = r9, this.localPeer.metadata = e14.metaData, delete this.localPeer.asRole) : this.createAndAddLocalPeerToStore(e14, s11, r9), this.roleChangeManager = new Ge(this.store, this.transport, this.deviceManager, this.getAndPublishTracks.bind(this), this.removeTrack.bind(this), this.listener), this.eventBus.localRoleUpdate.subscribe(this.handleLocalRoleUpdate), o.d(this.TAG, `\u23F3 Joining room ${i10}`), o.time(`join-room-${i10}`);
      try {
        yield this.transport.join(e14.authToken, this.localPeer.peerId, { name: e14.userName, metaData: e14.metaData }, e14.initEndpoint, e14.autoVideoSubscribe), o.d(this.TAG, `\u2705 Joined room ${i10}`), this.analyticsTimer.start("peer_list_time"), yield this.notifyJoin(), this.sdkState.isJoinInProgress = false, yield this.publish(e14.settings, a4);
      } catch (y2) {
        throw this.analyticsTimer.end("join_time"), this.sdkState.isJoinInProgress = false, (T2 = this.listener) == null || T2.onError(y2), this.sendJoinAnalyticsEvent(this.sdkState.isPreviewCalled, y2), o.e(this.TAG, "Unable to join room", y2), y2;
      }
      o.timeEnd(`join-room-${i10}`);
    });
  }
  stringifyMetadata(e14) {
    e14.metaData && typeof e14.metaData != "string" ? e14.metaData = JSON.stringify(e14.metaData) : e14.metaData || (e14.metaData = "");
  }
  cleanup() {
    var e14, t9, i10;
    this.cleanDeviceManagers(), this.eventBus.analytics.unsubscribe(this.sendAnalyticsEvent), this.analyticsTimer.cleanup(), O.cleanup(), this.playlistManager.cleanup(), (e14 = this.wakeLockManager) == null || e14.cleanup(), j.cleanup(), this.notificationManager = void 0, o.cleanup(), this.sdkState = g({}, or), this.localPeer && ((t9 = this.localPeer.audioTrack) == null || t9.cleanup(), this.localPeer.audioTrack = void 0, (i10 = this.localPeer.videoTrack) == null || i10.cleanup(), this.localPeer.videoTrack = void 0), this.store.cleanup(), this.listener = void 0, this.roleChangeManager && this.eventBus.localRoleUpdate.unsubscribe(this.handleLocalRoleUpdate);
  }
  leave(e14) {
    return this.internalLeave(e14);
  }
  internalLeave(e14 = true, t9) {
    return d(this, null, function* () {
      var r9, s11, a4;
      let i10 = (r9 = this.store) == null ? void 0 : r9.getRoom();
      if (i10) {
        let c5 = i10.id;
        (s11 = this.networkTestManager) == null || s11.stop(), this.eventBus.leave.publish(t9), o.d(this.TAG, `\u23F3 Leaving room ${c5}`), yield (a4 = this.transport) == null ? void 0 : a4.leave(e14), this.cleanup(), o.d(this.TAG, `\u2705 Left room ${c5}`);
      }
    });
  }
  getAuthTokenByRoomCode(e14, t9) {
    return d(this, null, function* () {
      let i10 = (t9 || {}).endpoint || "https://auth.100ms.live/v2/token";
      this.analyticsTimer.start("GET_TOKEN");
      let r9 = yield nr(i10, { method: "POST", body: JSON.stringify({ code: e14.roomCode, user_id: e14.userId }) }, [429, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]), s11 = yield r9.json();
      if (this.analyticsTimer.end("GET_TOKEN"), !r9.ok)
        throw p.APIErrors.ServerErrors(s11.code, "GET_TOKEN", s11.message, false);
      let { token: a4 } = s11;
      if (!a4)
        throw Error(s11.message);
      return a4;
    });
  }
  getLocalPeer() {
    return this.store.getLocalPeer();
  }
  getPeers() {
    return this.store.getPeers();
  }
  getPeerMap() {
    return this.store.getPeerMap();
  }
  getAudioOutput() {
    return this.audioOutput;
  }
  sendMessage(e14, t9) {
    this.sendMessageInternal({ message: t9, type: e14 });
  }
  sendBroadcastMessage(e14, t9) {
    return d(this, null, function* () {
      return yield this.sendMessageInternal({ message: e14, type: t9 });
    });
  }
  sendGroupMessage(e14, t9, i10) {
    return d(this, null, function* () {
      let r9 = this.store.getKnownRoles();
      if ((t9.filter((a4) => r9[a4.name]) || []).length === 0)
        throw p.GenericErrors.ValidationFailed("No valid role is present", t9);
      return yield this.sendMessageInternal({ message: e14, recipientRoles: t9, type: i10 });
    });
  }
  sendDirectMessage(e14, t9, i10) {
    return d(this, null, function* () {
      var s11;
      if (!this.store.getPeerById(t9.peerId))
        throw p.GenericErrors.ValidationFailed("Invalid peer - peer not present in the room", t9);
      if (((s11 = this.localPeer) == null ? void 0 : s11.peerId) === t9.peerId)
        throw p.GenericErrors.ValidationFailed("Cannot send message to self");
      return yield this.sendMessageInternal({ message: e14, recipientPeer: t9, type: i10 });
    });
  }
  sendMessageInternal(s11) {
    return d(this, arguments, function* ({ recipientRoles: e14, recipientPeer: t9, type: i10 = "chat", message: r9 }) {
      if (r9.replace(/\u200b/g, " ").trim() === "")
        throw o.w(this.TAG, "sendMessage", "Ignoring empty message send"), p.GenericErrors.ValidationFailed("Empty message not allowed");
      let a4 = new ne({ sender: this.localPeer, type: i10, message: r9, recipientPeer: t9, recipientRoles: e14, time: new Date() });
      o.d(this.TAG, "Sending Message: ", a4);
      let c5 = yield this.transport.sendMessage(a4);
      return a4.time = new Date(c5.timestamp), a4.id = c5.message_id, a4;
    });
  }
  startScreenShare(e14, t9) {
    return d(this, null, function* () {
      var c5, l5, h4;
      let i10 = this.store.getPublishParams();
      if (!i10)
        return;
      let { allowed: r9 } = i10;
      if (!(r9 && r9.includes("screen"))) {
        o.e(this.TAG, `Role ${(c5 = this.localPeer) == null ? void 0 : c5.role} cannot share screen`);
        return;
      }
      if ((h4 = (l5 = this.localPeer) == null ? void 0 : l5.auxiliaryTracks) != null && h4.find((u5) => u5.source === "screen"))
        throw Error("Cannot share multiple screens");
      let a4 = yield this.getScreenshareTracks(e14, t9);
      if (!this.localPeer) {
        o.d(this.TAG, "Screenshared when not connected"), a4.forEach((u5) => {
          u5.cleanup();
        });
        return;
      }
      yield this.transport.publish(a4), a4.forEach((u5) => {
        var m4, S4, T2;
        u5.peerId = (m4 = this.localPeer) == null ? void 0 : m4.peerId, (S4 = this.localPeer) == null || S4.auxiliaryTracks.push(u5), (T2 = this.listener) == null || T2.onTrackUpdate(0, u5, this.localPeer);
      });
    });
  }
  stopEndedScreenshare(e14) {
    return d(this, null, function* () {
      o.d(this.TAG, "\u2705 Screenshare ended natively"), yield this.stopScreenShare(), e14();
    });
  }
  stopScreenShare() {
    return d(this, null, function* () {
      var t9;
      o.d(this.TAG, "\u2705 Screenshare ended from app");
      let e14 = (t9 = this.localPeer) == null ? void 0 : t9.auxiliaryTracks.filter((i10) => i10.source === "screen");
      if (e14)
        for (let i10 of e14)
          yield this.removeTrack(i10.trackId);
    });
  }
  addTrack(e14, t9 = "regular") {
    return d(this, null, function* () {
      var h4, u5, m4, S4;
      if (!e14) {
        o.w(this.TAG, "Please pass a valid MediaStreamTrack");
        return;
      }
      if (!this.localPeer)
        throw p.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot addTrack");
      if (this.localPeer.auxiliaryTracks.find((T2) => T2.trackId === e14.id))
        return;
      let r9 = e14.kind, s11 = new MediaStream([e14]), a4 = new se(s11), c5 = r9 === "audio" ? pe : F, l5 = new c5(a4, e14, t9, this.eventBus);
      this.setPlaylistSettings({ track: e14, hmsTrack: l5, source: t9 }), yield (h4 = this.transport) == null ? void 0 : h4.publish([l5]), l5.peerId = (u5 = this.localPeer) == null ? void 0 : u5.peerId, (m4 = this.localPeer) == null || m4.auxiliaryTracks.push(l5), (S4 = this.listener) == null || S4.onTrackUpdate(0, l5, this.localPeer);
    });
  }
  removeTrack(e14, t9 = false) {
    return d(this, null, function* () {
      var r9;
      if (!this.localPeer)
        throw p.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot removeTrack");
      let i10 = this.localPeer.auxiliaryTracks.findIndex((s11) => s11.trackId === e14);
      if (i10 > -1) {
        let s11 = this.localPeer.auxiliaryTracks[i10];
        s11.isPublished ? yield this.transport.unpublish([s11]) : yield s11.cleanup(), t9 || this.stopPlaylist(s11), this.localPeer.auxiliaryTracks.splice(i10, 1), (r9 = this.listener) == null || r9.onTrackUpdate(1, s11, this.localPeer);
      } else
        o.w(this.TAG, `No track found for ${e14}`);
    });
  }
  setAnalyticsLevel(e14) {
    this.analyticsEventsService.level = e14;
  }
  setLogLevel(e14) {
    o.level = e14;
  }
  addAudioListener(e14) {
    var t9;
    this.audioListener = e14, (t9 = this.notificationManager) == null || t9.setAudioListener(e14);
  }
  addConnectionQualityListener(e14) {
    var t9;
    (t9 = this.notificationManager) == null || t9.setConnectionQualityListener(e14);
  }
  changeRole(e14, t9, i10 = false) {
    return d(this, null, function* () {
      var r9;
      !e14.role || e14.role.name === t9 || (yield (r9 = this.transport) == null ? void 0 : r9.changeRoleOfPeer(e14, t9, i10));
    });
  }
  changeRoleOfPeer(e14, t9, i10 = false) {
    return d(this, null, function* () {
      var r9;
      !e14.role || e14.role.name === t9 || (yield (r9 = this.transport) == null ? void 0 : r9.changeRoleOfPeer(e14, t9, i10));
    });
  }
  changeRoleOfPeersWithRoles(e14, t9) {
    return d(this, null, function* () {
      var i10;
      e14.length <= 0 || !t9 || (yield (i10 = this.transport) == null ? void 0 : i10.changeRoleOfPeersWithRoles(e14, t9));
    });
  }
  acceptChangeRole(e14) {
    return d(this, null, function* () {
      var t9;
      yield (t9 = this.transport) == null ? void 0 : t9.acceptRoleChange(e14);
    });
  }
  endRoom(e14, t9) {
    return d(this, null, function* () {
      var i10;
      if (!this.localPeer)
        throw p.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot end room");
      yield (i10 = this.transport) == null ? void 0 : i10.endRoom(e14, t9), yield this.leave();
    });
  }
  removePeer(e14, t9) {
    return d(this, null, function* () {
      var i10;
      if (!this.localPeer)
        throw p.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot remove peer");
      if (!this.store.getPeerById(e14.peerId))
        throw p.GenericErrors.ValidationFailed("Invalid peer, given peer not present in room", e14);
      yield (i10 = this.transport) == null ? void 0 : i10.removePeer(e14.peerId, t9);
    });
  }
  startRTMPOrRecording(e14) {
    return d(this, null, function* () {
      var t9;
      if (!this.localPeer)
        throw p.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot start streaming or recording");
      yield (t9 = this.transport) == null ? void 0 : t9.startRTMPOrRecording(e14);
    });
  }
  stopRTMPAndRecording() {
    return d(this, null, function* () {
      var e14;
      if (!this.localPeer)
        throw p.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot stop streaming or recording");
      yield (e14 = this.transport) == null ? void 0 : e14.stopRTMPOrRecording();
    });
  }
  startHLSStreaming(e14) {
    return d(this, null, function* () {
      var t9;
      if (!this.localPeer)
        throw p.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot start HLS streaming");
      yield (t9 = this.transport) == null ? void 0 : t9.startHLSStreaming(e14);
    });
  }
  stopHLSStreaming(e14) {
    return d(this, null, function* () {
      var t9;
      if (!this.localPeer)
        throw p.GenericErrors.NotConnected("VALIDATION", "No local peer present, cannot stop HLS streaming");
      yield (t9 = this.transport) == null ? void 0 : t9.stopHLSStreaming(e14);
    });
  }
  sendHLSTimedMetadata(e14) {
    return d(this, null, function* () {
      var t9;
      this.validateJoined("sendHLSTimedMetadata"), yield (t9 = this.transport) == null ? void 0 : t9.sendHLSTimedMetadata(e14);
    });
  }
  changeName(e14) {
    return d(this, null, function* () {
      var t9, i10;
      this.validateJoined("changeName"), yield (t9 = this.transport) == null ? void 0 : t9.changeName(e14), (i10 = this.notificationManager) == null || i10.updateLocalPeer({ name: e14 });
    });
  }
  changeMetadata(e14) {
    return d(this, null, function* () {
      var t9, i10;
      this.validateJoined("changeMetadata"), yield (t9 = this.transport) == null ? void 0 : t9.changeMetadata(e14), (i10 = this.notificationManager) == null || i10.updateLocalPeer({ metadata: e14 });
    });
  }
  setSessionMetadata(e14) {
    return d(this, null, function* () {
      yield this.transport.setSessionMetadata({ key: "default", data: e14 });
    });
  }
  getSessionMetadata() {
    return d(this, null, function* () {
      return (yield this.transport.getSessionMetadata("default")).data;
    });
  }
  getRoles() {
    return Object.values(this.store.getKnownRoles());
  }
  changeTrackState(e14, t9) {
    return d(this, null, function* () {
      var r9;
      if (e14.type === "video" && e14.source !== "regular") {
        o.w(this.TAG, "Muting non-regular video tracks is currently not supported");
        return;
      }
      if (e14.enabled === t9) {
        o.w(this.TAG, `Aborting change track state, track already has enabled - ${t9}`, e14);
        return;
      }
      if (!this.store.getTrackById(e14.trackId))
        throw p.GenericErrors.ValidationFailed("No track found for change track state", e14);
      let i10 = this.store.getPeerByTrackId(e14.trackId);
      if (!i10)
        throw p.GenericErrors.ValidationFailed("No peer found for change track state", e14);
      yield (r9 = this.transport) == null ? void 0 : r9.changeTrackState({ requested_for: i10.peerId, track_id: e14.trackId, stream_id: e14.stream.id, mute: !t9 });
    });
  }
  changeMultiTrackState(e14) {
    return d(this, null, function* () {
      var a4;
      if (typeof e14.enabled != "boolean")
        throw p.GenericErrors.ValidationFailed("Pass a boolean for enabled");
      let { enabled: t9, roles: i10, type: r9, source: s11 } = e14;
      yield (a4 = this.transport) == null ? void 0 : a4.changeMultiTrackState({ value: !t9, type: r9, source: s11, roles: i10 == null ? void 0 : i10.map((c5) => c5 == null ? void 0 : c5.name) });
    });
  }
  setFrameworkInfo(e14) {
    this.frameworkInfo = e14;
  }
  attachVideo(e14, t9) {
    return d(this, null, function* () {
      let i10 = this.store.getConfig();
      i10 != null && i10.autoManageVideo ? e14.attach(t9) : yield e14.addSink(t9);
    });
  }
  detachVideo(e14, t9) {
    return d(this, null, function* () {
      let i10 = this.store.getConfig();
      i10 != null && i10.autoManageVideo ? e14.detach(t9) : yield e14.removeSink(t9);
    });
  }
  publish(e14, t9) {
    return d(this, null, function* () {
      var i10, r9, s11;
      if ([this.store.getPublishParams(), !this.sdkState.published, !ce].every((a4) => !!a4)) {
        let a4 = t9 && t9 !== ((r9 = (i10 = this.localPeer) == null ? void 0 : i10.role) == null ? void 0 : r9.name) ? () => {
          var c5;
          return (c5 = this.roleChangeManager) == null ? void 0 : c5.diffRolesAndPublishTracks({ oldRole: this.store.getPolicyForRole(t9), newRole: this.localPeer.role });
        } : () => this.getAndPublishTracks(e14);
        yield (s11 = a4 == null ? void 0 : a4()) == null ? void 0 : s11.catch((c5) => {
          var l5;
          o.e(this.TAG, "Error in publish", c5), (l5 = this.listener) == null || l5.onError(c5);
        });
      }
    });
  }
  getAndPublishTracks(e14) {
    return d(this, null, function* () {
      var i10, r9;
      let t9 = yield this.localTrackManager.getTracksToPublish(e14);
      yield this.setAndPublishTracks(t9), (r9 = (i10 = this.localPeer) == null ? void 0 : i10.audioTrack) == null || r9.initAudioLevelMonitor(), this.sdkState.published = true;
    });
  }
  setAndPublishTracks(e14) {
    return d(this, null, function* () {
      var t9;
      for (let i10 of e14)
        yield this.transport.publish([i10]), this.setLocalPeerTrack(i10), (t9 = this.listener) == null || t9.onTrackUpdate(0, i10, this.localPeer);
      yield this.initDeviceManagers();
    });
  }
  setLocalPeerTrack(e14) {
    var t9;
    switch (e14.peerId = (t9 = this.localPeer) == null ? void 0 : t9.peerId, e14.type) {
      case "audio":
        this.localPeer.audioTrack = e14;
        break;
      case "video":
        this.localPeer.videoTrack = e14;
        break;
    }
  }
  initDeviceManagers() {
    return d(this, null, function* () {
      var e14, t9, i10, r9, s11;
      this.sdkState.deviceManagersInitialised || (this.sdkState.deviceManagersInitialised = true, yield this.deviceManager.init(), (yield this.deviceManager.updateOutputDevice((t9 = (e14 = this.store.getConfig()) == null ? void 0 : e14.settings) == null ? void 0 : t9.audioOutputDeviceId)) || (yield this.deviceManager.updateOutputDevice((r9 = (i10 = O.getSelection()) == null ? void 0 : i10.audioOutput) == null ? void 0 : r9.deviceId)), this.audioSinkManager.init((s11 = this.store.getConfig()) == null ? void 0 : s11.audioSinkElementId));
    });
  }
  cleanDeviceManagers() {
    this.eventBus.deviceChange.unsubscribe(this.handleDeviceChange), this.eventBus.audioPluginFailed.unsubscribe(this.handleAudioPluginError), this.eventBus.autoplayError.unsubscribe(this.handleAutoplayError), this.deviceManager.cleanup(), this.audioSinkManager.cleanup();
  }
  initPreviewTrackAudioLevelMonitor() {
    var t9;
    let e14 = (t9 = this.localPeer) == null ? void 0 : t9.audioTrack;
    e14 == null || e14.initAudioLevelMonitor(), this.eventBus.trackAudioLevelUpdate.subscribe((i10) => {
      var s11;
      let r9 = i10 && i10.track.trackId === (e14 == null ? void 0 : e14.trackId) ? [{ audioLevel: i10.audioLevel, peer: this.localPeer, track: e14 }] : [];
      this.store.updateSpeakers(r9), (s11 = this.audioListener) == null || s11.onAudioLevelUpdate(r9);
    }), this.eventBus.localAudioSilence.subscribe(this.sendAudioPresenceFailed);
  }
  notifyJoin() {
    var i10;
    let e14 = this.store.getLocalPeer(), t9 = this.store.getRoom();
    if (!t9) {
      o.w(this.TAG, "notify join - room not present");
      return;
    }
    if (t9.joinedAt = new Date(), e14 && (e14.joinedAt = t9.joinedAt), e14 != null && e14.role) {
      this.analyticsTimer.end("join_time"), (i10 = this.listener) == null || i10.onJoin(t9);
      return;
    }
    return new Promise((r9, s11) => {
      this.eventBus.policyChange.subscribeOnce(() => {
        var a4;
        this.analyticsTimer.end("join_time"), (a4 = this.listener) == null || a4.onJoin(t9), r9();
      }), this.eventBus.leave.subscribeOnce((a4) => {
        s11(a4);
      });
    });
  }
  setUpPreview(e14, t9) {
    this.listener = t9, this.sdkState.isPreviewCalled = true, this.sdkState.isPreviewInProgress = true;
    let { roomId: i10, userId: r9, role: s11 } = Bt(e14.authToken);
    this.commonSetup(e14, i10, t9), this.store.setConfig(e14), this.store.createAndSetUserAgent(this.frameworkInfo), this.createAndAddLocalPeerToStore(e14, s11, r9, e14.asRole);
  }
  setPlaylistSettings(r9) {
    return d(this, arguments, function* ({ track: e14, hmsTrack: t9, source: i10 }) {
      if (i10 === "videoplaylist") {
        let s11 = {};
        if (e14.kind === "audio")
          s11.maxBitrate = 64;
        else {
          s11.maxBitrate = 1e3;
          let { width: a4, height: c5 } = e14.getSettings();
          s11.width = a4, s11.height = c5;
        }
        yield t9.setSettings(s11);
      } else
        i10 === "audioplaylist" && (yield t9.setSettings({ maxBitrate: 64 }));
    });
  }
  createAndAddLocalPeerToStore(e14, t9, i10, r9) {
    let s11 = this.store.getPolicyForRole(t9), a4 = r9 ? this.store.getPolicyForRole(r9) : void 0, c5 = new Ce({ name: e14.userName || "", customerUserId: i10, metadata: e14.metaData || "", role: s11, asRole: a4 || s11 });
    this.store.addPeer(c5);
  }
  commonSetup(e14, t9, i10) {
    this.stringifyMetadata(e14), e14.initEndpoint || (e14.initEndpoint = "https://prod-init.100ms.live"), this.errorListener = i10, this.deviceChangeListener = i10, this.initStoreAndManagers(), this.store.setErrorListener(this.errorListener), this.store.getRoom() || this.store.setRoom(new Re(t9));
  }
  removeDevicesFromConfig(e14) {
    this.store.getConfig() && e14.settings && (delete e14.settings.audioOutputDeviceId, delete e14.settings.videoDeviceId, delete e14.settings.audioInputDeviceId);
  }
  getScreenshareTracks(e14, t9) {
    return d(this, null, function* () {
      let [i10, r9] = yield this.localTrackManager.getLocalScreen(t9), s11 = () => {
        this.stopEndedScreenshare(e14);
      }, a4 = [];
      if (t9 != null && t9.audioOnly) {
        if (i10.nativeTrack.stop(), !r9)
          throw p.TracksErrors.NothingToReturn("TRACK", "Select share audio when sharing screen", "No audio found");
        a4.push(r9), r9.nativeTrack.addEventListener("ended", s11);
      } else
        a4.push(i10), i10.nativeTrack.addEventListener("ended", s11), r9 && a4.push(r9);
      return a4;
    });
  }
  stopPlaylist(e14) {
    e14.source === "audioplaylist" ? this.playlistManager.stop("audio") : e14.source === "videoplaylist" && this.playlistManager.stop("video");
  }
};

// node_modules/immer/dist/immer.esm.js
init_define_process_env();
function n8(n18) {
  for (var r9 = arguments.length, t9 = Array(r9 > 1 ? r9 - 1 : 0), e14 = 1; e14 < r9; e14++)
    t9[e14 - 1] = arguments[e14];
  if (true) {
    var i10 = Y2[n18], o12 = i10 ? "function" == typeof i10 ? i10.apply(null, t9) : i10 : "unknown error nr: " + n18;
    throw Error("[Immer] " + o12);
  }
  throw Error("[Immer] minified error nr: " + n18 + (t9.length ? " " + t9.map(function(n19) {
    return "'" + n19 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r(n18) {
  return !!n18 && !!n18[Q2];
}
function t(n18) {
  var r9;
  return !!n18 && (function(n19) {
    if (!n19 || "object" != typeof n19)
      return false;
    var r10 = Object.getPrototypeOf(n19);
    if (null === r10)
      return true;
    var t9 = Object.hasOwnProperty.call(r10, "constructor") && r10.constructor;
    return t9 === Object || "function" == typeof t9 && Function.toString.call(t9) === Z2;
  }(n18) || Array.isArray(n18) || !!n18[L2] || !!(null === (r9 = n18.constructor) || void 0 === r9 ? void 0 : r9[L2]) || s(n18) || v2(n18));
}
function i(n18, r9, t9) {
  void 0 === t9 && (t9 = false), 0 === o2(n18) ? (t9 ? Object.keys : nn)(n18).forEach(function(e14) {
    t9 && "symbol" == typeof e14 || r9(e14, n18[e14], n18);
  }) : n18.forEach(function(t10, e14) {
    return r9(e14, t10, n18);
  });
}
function o2(n18) {
  var r9 = n18[Q2];
  return r9 ? r9.i > 3 ? r9.i - 4 : r9.i : Array.isArray(n18) ? 1 : s(n18) ? 2 : v2(n18) ? 3 : 0;
}
function u(n18, r9) {
  return 2 === o2(n18) ? n18.has(r9) : Object.prototype.hasOwnProperty.call(n18, r9);
}
function a(n18, r9) {
  return 2 === o2(n18) ? n18.get(r9) : n18[r9];
}
function f3(n18, r9, t9) {
  var e14 = o2(n18);
  2 === e14 ? n18.set(r9, t9) : 3 === e14 ? n18.add(t9) : n18[r9] = t9;
}
function c(n18, r9) {
  return n18 === r9 ? 0 !== n18 || 1 / n18 == 1 / r9 : n18 != n18 && r9 != r9;
}
function s(n18) {
  return X2 && n18 instanceof Map;
}
function v2(n18) {
  return q2 && n18 instanceof Set;
}
function p2(n18) {
  return n18.o || n18.t;
}
function l(n18) {
  if (Array.isArray(n18))
    return Array.prototype.slice.call(n18);
  var r9 = rn(n18);
  delete r9[Q2];
  for (var t9 = nn(r9), e14 = 0; e14 < t9.length; e14++) {
    var i10 = t9[e14], o12 = r9[i10];
    false === o12.writable && (o12.writable = true, o12.configurable = true), (o12.get || o12.set) && (r9[i10] = { configurable: true, writable: true, enumerable: o12.enumerable, value: n18[i10] });
  }
  return Object.create(Object.getPrototypeOf(n18), r9);
}
function d2(n18, e14) {
  return void 0 === e14 && (e14 = false), y(n18) || r(n18) || !t(n18) || (o2(n18) > 1 && (n18.set = n18.add = n18.clear = n18.delete = h), Object.freeze(n18), e14 && i(n18, function(n19, r9) {
    return d2(r9, true);
  }, true)), n18;
}
function h() {
  n8(2);
}
function y(n18) {
  return null == n18 || "object" != typeof n18 || Object.isFrozen(n18);
}
function b(r9) {
  var t9 = tn[r9];
  return t9 || n8(18, r9), t9;
}
function _2() {
  return U2 || n8(0), U2;
}
function j2(n18, r9) {
  r9 && (b("Patches"), n18.u = [], n18.s = [], n18.v = r9);
}
function g2(n18) {
  O2(n18), n18.p.forEach(S), n18.p = null;
}
function O2(n18) {
  n18 === U2 && (U2 = n18.l);
}
function w2(n18) {
  return U2 = { p: [], l: U2, h: n18, m: true, _: 0 };
}
function S(n18) {
  var r9 = n18[Q2];
  0 === r9.i || 1 === r9.i ? r9.j() : r9.g = true;
}
function P2(r9, e14) {
  e14._ = e14.p.length;
  var i10 = e14.p[0], o12 = void 0 !== r9 && r9 !== i10;
  return e14.h.O || b("ES5").S(e14, r9, o12), o12 ? (i10[Q2].P && (g2(e14), n8(4)), t(r9) && (r9 = M2(e14, r9), e14.l || x2(e14, r9)), e14.u && b("Patches").M(i10[Q2].t, r9, e14.u, e14.s)) : r9 = M2(e14, i10, []), g2(e14), e14.u && e14.v(e14.u, e14.s), r9 !== H2 ? r9 : void 0;
}
function M2(n18, r9, t9) {
  if (y(r9))
    return r9;
  var e14 = r9[Q2];
  if (!e14)
    return i(r9, function(i10, o13) {
      return A2(n18, e14, r9, i10, o13, t9);
    }, true), r9;
  if (e14.A !== n18)
    return r9;
  if (!e14.P)
    return x2(n18, e14.t, true), e14.t;
  if (!e14.I) {
    e14.I = true, e14.A._--;
    var o12 = 4 === e14.i || 5 === e14.i ? e14.o = l(e14.k) : e14.o, u5 = o12, a4 = false;
    3 === e14.i && (u5 = new Set(o12), o12.clear(), a4 = true), i(u5, function(r10, i10) {
      return A2(n18, e14, o12, r10, i10, t9, a4);
    }), x2(n18, o12, false), t9 && n18.u && b("Patches").N(e14, t9, n18.u, n18.s);
  }
  return e14.o;
}
function A2(e14, i10, o12, a4, c5, s11, v10) {
  if (c5 === o12 && n8(5), r(c5)) {
    var p4 = M2(e14, c5, s11 && i10 && 3 !== i10.i && !u(i10.R, a4) ? s11.concat(a4) : void 0);
    if (f3(o12, a4, p4), !r(p4))
      return;
    e14.m = false;
  } else
    v10 && o12.add(c5);
  if (t(c5) && !y(c5)) {
    if (!e14.h.D && e14._ < 1)
      return;
    M2(e14, c5), i10 && i10.A.l || x2(e14, c5);
  }
}
function x2(n18, r9, t9) {
  void 0 === t9 && (t9 = false), !n18.l && n18.h.D && n18.m && d2(r9, t9);
}
function z(n18, r9) {
  var t9 = n18[Q2];
  return (t9 ? p2(t9) : n18)[r9];
}
function I(n18, r9) {
  if (r9 in n18)
    for (var t9 = Object.getPrototypeOf(n18); t9; ) {
      var e14 = Object.getOwnPropertyDescriptor(t9, r9);
      if (e14)
        return e14;
      t9 = Object.getPrototypeOf(t9);
    }
}
function k2(n18) {
  n18.P || (n18.P = true, n18.l && k2(n18.l));
}
function E2(n18) {
  n18.o || (n18.o = l(n18.t));
}
function N2(n18, r9, t9) {
  var e14 = s(r9) ? b("MapSet").F(r9, t9) : v2(r9) ? b("MapSet").T(r9, t9) : n18.O ? function(n19, r10) {
    var t10 = Array.isArray(n19), e15 = { i: t10 ? 1 : 0, A: r10 ? r10.A : _2(), P: false, I: false, R: {}, l: r10, t: n19, k: null, o: null, j: null, C: false }, i10 = e15, o12 = en;
    t10 && (i10 = [e15], o12 = on);
    var u5 = Proxy.revocable(i10, o12), a4 = u5.revoke, f5 = u5.proxy;
    return e15.k = f5, e15.j = a4, f5;
  }(r9, t9) : b("ES5").J(r9, t9);
  return (t9 ? t9.A : _2()).p.push(e14), e14;
}
function R2(e14) {
  return r(e14) || n8(22, e14), function n18(r9) {
    if (!t(r9))
      return r9;
    var e15, u5 = r9[Q2], c5 = o2(r9);
    if (u5) {
      if (!u5.P && (u5.i < 4 || !b("ES5").K(u5)))
        return u5.t;
      u5.I = true, e15 = D2(r9, c5), u5.I = false;
    } else
      e15 = D2(r9, c5);
    return i(e15, function(r10, t9) {
      u5 && a(u5.t, r10) === t9 || f3(e15, r10, n18(t9));
    }), 3 === c5 ? new Set(e15) : e15;
  }(e14);
}
function D2(n18, r9) {
  switch (r9) {
    case 2:
      return new Map(n18);
    case 3:
      return Array.from(n18);
  }
  return l(n18);
}
var G;
var U2;
var W2 = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
var X2 = "undefined" != typeof Map;
var q2 = "undefined" != typeof Set;
var B2 = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
var H2 = W2 ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
var L2 = W2 ? Symbol.for("immer-draftable") : "__$immer_draftable";
var Q2 = W2 ? Symbol.for("immer-state") : "__$immer_state";
var Y2 = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n18) {
  return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n18;
}, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n18) {
  return "Cannot apply patch, path doesn't resolve: " + n18;
}, 16: 'Sets cannot have "replace" patches.', 17: function(n18) {
  return "Unsupported patch operation: " + n18;
}, 18: function(n18) {
  return "The plugin for '" + n18 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n18 + "()` when initializing your application.";
}, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n18) {
  return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n18 + "'";
}, 22: function(n18) {
  return "'current' expects a draft, got: " + n18;
}, 23: function(n18) {
  return "'original' expects a draft, got: " + n18;
}, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
var Z2 = "" + Object.prototype.constructor;
var nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n18) {
  return Object.getOwnPropertyNames(n18).concat(Object.getOwnPropertySymbols(n18));
} : Object.getOwnPropertyNames;
var rn = Object.getOwnPropertyDescriptors || function(n18) {
  var r9 = {};
  return nn(n18).forEach(function(t9) {
    r9[t9] = Object.getOwnPropertyDescriptor(n18, t9);
  }), r9;
};
var tn = {};
var en = { get: function(n18, r9) {
  if (r9 === Q2)
    return n18;
  var e14 = p2(n18);
  if (!u(e14, r9))
    return function(n19, r10, t9) {
      var e15, i11 = I(r10, t9);
      return i11 ? "value" in i11 ? i11.value : null === (e15 = i11.get) || void 0 === e15 ? void 0 : e15.call(n19.k) : void 0;
    }(n18, e14, r9);
  var i10 = e14[r9];
  return n18.I || !t(i10) ? i10 : i10 === z(n18.t, r9) ? (E2(n18), n18.o[r9] = N2(n18.A.h, i10, n18)) : i10;
}, has: function(n18, r9) {
  return r9 in p2(n18);
}, ownKeys: function(n18) {
  return Reflect.ownKeys(p2(n18));
}, set: function(n18, r9, t9) {
  var e14 = I(p2(n18), r9);
  if (null == e14 ? void 0 : e14.set)
    return e14.set.call(n18.k, t9), true;
  if (!n18.P) {
    var i10 = z(p2(n18), r9), o12 = null == i10 ? void 0 : i10[Q2];
    if (o12 && o12.t === t9)
      return n18.o[r9] = t9, n18.R[r9] = false, true;
    if (c(t9, i10) && (void 0 !== t9 || u(n18.t, r9)))
      return true;
    E2(n18), k2(n18);
  }
  return n18.o[r9] === t9 && (void 0 !== t9 || r9 in n18.o) || Number.isNaN(t9) && Number.isNaN(n18.o[r9]) || (n18.o[r9] = t9, n18.R[r9] = true), true;
}, deleteProperty: function(n18, r9) {
  return void 0 !== z(n18.t, r9) || r9 in n18.t ? (n18.R[r9] = false, E2(n18), k2(n18)) : delete n18.R[r9], n18.o && delete n18.o[r9], true;
}, getOwnPropertyDescriptor: function(n18, r9) {
  var t9 = p2(n18), e14 = Reflect.getOwnPropertyDescriptor(t9, r9);
  return e14 ? { writable: true, configurable: 1 !== n18.i || "length" !== r9, enumerable: e14.enumerable, value: t9[r9] } : e14;
}, defineProperty: function() {
  n8(11);
}, getPrototypeOf: function(n18) {
  return Object.getPrototypeOf(n18.t);
}, setPrototypeOf: function() {
  n8(12);
} };
var on = {};
i(en, function(n18, r9) {
  on[n18] = function() {
    return arguments[0] = arguments[0][0], r9.apply(this, arguments);
  };
}), on.deleteProperty = function(r9, t9) {
  return isNaN(parseInt(t9)) && n8(13), on.set.call(this, r9, t9, void 0);
}, on.set = function(r9, t9, e14) {
  return "length" !== t9 && isNaN(parseInt(t9)) && n8(14), en.set.call(this, r9[0], t9, e14, r9[0]);
};
var un = function() {
  function e14(r9) {
    var e15 = this;
    this.O = B2, this.D = true, this.produce = function(r10, i11, o12) {
      if ("function" == typeof r10 && "function" != typeof i11) {
        var u5 = i11;
        i11 = r10;
        var a4 = e15;
        return function(n18) {
          var r11 = this;
          void 0 === n18 && (n18 = u5);
          for (var t9 = arguments.length, e16 = Array(t9 > 1 ? t9 - 1 : 0), o13 = 1; o13 < t9; o13++)
            e16[o13 - 1] = arguments[o13];
          return a4.produce(n18, function(n19) {
            var t10;
            return (t10 = i11).call.apply(t10, [r11, n19].concat(e16));
          });
        };
      }
      var f5;
      if ("function" != typeof i11 && n8(6), void 0 !== o12 && "function" != typeof o12 && n8(7), t(r10)) {
        var c5 = w2(e15), s11 = N2(e15, r10, void 0), v10 = true;
        try {
          f5 = i11(s11), v10 = false;
        } finally {
          v10 ? g2(c5) : O2(c5);
        }
        return "undefined" != typeof Promise && f5 instanceof Promise ? f5.then(function(n18) {
          return j2(c5, o12), P2(n18, c5);
        }, function(n18) {
          throw g2(c5), n18;
        }) : (j2(c5, o12), P2(f5, c5));
      }
      if (!r10 || "object" != typeof r10) {
        if (void 0 === (f5 = i11(r10)) && (f5 = r10), f5 === H2 && (f5 = void 0), e15.D && d2(f5, true), o12) {
          var p4 = [], l5 = [];
          b("Patches").M(r10, f5, p4, l5), o12(p4, l5);
        }
        return f5;
      }
      n8(21, r10);
    }, this.produceWithPatches = function(n18, r10) {
      if ("function" == typeof n18)
        return function(r11) {
          for (var t10 = arguments.length, i12 = Array(t10 > 1 ? t10 - 1 : 0), o13 = 1; o13 < t10; o13++)
            i12[o13 - 1] = arguments[o13];
          return e15.produceWithPatches(r11, function(r12) {
            return n18.apply(void 0, [r12].concat(i12));
          });
        };
      var t9, i11, o12 = e15.produce(n18, r10, function(n19, r11) {
        t9 = n19, i11 = r11;
      });
      return "undefined" != typeof Promise && o12 instanceof Promise ? o12.then(function(n19) {
        return [n19, t9, i11];
      }) : [o12, t9, i11];
    }, "boolean" == typeof (null == r9 ? void 0 : r9.useProxies) && this.setUseProxies(r9.useProxies), "boolean" == typeof (null == r9 ? void 0 : r9.autoFreeze) && this.setAutoFreeze(r9.autoFreeze);
  }
  var i10 = e14.prototype;
  return i10.createDraft = function(e15) {
    t(e15) || n8(8), r(e15) && (e15 = R2(e15));
    var i11 = w2(this), o12 = N2(this, e15, void 0);
    return o12[Q2].C = true, O2(i11), o12;
  }, i10.finishDraft = function(r9, t9) {
    var e15 = r9 && r9[Q2];
    e15 && e15.C || n8(9), e15.I && n8(10);
    var i11 = e15.A;
    return j2(i11, t9), P2(void 0, i11);
  }, i10.setAutoFreeze = function(n18) {
    this.D = n18;
  }, i10.setUseProxies = function(r9) {
    r9 && !B2 && n8(20), this.O = r9;
  }, i10.applyPatches = function(n18, t9) {
    var e15;
    for (e15 = t9.length - 1; e15 >= 0; e15--) {
      var i11 = t9[e15];
      if (0 === i11.path.length && "replace" === i11.op) {
        n18 = i11.value;
        break;
      }
    }
    e15 > -1 && (t9 = t9.slice(e15 + 1));
    var o12 = b("Patches").$;
    return r(n18) ? o12(n18, t9) : this.produce(n18, function(n19) {
      return o12(n19, t9);
    });
  }, e14;
}();
var an = new un();
var fn = an.produce;
var cn = an.produceWithPatches.bind(an);
var sn = an.setAutoFreeze.bind(an);
var vn = an.setUseProxies.bind(an);
var pn = an.applyPatches.bind(an);
var ln = an.createDraft.bind(an);
var dn = an.finishDraft.bind(an);

// node_modules/@100mslive/hms-video-store/node_modules/zustand/esm/shallow.js
init_define_process_env();
function shallow(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  const keysA = Object.keys(objA);
  if (keysA.length !== Object.keys(objB).length) {
    return false;
  }
  for (let i10 = 0; i10 < keysA.length; i10++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i10]) || !Object.is(objA[keysA[i10]], objB[keysA[i10]])) {
      return false;
    }
  }
  return true;
}
var shallow_default = shallow;

// node_modules/@100mslive/hms-video-store/node_modules/zustand/esm/vanilla.js
init_define_process_env();
function create2(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}
var vanilla_default = create2;

// node_modules/@100mslive/hms-video-store/dist/index.js
var import_eventemitter24 = __toESM(require_eventemitter2());
var Lt2 = Object.defineProperty;
var xt2 = Object.defineProperties;
var Ot = Object.getOwnPropertyDescriptors;
var Ke2 = Object.getOwnPropertySymbols;
var _t2 = Object.prototype.hasOwnProperty;
var wt2 = Object.prototype.propertyIsEnumerable;
var Be2 = (s11, e14, t9) => e14 in s11 ? Lt2(s11, e14, { enumerable: true, configurable: true, writable: true, value: t9 }) : s11[e14] = t9;
var h2 = (s11, e14) => {
  for (var t9 in e14 || (e14 = {}))
    _t2.call(e14, t9) && Be2(s11, t9, e14[t9]);
  if (Ke2)
    for (var t9 of Ke2(e14))
      wt2.call(e14, t9) && Be2(s11, t9, e14[t9]);
  return s11;
};
var K2 = (s11, e14) => xt2(s11, Ot(e14));
var Ut2 = (s11, e14) => () => (e14 || s11((e14 = { exports: {} }).exports, e14), e14.exports);
var c2 = (s11, e14, t9) => new Promise((i10, o12) => {
  var r9 = (l5) => {
    try {
      n18(t9.next(l5));
    } catch (m4) {
      o12(m4);
    }
  }, a4 = (l5) => {
    try {
      n18(t9.throw(l5));
    } catch (m4) {
      o12(m4);
    }
  }, n18 = (l5) => l5.done ? i10(l5.value) : Promise.resolve(l5.value).then(r9, a4);
  n18((t9 = t9.apply(s11, e14)).next());
});
var At2 = Ut2((Vn, vs) => {
  vs.exports = { version: "0.10.10", license: "MIT", main: "dist/index.cjs.js", module: "dist/index.js", typings: "dist/index.d.ts", files: ["dist", "src"], engines: { node: ">=12" }, exports: { ".": { require: "./dist/index.cjs.js", import: "./dist/index.js", default: "./dist/index.js" } }, scripts: { prestart: "rm -rf dist && yarn types:build", start: 'concurrently "yarn dev" "yarn types"', dev: "node ../../scripts/dev", "build:only": "node ../../scripts/build", build: "yarn build:only && yarn types:build", types: "tsc -w", "types:build": "tsc -p tsconfig.json", format: "prettier --write src/**/*.ts", test: "jest --maxWorkers=1", "test:watch": "jest --watch", "test:coverage": "jest --coverage", lint: "eslint -c ../../.eslintrc .", "lint:fix": "yarn lint --fix", prepare: "yarn build", size: "size-limit", analyze: "size-limit --why", docs: "rm -rf ./docs && typedoc && rm -f ./docs/README.md && mkdir ./docs/home &&mv ./docs/modules.md ./docs/home/content.md && node ../../scripts/docs-store && npx prettier --write './docs/**/*'" }, name: "@100mslive/hms-video-store", author: "100ms", sideEffects: false, dependencies: { "@100mslive/hms-video": "0.9.10", eventemitter2: "^6.4.7", immer: "^9.0.6", reselect: "4.0.0", zustand: "3.5.7" }, devDependencies: { "ts-node": "^10.4.0", tslib: "^2.2.0" }, description: "This is an addon to the core sdk provided by 100ms. It abstracts away the intricacies of data management and provides a flux based reactive data store where data flows in only one direction.", repository: { type: "git", url: "git+https://github.com/100mslive/hms-video-store.git" }, keywords: ["video", "webrtc", "conferencing", "100ms"], bugs: { url: "https://github.com/100mslive/hms-video-store/issues" }, homepage: "https://github.com/100mslive/hms-video-store#readme", gitHead: "fe8f6b9b3b39b210c46f19c021ccf37c654c32d4" };
});
var Re2 = ((n18) => (n18.Disconnected = "Disconnected", n18.Preview = "Preview", n18.Connecting = "Connecting", n18.Connected = "Connected", n18.Reconnecting = "Reconnecting", n18.Disconnecting = "Disconnecting", n18.Failed = "Failed", n18))(Re2 || {});
var ae2 = () => ({ room: { id: "", isConnected: false, name: "", peers: [], localPeer: "", roomState: "Disconnected", recording: { browser: { running: false }, server: { running: false }, hls: { running: false } }, rtmp: { running: false }, hls: { running: false, variants: [] }, sessionId: "" }, peers: {}, tracks: {}, playlist: { audio: { list: {}, selection: { id: "", hasPrevious: false, hasNext: false }, progress: 0, volume: 0, currentTime: 0, playbackRate: 1 }, video: { list: {}, selection: { id: "", hasPrevious: false, hasNext: false }, progress: 0, volume: 0, currentTime: 0, playbackRate: 1 } }, messages: { byID: {}, allIDs: [] }, speakers: {}, connectionQualities: {}, settings: { audioInputDeviceId: "", audioOutputDeviceId: "", videoInputDeviceId: "" }, devices: { audioInput: [], audioOutput: [], videoInput: [] }, roles: {}, roleChangeRequests: [], errors: [], sessionStore: {}, templateAppData: {}, polls: {} });
var ne2 = () => ({ peerStats: {}, remoteTrackStats: {}, localTrackStats: {}, localPeer: { id: "" } });
var Vt2 = ((e14) => (e14.CHAT = "chat", e14))(Vt2 || {});
var qe2 = ((t9) => (t9.INFO = "info", t9.ERROR = "error", t9))(qe2 || {});
var De2 = ((M3) => (M3.PEER_JOINED = "PEER_JOINED", M3.PEER_LEFT = "PEER_LEFT", M3.PEER_LIST = "PEER_LIST", M3.NEW_MESSAGE = "NEW_MESSAGE", M3.ERROR = "ERROR", M3.RECONNECTING = "RECONNECTING", M3.RECONNECTED = "RECONNECTED", M3.TRACK_ADDED = "TRACK_ADDED", M3.TRACK_REMOVED = "TRACK_REMOVED", M3.TRACK_MUTED = "TRACK_MUTED", M3.TRACK_UNMUTED = "TRACK_UNMUTED", M3.TRACK_DEGRADED = "TRACK_DEGRADED", M3.TRACK_RESTORED = "TRACK_RESTORED", M3.TRACK_DESCRIPTION_CHANGED = "TRACK_DESCRIPTION_CHANGED", M3.ROLE_UPDATED = "ROLE_UPDATED", M3.CHANGE_TRACK_STATE_REQUEST = "CHANGE_TRACK_STATE_REQUEST", M3.CHANGE_MULTI_TRACK_STATE_REQUEST = "CHANGE_MULTI_TRACK_STATE_REQUEST", M3.ROOM_ENDED = "ROOM_ENDED", M3.REMOVED_FROM_ROOM = "REMOVED_FROM_ROOM", M3.DEVICE_CHANGE_UPDATE = "DEVICE_CHANGE_UPDATE", M3.PLAYLIST_TRACK_ENDED = "PLAYLIST_TRACK_ENDED", M3.NAME_UPDATED = "NAME_UPDATED", M3.METADATA_UPDATED = "METADATA_UPDATED", M3.POLL_CREATED = "POLL_CREATED", M3.POLL_STARTED = "POLL_STARTED", M3.POLL_STOPPED = "POLL_STOPPED", M3.POLL_VOTES_UPDATED = "POLL_VOTES_UPDATED", M3))(De2 || {});
var je2 = ((t9) => (t9.audio = "audio", t9.video = "video", t9))(je2 || {});
function j3(s11, e14) {
  let t9, i10;
  if (e14)
    for (let o12 of e14.auxiliaryTracks) {
      let r9 = s11[o12];
      Kt2(r9) && (i10 = $2(r9) ? r9 : i10, t9 = W3(r9) ? r9 : t9);
    }
  return { video: t9, audio: i10 };
}
function $2(s11) {
  return s11 && s11.type === "audio";
}
function W3(s11) {
  return s11 && s11.type === "video";
}
function Kt2(s11) {
  return s11 && s11.source === "screen";
}
function ce2(s11) {
  return s11 && s11.source === "audioplaylist";
}
function J2(s11) {
  return s11 && s11.source === "videoplaylist";
}
function Ge2(s11) {
  return s11 ? !!(s11 != null && s11.degraded) : false;
}
function Q3(s11, e14) {
  return e14 && s11.tracks[e14] ? s11.tracks[e14].enabled : false;
}
function Fe2(s11, e14) {
  return e14 && s11.tracks[e14] ? s11.tracks[e14].displayEnabled : false;
}
function Y3(s11) {
  var o12;
  let e14 = false, t9 = false, i10 = false;
  return (o12 = s11 == null ? void 0 : s11.publishParams) != null && o12.allowed && (e14 = s11.publishParams.allowed.includes("video"), t9 = s11.publishParams.allowed.includes("audio"), i10 = s11.publishParams.allowed.includes("screen")), { video: e14, audio: t9, screen: i10 };
}
var P3 = (s11) => s11.room;
var Bt2 = (s11) => s11.errors;
var li2 = createSelector(Bt2, (s11) => s11.length === 0 ? null : s11.at(-1));
var di2 = createSelector(P3, (s11) => s11.id);
var k3 = (s11) => s11.peers;
var Qe2 = (s11) => s11.messages.byID;
var $e2 = (s11) => s11.messages.allIDs;
var T = (s11) => s11.tracks;
var We2 = (s11) => s11.settings;
var ve2 = (s11) => s11.appData;
var ui2 = (s11) => s11.devices;
var qt2 = (s11) => s11.speakers;
var pi = (s11) => s11.connectionQualities;
var B3 = createSelector([P3], (s11) => s11 && s11.isConnected);
var Mi2 = createSelector([B3, P3], (s11, e14) => s11 ? e14.peerCount !== void 0 ? e14.peerCount || 1 : e14.peers.length : Math.max(e14.peerCount !== void 0 ? e14.peerCount : e14.peers.length - 1, 0));
var w3 = createSelector([P3, k3], (s11, e14) => s11.peers.map((t9) => e14[t9]));
var jt2 = createSelector(T, (s11) => Object.values(s11));
var v6 = createSelector(P3, k3, (s11, e14) => e14[s11.localPeer]);
var G2 = createSelector(P3, (s11) => s11.localPeer);
var Ti2 = createSelector(v6, (s11) => s11 == null ? void 0 : s11.name);
var Hi2 = createSelector(v6, (s11) => s11 == null ? void 0 : s11.roleName);
var b2 = createSelector(v6, (s11) => s11 == null ? void 0 : s11.audioTrack);
var I2 = createSelector(v6, (s11) => s11 == null ? void 0 : s11.videoTrack);
var Gt2 = createSelector(v6, (s11) => s11 == null ? void 0 : s11.auxiliaryTracks);
var Je2 = createSelector([b2, I2, Gt2], (s11, e14, t9) => {
  let i10 = t9 ? [...t9] : [];
  return s11 && i10.unshift(s11), e14 && i10.unshift(e14), i10;
});
var fi2 = createSelector(w3, (s11) => s11.filter((e14) => !e14.isLocal));
var mi2 = createSelector(k3, qt2, (s11, e14) => {
  let t9 = Object.entries(e14).sort((i10, o12) => {
    var n18, l5;
    let r9 = ((n18 = i10[1]) == null ? void 0 : n18.audioLevel) || 0;
    return (((l5 = o12[1]) == null ? void 0 : l5.audioLevel) || 0) > r9 ? 1 : -1;
  });
  if (t9.length > 0 && t9[0][1].audioLevel && t9[0][1].audioLevel > 0) {
    let i10 = t9[0][1].peerID;
    if (i10 in s11)
      return s11[i10];
  }
  return null;
});
var yi2 = (s11) => {
  let e14 = v6(s11);
  return Q3(s11, e14 == null ? void 0 : e14.audioTrack);
};
var Ie2 = (s11) => {
  let e14 = v6(s11);
  return Q3(s11, e14 == null ? void 0 : e14.videoTrack);
};
var Ye2 = (s11) => {
  let e14 = v6(s11);
  return Fe2(s11, e14 == null ? void 0 : e14.videoTrack);
};
var Ee2 = createSelector(v6, T, (s11, e14) => {
  let { video: t9, audio: i10 } = j3(e14, s11);
  return !!(t9 || i10);
});
var Ft2 = createSelector(k3, T, (s11, e14) => {
  let t9;
  for (let i10 in s11) {
    let o12 = s11[i10], { video: r9, audio: a4 } = j3(e14, o12);
    if (r9)
      return o12;
    a4 && !t9 && (t9 = o12);
  }
  return t9;
});
var gi = createSelector(Ft2, (s11) => !!s11);
var hi = createSelector(k3, T, (s11, e14) => {
  for (let t9 in s11) {
    let i10 = s11[t9], { audio: o12, video: r9 } = j3(e14, i10);
    if (!r9 && o12)
      return i10;
  }
});
var Pi2 = createSelector(k3, T, (s11, e14) => {
  let t9 = [], i10 = [];
  for (let o12 in s11) {
    let r9 = s11[o12], { video: a4, audio: n18 } = j3(e14, r9);
    a4 ? t9.push(r9) : n18 && i10.push(r9);
  }
  return t9.concat(i10);
});
var ki2 = createSelector(k3, T, (s11, e14) => {
  for (let t9 in e14) {
    let i10 = e14[t9];
    if (J2(i10) && W3(i10) && i10.peerId)
      return s11[i10.peerId];
  }
});
var Ri = createSelector(k3, T, (s11, e14) => {
  for (let t9 in e14) {
    let i10 = e14[t9];
    if (ce2(i10) && i10.peerId)
      return s11[i10.peerId];
  }
});
var Di2 = createSelector(jt2, (s11) => s11.filter(Ge2));
var vi = createSelector($e2, (s11) => s11.length);
var Ii2 = createSelector(Qe2, (s11) => Object.values(s11).filter((e14) => !e14.read).length);
var Se2 = createSelector($e2, Qe2, (s11, e14) => {
  let t9 = [];
  return s11.forEach((i10) => {
    t9.push(e14[i10]);
  }), t9;
});
var E3 = createSelector([P3], (s11) => s11 && s11.roomState);
var Ei2 = createSelector(E3, (s11) => s11 === "Preview");
var bi2 = createSelector(P3, (s11) => s11.roomState !== "Disconnected");
var _3 = (s11) => s11.roles;
var Ai2 = createSelector([_3], (s11) => Object.keys(s11));
var le2 = createSelector([v6, _3], (s11, e14) => s11 != null && s11.roleName ? e14[s11.roleName] : null);
var Qt2 = (s11) => {
  var e14;
  return (e14 = s11.preview) == null ? void 0 : e14.asRole;
};
var ze2 = createSelector([Qt2, _3], (s11, e14) => s11 ? e14[s11] : null);
var Ci2 = createSelector([le2], (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.subscribeParams) != null && e14.subscribeToRoles ? s11.subscribeParams.subscribeToRoles.length > 0 : false;
});
var Xe2 = createSelector(le2, (s11) => s11 == null ? void 0 : s11.permissions);
var Ni2 = createSelector(P3, (s11) => s11.recording);
var Li = createSelector(P3, (s11) => s11.rtmp);
var xi2 = createSelector(P3, (s11) => s11.hls);
var Oi2 = createSelector(P3, (s11) => s11.sessionId);
var _i2 = createSelector(P3, (s11) => s11.startedAt);
var wi = (s11) => s11.templateAppData;
var Ui2 = (s11) => s11.sessionMetadata;
var Ze2 = (s11) => s11.polls;
var Vi2 = (s11) => Object.values(s11.polls);
var tt2 = (s11 = "audio") => (e14) => e14.playlist[s11].list;
var be2 = (s11 = "audio") => (e14) => e14.playlist[s11].selection;
var st2 = (s11 = "audio") => (e14) => e14.playlist[s11].progress;
var it2 = (s11 = "audio") => (e14) => e14.playlist[s11].currentTime;
var ot2 = (s11 = "audio") => (e14) => e14.playlist[s11].playbackRate;
var rt2 = (s11 = "audio") => (e14) => e14.playlist[s11].volume;
var at2 = (s11 = "audio") => createSelector(tt2(s11), (e14) => Object.values(e14));
var nt2 = (s11 = "audio") => createSelector(tt2(s11), be2(s11), (e14, t9) => {
  if (t9.id)
    return e14[t9.id];
});
var ct2 = { selection: be2("audio"), progress: st2("audio"), currentTime: it2("audio"), playbackRate: ot2("audio"), volume: rt2("audio"), list: at2("audio"), selectedItem: nt2("audio") };
var St2 = { selection: be2("video"), progress: st2("video"), currentTime: it2("video"), playbackRate: ot2("video"), volume: rt2("video"), list: at2("video"), selectedItem: nt2("video") };
function u2(s11) {
  return (e14) => (t9) => s11(t9, e14);
}
var X3 = "HMS-Store:";
var S2 = class {
  static v(e14, ...t9) {
    this.log(Pr.VERBOSE, e14, ...t9);
  }
  static d(...e14) {
    this.log(Pr.DEBUG, ...e14);
  }
  static i(...e14) {
    this.log(Pr.INFO, ...e14);
  }
  static w(...e14) {
    this.log(Pr.WARN, ...e14);
  }
  static e(...e14) {
    this.log(Pr.ERROR, ...e14);
  }
  static time(e14) {
    this.log(Pr.TIME, "[HMSPerformanceTiming]", e14);
  }
  static timeEnd(e14) {
    this.log(Pr.TIMEEND, "[HMSPerformanceTiming]", e14, e14);
  }
  static cleanup() {
    performance.clearMarks(), performance.clearMeasures();
  }
  static log(e14, ...t9) {
    if (!(this.level.valueOf() > e14.valueOf()))
      switch (e14) {
        case Pr.VERBOSE: {
          console.log(X3, ...t9);
          break;
        }
        case Pr.DEBUG: {
          console.debug(X3, ...t9);
          break;
        }
        case Pr.INFO: {
          console.info(X3, ...t9);
          break;
        }
        case Pr.WARN: {
          console.warn(X3, ...t9);
          break;
        }
        case Pr.ERROR: {
          console.error(X3, ...t9);
          break;
        }
        case Pr.TIME: {
          performance.mark(t9[1]);
          break;
        }
        case Pr.TIMEEND: {
          let i10 = t9[0], o12 = t9[1];
          try {
            let r9 = performance.measure(o12, o12);
            this.log(Pr.DEBUG, i10, o12, r9 == null ? void 0 : r9.duration), performance.clearMarks(o12), performance.clearMeasures(o12);
          } catch (r9) {
            this.log(Pr.DEBUG, i10, o12, r9);
          }
          break;
        }
      }
  }
};
S2.level = Pr.VERBOSE;
var Ae2 = (s11, e14) => e14;
var Z3 = (s11, e14) => e14;
var dt2 = (s11, e14) => e14;
var Xt2 = (s11, e14) => e14;
var Zt2 = (s11, e14) => e14;
var D3 = createSelector([k3, Ae2], (s11, e14) => e14 ? s11[e14] : null);
var Ce2 = createSelector([T, Z3], (s11, e14) => e14 ? s11[e14] : null);
var es2 = createSelector([T, Z3], (s11, e14) => {
  if (!e14)
    return null;
  let t9 = s11[e14];
  return (t9 == null ? void 0 : t9.type) === "video" ? t9 : null;
});
var ts2 = createSelector([T, Z3], (s11, e14) => {
  if (!e14)
    return null;
  let t9 = s11[e14];
  return (t9 == null ? void 0 : t9.type) === "audio" ? t9 : null;
});
var ss2 = createSelector([T, Z3], (s11, e14) => {
  if (!e14)
    return null;
  let t9 = s11[e14];
  return (t9 == null ? void 0 : t9.type) === "audio" && (t9 == null ? void 0 : t9.source) === "screen" ? t9 : null;
});
var is2 = createSelector([T, Z3], (s11, e14) => {
  if (!e14)
    return null;
  let t9 = s11[e14];
  return (t9 == null ? void 0 : t9.type) === "video" && (t9 == null ? void 0 : t9.source) === "screen" ? t9 : null;
});
var os = createSelector([Ze2, Zt2], (s11, e14) => e14 ? s11[e14] : null);
var C2 = u2(D3);
var Wo = u2(createSelector([ve2, Xt2], (s11, e14) => {
  if (s11)
    return e14 ? s11[e14] : s11;
}));
function Jo(s11) {
  return (e14) => {
    if (e14.sessionStore)
      return s11 ? e14.sessionStore[s11] : e14.sessionStore;
  };
}
var Yo = (...s11) => createSelector([ve2], (e14) => {
  if (e14) {
    if (s11 && s11.length > 0) {
      let t9 = e14;
      for (let i10 of s11) {
        if (!i10)
          return t9;
        t9 = t9 == null ? void 0 : t9[i10];
      }
      return t9;
    }
    return e14;
  }
});
var zo = u2(createSelector(D3, (s11) => s11 == null ? void 0 : s11.name));
var ue2 = u2(Ce2);
var ut2 = u2(es2);
var Xo = u2(ts2);
var Zo = u2(ss2);
var er2 = u2(is2);
var rs = u2((s11, e14) => {
  let t9 = D3(s11, e14);
  if (t9 && t9.videoTrack && t9.videoTrack !== "")
    return s11.tracks[t9.videoTrack];
});
var as2 = u2((s11, e14) => {
  let t9 = D3(s11, e14);
  if (t9 && t9.audioTrack && t9.audioTrack !== "")
    return s11.tracks[t9.audioTrack];
});
var tr2 = rs;
var sr2 = u2((s11, e14) => {
  let t9 = D3(s11, e14);
  return (t9 == null ? void 0 : t9.auxiliaryTracks.map((i10) => s11.tracks[i10])) || [];
});
var pt2 = (s11, e14) => e14 ? s11.speakers[e14] : null;
var ir2 = u2(createSelector(pt2, (s11) => (s11 == null ? void 0 : s11.audioLevel) || 0));
var ns = (s11, e14) => {
  let t9 = as2(e14)(s11);
  return pt2(s11, t9 == null ? void 0 : t9.id);
};
var or2 = u2(createSelector(ns, (s11) => (s11 == null ? void 0 : s11.audioLevel) || 0));
var rr2 = u2((s11, e14) => {
  if (e14)
    return s11.connectionQualities[e14];
});
var ar = u2((s11, e14) => {
  let t9 = D3(s11, e14);
  if (t9) {
    let i10 = t9 == null ? void 0 : t9.auxiliaryTracks.find((o12) => $2(s11.tracks[o12]));
    return i10 ? s11.tracks[i10] : void 0;
  }
});
var nr2 = u2(createSelector(T, D3, (s11, e14) => {
  let t9 = e14 == null ? void 0 : e14.auxiliaryTracks.find((i10) => {
    let o12 = s11[i10];
    return J2(o12) && W3(o12);
  });
  return t9 ? s11[t9] : void 0;
}));
var cr2 = u2(createSelector(T, D3, (s11, e14) => {
  let t9 = e14 == null ? void 0 : e14.auxiliaryTracks.find((i10) => {
    let o12 = s11[i10];
    return J2(o12) && $2(o12);
  });
  return t9 ? s11[t9] : void 0;
}));
var Sr2 = u2(createSelector(T, D3, (s11, e14) => {
  let t9 = e14 == null ? void 0 : e14.auxiliaryTracks.find((i10) => {
    let o12 = s11[i10];
    return ce2(o12) && $2(o12);
  });
  return t9 ? s11[t9] : void 0;
}));
var Mt2 = u2(createSelector(T, D3, (s11, e14) => j3(s11, e14)));
var lr2 = (s11) => createSelector(Mt2(s11), (e14) => e14.video);
var Tt2 = (s11) => createSelector(Mt2(s11), (e14) => e14.audio);
var dr2 = u2((s11, e14) => {
  let t9 = D3(s11, e14);
  return Q3(s11, t9 == null ? void 0 : t9.audioTrack);
});
var ur2 = u2((s11, e14) => {
  let t9 = D3(s11, e14);
  return Q3(s11, t9 == null ? void 0 : t9.videoTrack);
});
var Ht2 = u2((s11, e14) => {
  if (e14 && s11.tracks[e14])
    return s11.tracks[e14].volume === 0;
});
var pr2 = u2((s11, e14) => {
  let t9 = D3(s11, e14);
  return Ht2(t9 == null ? void 0 : t9.audioTrack)(s11);
});
var Mr = u2((s11, e14) => {
  let t9 = Tt2(e14)(s11);
  return Ht2(t9 == null ? void 0 : t9.id)(s11);
});
var ft2 = u2((s11, e14) => {
  let t9 = Ce2(s11, e14);
  if (t9) {
    if (t9.type !== "audio") {
      S2.w("Please pass audio track here");
      return;
    }
    return t9.volume;
  }
});
var Tr = u2((s11, e14) => {
  let t9 = D3(s11, e14);
  return ft2(t9 == null ? void 0 : t9.audioTrack)(s11);
});
var Hr2 = u2((s11, e14) => {
  let t9 = Tt2(e14)(s11);
  return ft2(t9 == null ? void 0 : t9.id)(s11);
});
var fr2 = u2((s11, e14) => {
  let t9 = Ce2(s11, e14);
  if (t9) {
    if (t9.type !== "video") {
      S2.w("Please pass video track here");
      return;
    }
    return t9.layer;
  }
});
var mt2 = createSelector([Se2, G2, Ae2], (s11, e14, t9) => {
  if (t9)
    return s11.filter((i10) => {
      var o12;
      return !i10.recipientPeer && !((o12 = i10.recipientRoles) != null && o12.length) || i10.sender && ![e14, t9].includes(i10.sender) ? false : [e14, t9].includes(i10.recipientPeer);
    });
});
var yt2 = createSelector([Se2, dt2], (s11, e14) => {
  if (e14)
    return s11.filter((t9) => {
      var i10, o12;
      return (i10 = t9.recipientRoles) != null && i10.length ? (o12 = t9.recipientRoles) == null ? void 0 : o12.includes(e14) : false;
    });
});
var cs = createSelector(Se2, (s11) => s11.filter((e14) => {
  var t9;
  return !e14.recipientPeer && !((t9 = e14.recipientRoles) != null && t9.length);
}));
var Ss = createSelector([yt2, dt2], (s11) => s11 ? s11.filter((e14) => !e14.read).length : 0);
var ls = createSelector([mt2, Ae2], (s11) => s11 ? s11.filter((e14) => !e14.read).length : 0);
var mr2 = createSelector(cs, (s11) => s11.filter((e14) => !e14.read).length);
var yr = u2(mt2);
var gr = u2(yt2);
var hr2 = u2(Ss);
var Pr2 = u2(ls);
var kr = (s11) => createSelector([w3], (e14) => e14.filter((t9) => t9.roleName === s11));
var Rr2 = (s11) => createSelector([w3], (e14) => e14.filter((t9) => t9.roleName ? s11.includes(t9.roleName) : false));
var Dr2 = (s11) => createSelector(C2(s11), (e14) => {
  try {
    return e14 != null && e14.metadata && e14.metadata !== "" ? JSON.parse(e14.metadata) : {};
  } catch (t9) {
    return console.error("cannot parse peer metadata", t9), {};
  }
});
var vr2 = (s11) => createSelector(C2(s11), (e14) => e14 == null ? void 0 : e14.name);
var gt2 = u2(os);
var Cr2 = createSelector([k3, T], (s11, e14) => Object.values(s11).map((i10) => {
  var o12;
  return { peer: i10, isAudioEnabled: i10.audioTrack ? (o12 = e14[i10.audioTrack]) == null ? void 0 : o12.enabled : false };
}));
var ds = (s11) => s11.roleChangeRequests[0] || null;
var Nr2 = createSelector([ds, k3, _3], (s11, e14, t9) => s11 ? { requestedBy: s11.requestedBy ? e14[s11.requestedBy] : void 0, role: t9[s11.roleName], token: s11.token } : null);
var Lr2 = createSelector([le2], (s11) => Y3(s11));
var xr = createSelector([ze2], (s11) => Y3(s11));
var us = (s11) => createSelector([_3], (e14) => e14[s11]);
var Vr = (s11) => createSelector(us(s11), (e14) => Y3(e14));
var ps = createSelector([I2, T], (s11, e14) => {
  let t9 = null;
  return s11 && (t9 = e14[s11]), (t9 == null ? void 0 : t9.plugins) || [];
});
var Ms = createSelector([b2, T], (s11, e14) => {
  let t9 = null;
  return s11 && (t9 = e14[s11]), (t9 == null ? void 0 : t9.plugins) || [];
});
var Kr2 = (s11) => createSelector([ps], (e14) => e14.includes(s11));
var Br2 = (s11) => createSelector([Ms], (e14) => e14.includes(s11));
var qr = (s11) => createSelector(w3, (e14) => e14.find(s11));
var jr = (s11) => createSelector(w3, (e14) => e14.filter(s11));
var Gr2 = (s11) => createSelector(P3, (e14) => e14.joinedAt && Date.now() - e14.joinedAt.getTime() <= s11);
var ht2 = (s11, e14) => {
  let t9 = ee2(Object.keys(s11), Object.keys(e14));
  for (let i10 of t9) {
    let o12 = s11[i10], r9 = e14[i10];
    F2(o12, r9) ? (N3(o12.auxiliaryTracks, r9.auxiliaryTracks) && (r9.auxiliaryTracks = o12.auxiliaryTracks), Object.assign(o12, r9)) : xe2(o12, r9) ? delete s11[i10] : Me2(o12, r9) && (s11[i10] = r9);
  }
};
var Pt2 = (s11, e14) => {
  let t9 = ee2(Object.keys(s11), Object.keys(e14));
  for (let i10 of t9) {
    let o12 = s11[i10], r9 = e14[i10];
    F2(o12, r9) ? (Le2(o12, r9), Object.assign(o12, r9)) : xe2(o12, r9) ? delete s11[i10] : Me2(o12, r9) && (s11[i10] = r9);
  }
};
var kt2 = (s11, e14) => {
  let t9 = ee2(Object.keys(s11), Object.keys(e14));
  for (let i10 of t9) {
    let o12 = s11[i10], r9 = e14[i10];
    F2(o12, r9) ? (o12.questions && N3(o12.questions, r9.questions) && (r9.questions = o12.questions), Object.assign(o12, r9)) : Me2(o12, r9) && (s11[i10] = r9);
  }
};
var Ne2 = (s11, e14) => {
  let t9 = ee2(Object.keys(s11), Object.keys(e14));
  for (let i10 of t9) {
    let o12 = s11[i10], r9 = e14[i10];
    F2(o12, r9) ? Object.assign(o12, r9) : xe2(o12, r9) ? delete s11[i10] : Me2(o12, r9) && (s11[i10] = r9);
  }
};
var Rt2 = (s11, e14, t9) => {
  let i10 = t9.reduce((r9, a4) => (r9[a4.firstTrackId] = Object.values(e14[a4.getTrackIDBeingSent()] || {}).sort((n18, l5) => !n18.rid || !l5.rid ? 0 : n18.rid < l5.rid ? -1 : 1), r9), {}), o12 = ee2(Object.keys(s11), Object.keys(i10));
  for (let r9 of o12) {
    if (!i10[r9]) {
      delete s11[r9];
      continue;
    }
    s11[r9] = i10[r9];
  }
};
var Le2 = (s11, e14) => {
  s11.plugins && N3(s11.plugins, e14.plugins) && (e14.plugins = s11.plugins), s11.type === "video" && s11.layerDefinitions && N3(s11.layerDefinitions, e14.layerDefinitions) && (e14.layerDefinitions = s11.layerDefinitions);
};
var F2 = (s11, e14) => s11 && e14;
var xe2 = (s11, e14) => s11 && !e14;
var Me2 = (s11, e14) => !s11 && e14;
var N3 = (s11, e14) => {
  if (s11 === e14 || s11.length === 0 && (e14 == null ? void 0 : e14.length) === 0)
    return true;
  if (!s11 || !e14 || s11.length !== e14.length)
    return false;
  for (let t9 = 0; t9 < s11.length; t9++)
    if (s11[t9] !== e14[t9])
      return false;
  return true;
};
var ee2 = (s11, e14) => {
  let t9 = /* @__PURE__ */ new Set();
  for (let i10 of s11)
    t9.add(i10);
  for (let i10 of e14)
    t9.add(i10);
  return Array.from(t9);
};
var vt2 = (s11, e14, t9) => {
  let i10;
  t9.getState(E3) === "Connected" && (i10 = Dt2(s11, e14, t9)), t9.subscribe((o12) => {
    ["Connected", "Reconnecting"].includes(o12) ? i10 || (i10 = Dt2(s11, e14, t9)) : ["Disconnected", "Failed"].includes(o12) && i10 && (fs(e14, o12), i10(), i10 = void 0);
  }, E3);
};
var Dt2 = (s11, e14, t9) => {
  var r9, a4;
  let i10 = Ts(t9, e14);
  (r9 = s11.getWebrtcInternals()) == null || r9.start();
  let o12 = (a4 = s11.getWebrtcInternals()) == null ? void 0 : a4.onStatsChange((n18) => Hs2(e14, n18, t9, s11));
  return () => {
    i10(), o12 && o12();
  };
};
var Ts = (s11, e14) => {
  let t9, i10, o12;
  return s11.getState(G2) ? e14.namedSetState((r9) => {
    r9.localPeer.id = s11.getState(G2);
  }, "localpeer-id") : t9 = s11.subscribe((r9) => {
    r9 && e14.namedSetState((a4) => {
      a4.localPeer.id = r9;
    }, "localpeer-id");
  }, G2), s11.getState(I2) ? e14.namedSetState((r9) => {
    r9.localPeer.videoTrack = s11.getState(I2);
  }, "localpeer-videotrack-id") : i10 = s11.subscribe((r9) => {
    r9 && e14.namedSetState((a4) => {
      a4.localPeer.videoTrack = r9;
    }, "localpeer-videotrack-id");
  }, I2), s11.getState(b2) ? e14.namedSetState((r9) => {
    r9.localPeer.audioTrack = s11.getState(b2);
  }, "localpeer-audiotrack-id") : o12 = s11.subscribe((r9) => {
    r9 && e14.namedSetState((a4) => {
      a4.localPeer.audioTrack = r9;
    }, "localpeer-audiotrack-id");
  }, b2), () => {
    t9 == null || t9(), i10 == null || i10(), o12 == null || o12();
  };
};
var Hs2 = (s11, e14, t9, i10) => {
  let o12 = t9.getState(T);
  s11.namedSetState((r9) => {
    let a4 = t9.getState(G2), n18 = {}, l5 = Object.keys(o12).filter((L3) => o12[L3].peerId !== a4);
    for (let L3 of l5) {
      let x3 = e14.getRemoteTrackStats(L3);
      x3 && (n18[L3] = x3);
    }
    Ne2(r9.remoteTrackStats, n18);
    let m4 = { [a4]: e14.getLocalPeerStats() };
    Ne2(r9.peerStats, m4), Rt2(r9.localTrackStats, e14.getLocalTrackStats(), i10.store.getLocalPeerTracks());
  }, "webrtc-stats");
};
var fs = (s11, e14 = "resetState") => {
  s11.namedSetState((t9) => {
    Object.assign(t9, ne2());
  }, e14);
};
var Te2 = (s11) => w ? `${s11} ${document.title}` : s11;
var He2 = { [ct.PEER_JOINED]: "PEER_JOINED", [ct.PEER_LEFT]: "PEER_LEFT", [ct.ROLE_UPDATED]: "ROLE_UPDATED", [ct.NAME_UPDATED]: "NAME_UPDATED", [ct.METADATA_UPDATED]: "METADATA_UPDATED" };
var te2 = { [ie.TRACK_ADDED]: "TRACK_ADDED", [ie.TRACK_REMOVED]: "TRACK_REMOVED", [ie.TRACK_MUTED]: "TRACK_MUTED", [ie.TRACK_UNMUTED]: "TRACK_UNMUTED", [ie.TRACK_DEGRADED]: "TRACK_DEGRADED", [ie.TRACK_RESTORED]: "TRACK_RESTORED", [ie.TRACK_DESCRIPTION_CHANGED]: "TRACK_DESCRIPTION_CHANGED" };
var fe2 = { [zt.POLL_CREATED]: "POLL_CREATED", [zt.POLL_STARTED]: "POLL_STARTED", [zt.POLL_STOPPED]: "POLL_STOPPED", [zt.POLL_STATS_UPDATED]: "POLL_VOTES_UPDATED" };
var Oe2 = "hmsNotification";
var me2 = class {
  constructor(e14) {
    this.id = 0;
    this.onNotification = (e15, t9) => {
      let i10 = (o12) => {
        if (t9) {
          let r9;
          if (Array.isArray(t9) ? r9 = t9.includes(o12.type) : r9 = t9 === o12.type, !r9)
            return;
        }
        e15(o12);
      };
      return this.eventEmitter.addListener(Oe2, i10), () => {
        this.eventEmitter.removeListener(Oe2, i10);
      };
    };
    this.store = e14, this.eventEmitter = new import_eventemitter24.EventEmitter2({ maxListeners: Object.keys(De2).length });
  }
  sendPlaylistTrackEnded(e14) {
    let t9 = this.createNotification("PLAYLIST_TRACK_ENDED", e14, "info");
    this.emitEvent(t9);
  }
  sendDeviceChange(e14) {
    var i10;
    let t9 = this.createNotification("DEVICE_CHANGE_UPDATE", e14, e14.error ? "error" : "info", `Selected ${e14.type} device - ${(i10 = e14.selection) == null ? void 0 : i10.label}`);
    this.emitEvent(t9);
  }
  sendLeaveRoom(e14) {
    var o12;
    let t9 = (o12 = e14.requestedBy) == null ? void 0 : o12.name, i10 = this.createNotification(e14.roomEnded || !t9 ? "ROOM_ENDED" : "REMOVED_FROM_ROOM", e14, "info", `${e14.roomEnded ? "Room ended" : "Removed from room"} ${t9 ? `by ${t9}` : ""}`);
    this.emitEvent(i10);
  }
  sendPeerList(e14) {
    let t9 = this.createNotification("PEER_LIST", e14, "info");
    this.emitEvent(t9);
  }
  sendPeerUpdate(e14, t9) {
    let i10 = this.store.getState(C2(t9 == null ? void 0 : t9.id)) || t9, o12 = He2[e14];
    if (o12) {
      let r9 = this.createNotification(o12, i10, "info");
      this.emitEvent(r9);
    }
  }
  sendTrackUpdate(e14, t9) {
    let i10 = this.store.getState(ue2(t9)), o12 = te2[e14];
    if (o12) {
      let r9 = this.createNotification(o12, i10, "info");
      this.emitEvent(r9);
    }
  }
  sendMessageReceived(e14) {
    let t9 = this.createNotification("NEW_MESSAGE", e14, "info");
    this.emitEvent(t9);
  }
  sendError(e14) {
    let t9 = this.createNotification("ERROR", e14, "error");
    this.emitEvent(t9);
  }
  sendReconnecting(e14) {
    let t9 = this.createNotification("RECONNECTING", e14, "error");
    this.emitEvent(t9);
  }
  sendReconnected() {
    let e14 = this.createNotification("RECONNECTED", null, "info");
    this.emitEvent(e14);
  }
  sendChangeTrackStateRequest(e14) {
    let t9 = this.createNotification("CHANGE_TRACK_STATE_REQUEST", e14, "info");
    this.emitEvent(t9);
  }
  sendChangeMultiTrackStateRequest(e14) {
    let t9 = this.createNotification("CHANGE_MULTI_TRACK_STATE_REQUEST", e14, "info");
    this.emitEvent(t9);
  }
  sendPollUpdate(e14, t9) {
    let i10 = fe2[e14], o12 = this.store.getState(gt2(t9));
    if (i10) {
      let r9 = this.createNotification(i10, o12, "info");
      this.emitEvent(r9);
    }
  }
  emitEvent(e14) {
    this.eventEmitter.emit(Oe2, e14);
  }
  createNotification(e14, t9, i10, o12 = "") {
    return this.id++, { id: this.id, type: e14, message: o12, data: t9, severity: i10 };
  }
};
function It2(s11) {
  return s11 instanceof re || s11 instanceof H;
}
var f4 = class s2 {
  static convertPeer(e14) {
    var t9, i10, o12;
    return { id: e14.peerId, name: e14.name, roleName: (t9 = e14.role) == null ? void 0 : t9.name, isLocal: e14.isLocal, videoTrack: (i10 = e14.videoTrack) == null ? void 0 : i10.trackId, audioTrack: (o12 = e14.audioTrack) == null ? void 0 : o12.trackId, auxiliaryTracks: e14.auxiliaryTracks.map((r9) => r9.trackId), customerUserId: e14.customerUserId, metadata: e14.metadata, joinedAt: e14.joinedAt };
  }
  static convertTrack(e14, t9) {
    let i10 = { id: e14.trackId, source: e14.source, type: e14.type, enabled: e14.enabled, displayEnabled: e14.enabled, peerId: e14.peerId || t9 };
    return this.enrichTrack(i10, e14), i10;
  }
  static enrichTrack(e14, t9) {
    let i10 = t9.getMediaTrackSettings();
    t9 instanceof re && (e14.volume = t9.getVolume() || 0), s2.updateDeviceID(e14, t9), s2.enrichLocalTrack(e14, t9), e14.type === "video" && (e14.source === "screen" ? (e14.displaySurface = i10.displaySurface, s2.enrichScreenTrack(e14, t9)) : e14.source === "regular" && (e14.facingMode = i10.facingMode), e14.height = i10.height, e14.width = i10.width, s2.enrichVideoTrack(e14, t9)), s2.enrichPluginsDetails(e14, t9);
  }
  static enrichLocalTrack(e14, t9) {
    (t9 instanceof F || t9 instanceof pe) && (e14.isPublished = t9.isPublished);
  }
  static updateDeviceID(e14, t9) {
    var i10;
    t9 instanceof F || t9 instanceof pe ? e14.deviceID = t9.settings.deviceId : e14.deviceID = (i10 = t9.getMediaTrackSettings()) == null ? void 0 : i10.deviceId;
  }
  static enrichVideoTrack(e14, t9) {
    t9 instanceof H && (e14.layer = t9.getLayer(), e14.preferredLayer = t9.getPreferredLayer(), e14.degraded = t9.degraded), (t9 instanceof H || t9 instanceof F) && (N3(t9.getSimulcastDefinitions(), e14.layerDefinitions) || (e14.layerDefinitions = t9.getSimulcastDefinitions()));
  }
  static enrichScreenTrack(e14, t9) {
    var i10, o12;
    if (t9 instanceof F) {
      let r9 = (i10 = t9.getCaptureHandle) == null ? void 0 : i10.call(t9);
      (r9 == null ? void 0 : r9.handle) !== ((o12 = e14.captureHandle) == null ? void 0 : o12.handle) && (e14.captureHandle = r9), t9.isCurrentTab && (e14.displaySurface = "selfBrowser");
    }
  }
  static enrichPluginsDetails(e14, t9) {
    (t9 instanceof F || t9 instanceof pe) && (N3(t9.getPlugins(), e14.plugins) || (e14.plugins = t9.getPlugins()));
  }
  static convertRoom(e14, t9) {
    let { recording: i10, rtmp: o12, hls: r9 } = s2.convertRecordingStreamingState(e14 == null ? void 0 : e14.recording, e14 == null ? void 0 : e14.rtmp, e14 == null ? void 0 : e14.hls);
    return { id: e14.id, name: e14.name, localPeer: t9, recording: i10, rtmp: o12, hls: r9, sessionId: e14.sessionId, startedAt: e14.startedAt, joinedAt: e14.joinedAt, peerCount: e14.peerCount };
  }
  static convertMessage(e14) {
    var t9, i10, o12, r9, a4, n18, l5;
    return { sender: (t9 = e14.sender) == null ? void 0 : t9.peerId, senderName: (i10 = e14.sender) == null ? void 0 : i10.name, senderRole: (r9 = (o12 = e14.sender) == null ? void 0 : o12.role) == null ? void 0 : r9.name, senderUserId: (a4 = e14.sender) == null ? void 0 : a4.customerUserId, recipientPeer: (n18 = e14.recipientPeer) == null ? void 0 : n18.peerId, recipientRoles: (l5 = e14.recipientRoles) == null ? void 0 : l5.map((m4) => m4.name), time: e14.time, type: e14.type, message: e14.message, id: e14.id };
  }
  static convertRoles(e14) {
    let t9 = {};
    return e14 && e14.forEach((i10) => {
      t9[i10.name] = i10;
    }), t9;
  }
  static convertRoleChangeRequest(e14) {
    var t9;
    return { requestedBy: (t9 = e14.requestedBy) == null ? void 0 : t9.peerId, roleName: e14.role.name, token: e14.token };
  }
  static convertException(e14) {
    return { code: e14.code, action: e14.action, name: e14.name, message: e14.message, description: e14.description, isTerminal: e14.isTerminal, nativeError: e14.nativeError, timestamp: new Date() };
  }
  static convertDeviceChangeUpdate(e14) {
    let t9 = { devices: e14.devices, selection: e14.selection, type: e14.type };
    return e14.error && (t9.error = this.convertException(e14.error)), t9;
  }
  static convertPlaylist(e14) {
    let t9 = this.getConvertedPlaylistType(e14, "audio"), i10 = this.getConvertedPlaylistType(e14, "video");
    return { audio: t9, video: i10 };
  }
  static convertPlaylistItem(e14, t9) {
    let i10 = t9.type, o12 = e14.getCurrentSelection(i10), r9 = e14.isPlaying(i10), a4 = t9.url === (o12 == null ? void 0 : o12.url);
    return K2(h2({}, t9), { type: t9.type, selected: a4, playing: a4 && r9 });
  }
  static getConvertedPlaylistType(e14, t9) {
    let i10 = {}, o12 = e14.getCurrentSelection(t9), r9 = e14.getCurrentProgress(t9), a4 = e14.getVolume(t9), n18 = e14.getList(t9), l5 = e14.getCurrentIndex(t9);
    return e14.getList(t9).forEach((m4) => {
      i10[m4.id] = s2.convertPlaylistItem(e14, m4);
    }), { list: i10, selection: { id: o12 == null ? void 0 : o12.id, hasPrevious: l5 > 0, hasNext: l5 < n18.length - 1 }, progress: r9, volume: a4, currentTime: e14.getCurrentTime(t9), playbackRate: e14.getPlaybackRate(t9) };
  }
  static convertRecordingStreamingState(e14, t9, i10) {
    var o12;
    return { recording: { browser: h2({ running: false }, e14 == null ? void 0 : e14.browser), server: h2({ running: false }, e14 == null ? void 0 : e14.server), hls: h2({ running: false }, e14 == null ? void 0 : e14.hls) }, rtmp: h2({ running: false }, t9), hls: { variants: ((o12 = i10 == null ? void 0 : i10.variants) == null ? void 0 : o12.map((r9) => r9)) || [], running: !!(i10 != null && i10.running), error: i10 == null ? void 0 : i10.error } };
  }
};
var ye2 = class {
  constructor(e14) {
    this.sdk = e14;
  }
  get sdkInteractivityCenter() {
    return this.sdk.getInteractivityCenter();
  }
  createPoll(e14) {
    return this.sdkInteractivityCenter.createPoll(e14);
  }
  startPoll(e14) {
    return this.sdkInteractivityCenter.startPoll(e14);
  }
  stopPoll(e14) {
    return this.sdkInteractivityCenter.stopPoll(e14);
  }
  addQuestionsToPoll(e14, t9) {
    return this.sdkInteractivityCenter.addQuestionsToPoll(e14, t9);
  }
  addResponsesToPoll(e14, t9) {
    return this.sdkInteractivityCenter.addResponsesToPoll(e14, t9);
  }
};
var ie2 = class {
  constructor(e14, t9, i10, o12) {
    this.playlistManager = e14;
    this.syncPlaylistState = i10;
    this.store = o12;
    this.type = t9;
  }
  play(e14) {
    return c2(this, null, function* () {
      if (!e14) {
        S2.w("Please pass id to play");
        return;
      }
      yield this.playlistManager.setEnabled(true, { id: e14, type: this.type });
    });
  }
  pause() {
    return c2(this, null, function* () {
      let e14 = this.type === "audio" ? ct2 : St2, t9 = this.store.getState(e14.selection);
      if (!t9.id) {
        S2.w("No item is currently playing to pause");
        return;
      }
      yield this.playlistManager.setEnabled(false, { id: t9.id, type: this.type });
    });
  }
  playNext() {
    return c2(this, null, function* () {
      yield this.playlistManager.playNext(this.type);
    });
  }
  playPrevious() {
    return c2(this, null, function* () {
      yield this.playlistManager.playPrevious(this.type);
    });
  }
  seek(e14) {
    this.playlistManager.seek(e14, this.type), this.syncPlaylistState(`seekOn${this.type}Playlist`);
  }
  seekTo(e14) {
    this.playlistManager.seekTo(e14, this.type), this.syncPlaylistState(`seekToOn${this.type}Playlist`);
  }
  setVolume(e14) {
    this.playlistManager.setVolume(e14, this.type), this.syncPlaylistState(`setVolumeOn${this.type}Playlist`);
  }
  setList(e14) {
    this.playlistManager.setList(e14), this.syncPlaylistState(`setListOn${this.type}Playlist`);
  }
  stop() {
    return c2(this, null, function* () {
      yield this.playlistManager.stop(this.type), this.syncPlaylistState(`stop${this.type}Playlist`);
    });
  }
  setIsAutoplayOn(e14) {
    this.playlistManager.setIsAutoplayOn(this.type, e14);
  }
  setPlaybackRate(e14) {
    this.playlistManager.setPlaybackRate(this.type, e14), this.syncPlaylistState(`set${this.type}PlaybackRate`);
  }
  removeItem(e14) {
    return c2(this, null, function* () {
      let t9 = yield this.playlistManager.removeItem(e14, this.type);
      return t9 && this.syncPlaylistState(`remove${this.type}PlaylistItem`), t9;
    });
  }
  clearList() {
    return c2(this, null, function* () {
      yield this.playlistManager.clearList(this.type), this.syncPlaylistState(`clear${this.type}Playlist`);
    });
  }
};
var ge2 = class {
  constructor(e14, t9) {
    this.sdk = e14;
    this.setLocally = t9;
  }
  get sdkSessionStore() {
    return this.sdk.getSessionStore();
  }
  set(e14, t9) {
    return c2(this, null, function* () {
      let { value: i10 } = yield this.sdkSessionStore.set(String(e14), t9);
      this.setLocally({ key: e14, value: i10 });
    });
  }
  observe(e14) {
    return c2(this, null, function* () {
      let t9 = Array.isArray(e14) ? e14.map((i10) => String(i10)) : [String(e14)];
      yield this.sdkSessionStore.observe(t9);
    });
  }
  unobserve(e14) {
    return c2(this, null, function* () {
      let t9 = Array.isArray(e14) ? e14.map((i10) => String(i10)) : [String(e14)];
      yield this.sdkSessionStore.unobserve(t9);
    });
  }
};
var he2 = class {
  constructor(e14, t9) {
    this.intervalMs = 100, this.shouldMonitor = false, this.hasStarted = false, this.unsubs = [], this.analysers = {}, this.store = e14, this.actions = t9;
  }
  start() {
    return c2(this, null, function* () {
      if (this.hasStarted)
        return;
      this.hasStarted = true, S2.d("starting audio level monitor for remote peers", this.store);
      let e14 = this.store.getState(B3);
      S2.d("starting audio levels is connected to room", e14), e14 && (yield this.monitorAudioLevels());
      let t9 = this.store.subscribe(this.monitorAudioLevels.bind(this), B3);
      this.unsubs.push(t9);
    });
  }
  stop() {
    return c2(this, null, function* () {
      this.hasStarted && (this.hasStarted = false, this.shouldMonitor = false, this.unsubs.forEach((e14) => e14()), S2.d("stopped audio level monitor for remote peers"));
    });
  }
  monitorAudioLevels() {
    return c2(this, null, function* () {
      if (!this.store.getState(B3)) {
        this.shouldMonitor && (S2.i("room no longer connected, stopping audio level monitoring for remote"), this.shouldMonitor = false);
        return;
      }
      if (this.shouldMonitor)
        return;
      S2.i("monitoring audio levels"), this.shouldMonitor = true;
      let t9 = () => {
        this.shouldMonitor ? (this.logAllPeersAudioLevels(), setTimeout(t9, this.intervalMs)) : S2.i("stopped monitoring audio levels");
      };
      setTimeout(t9, 1e3);
    });
  }
  logAllPeersAudioLevels() {
    return c2(this, null, function* () {
      var o12;
      if (!window.__triggerBeamEvent__)
        return;
      let t9 = this.store.getState(w3).filter((r9) => !!r9.audioTrack), i10 = [];
      for (let r9 of t9) {
        let a4 = this.actions.hmsSDKTracks[r9.audioTrack], n18 = (o12 = a4 == null ? void 0 : a4.stream) == null ? void 0 : o12.nativeStream;
        if (r9.joinedAt && n18) {
          let l5 = yield this.getAudioLevel(r9, n18);
          l5.level > 0 && i10.push(l5);
        }
      }
      if (i10.length > 0) {
        let r9 = { event: "app-audio-level", data: i10 };
        window.__triggerBeamEvent__(JSON.stringify(r9));
      }
    });
  }
  getAudioLevel(e14, t9) {
    return c2(this, null, function* () {
      this.analysers[t9.id] || (this.analysers[t9.id] = this.createAnalyserNode(t9));
      let i10 = this.analysers[t9.id], o12 = this.calculateAudioLevel(i10);
      return { peerId: e14.id, peerName: e14.name, level: o12 };
    });
  }
  createAnalyserNode(e14) {
    this.audioContext || (this.audioContext = new AudioContext());
    let t9 = this.audioContext.createAnalyser();
    return this.audioContext.createMediaStreamSource(e14).connect(t9), t9;
  }
  calculateAudioLevel(e14) {
    let t9 = new Uint8Array(e14.fftSize);
    e14.getByteTimeDomainData(t9);
    let i10 = 9e-3, o12 = i10;
    for (let n18 of t9)
      o12 = Math.max(o12, (n18 - 128) / 128);
    let r9 = (Math.log(i10) - Math.log(o12)) / Math.log(i10);
    return Math.ceil(Math.min(Math.max(r9 * 100, 0), 100));
  }
};
var Pe2 = class {
  constructor(e14, t9, i10) {
    this.hmsSDKTracks = {};
    this.isRoomJoinCalled = false;
    this.ignoredMessageTypes = [];
    this.setProgress = ({ type: e15, progress: t10 }) => {
      this.setState((i11) => {
        i11.playlist[e15].progress = t10, i11.playlist[e15].currentTime = this.sdk.getPlaylistManager().getCurrentTime(e15);
      }, "playlistProgress");
    };
    this.syncPlaylistState = (e15) => {
      this.setState((t10) => {
        Object.assign(t10.playlist, f4.convertPlaylist(this.sdk.getPlaylistManager()));
      }, e15);
    };
    this.sendPeerUpdateNotification = (e15, t10) => {
      let i11 = this.store.getState(C2(t10.peerId)), o12 = He2[e15] || "peerUpdate";
      if ([ct.PEER_JOINED, ct.PEER_LEFT].includes(e15))
        this.syncRoomState(o12), i11 || (i11 = this.store.getState(C2(t10.peerId)));
      else {
        let r9 = f4.convertPeer(t10);
        this.setState((a4) => {
          let n18 = a4.peers[r9.id];
          F2(n18, r9) && (N3(n18.auxiliaryTracks, r9.auxiliaryTracks) && (n18.auxiliaryTracks = r9.auxiliaryTracks), Object.assign(n18, r9)), i11 = r9;
        }, o12);
      }
      this.hmsNotifications.sendPeerUpdate(e15, i11);
    };
    this.getSDKHMSPeer = (e15) => this.sdk.getPeerMap()[e15];
    this.setState = (e15, t10) => this.store.namedSetState(e15, t10);
    this.store = e14, this.sdk = t9, this.hmsNotifications = i10, this.sessionStore = new ge2(this.sdk, this.setSessionStoreValueLocally.bind(this)), this.interactivityCenter = new ye2(this.sdk);
  }
  refreshDevices() {
    return c2(this, null, function* () {
      yield this.sdk.refreshDevices();
    });
  }
  unblockAudio() {
    return c2(this, null, function* () {
      yield this.sdk.getAudioOutput().unblockAutoplay();
    });
  }
  setVolume(e14, t9) {
    return c2(this, null, function* () {
      t9 ? yield this.setTrackVolume(e14, t9) : (yield this.sdk.getAudioOutput().setVolume(e14), this.syncRoomState("setOutputVolume"));
    });
  }
  setAudioOutputDevice(e14) {
    return c2(this, null, function* () {
      (yield this.sdk.getAudioOutput().setDevice(e14)) && this.setState((i10) => {
        i10.settings.audioOutputDeviceId = e14;
      }, "setAudioOutputDevice");
    });
  }
  setPreferredLayer(e14, t9) {
    return c2(this, null, function* () {
      var o12;
      let i10 = this.hmsSDKTracks[e14];
      if (i10)
        if (i10 instanceof H) {
          if (t9 === fe.NONE) {
            S2.d(`layer ${fe.NONE} will be ignored`);
            return;
          }
          if (((o12 = this.store.getState(ut2(e14))) == null ? void 0 : o12.preferredLayer) === t9) {
            S2.d(`preferred layer is already ${t9}`);
            return;
          }
          this.setState((a4) => {
            let n18 = a4.tracks[e14];
            n18 && (n18.preferredLayer = t9);
          }, "setPreferredLayer"), yield i10.setPreferredLayer(t9);
        } else
          S2.d(`track ${e14} is not a remote video track`);
      else
        this.logPossibleInconsistency(`track ${e14} not present, unable to set preffer layer`);
    });
  }
  getAuthTokenByRoomCode(e14, t9) {
    return this.sdk.getAuthTokenByRoomCode(e14, t9);
  }
  preview(e14) {
    return c2(this, null, function* () {
      if (this.isRoomJoinCalled) {
        this.logPossibleInconsistency("attempting to call preview after join was called");
        return;
      }
      let t9 = this.store.getState(E3);
      if (t9 === "Preview" || t9 === "Connecting") {
        this.logPossibleInconsistency("attempting to call preview while room is in preview/connecting");
        return;
      }
      try {
        this.setState((i10) => {
          i10.room.roomState = "Connecting";
        }, "connecting"), yield this.sdkPreviewWithListeners(e14);
      } catch (i10) {
        throw S2.e("Cannot show preview. Failed to connect to room - ", i10), i10;
      }
    });
  }
  join(e14) {
    return c2(this, null, function* () {
      if (this.isRoomJoinCalled) {
        this.logPossibleInconsistency("room join is called again");
        return;
      }
      try {
        this.isRoomJoinCalled = true, this.setState((t9) => {
          t9.room.roomState = "Connecting";
        }, "join"), yield this.sdkJoinWithListeners(e14);
      } catch (t9) {
        throw this.isRoomJoinCalled = false, S2.e("Failed to connect to room - ", t9), t9;
      }
    });
  }
  leave() {
    return c2(this, null, function* () {
      let e14 = this.store.getState(B3), t9 = true;
      e14 || (t9 = false, this.logPossibleInconsistency("room leave is called when no room is connected"));
      let i10 = this.store.getState(E3);
      return this.setState((o12) => {
        o12.room.roomState = "Disconnecting";
      }, "leaving"), this.sdk.leave(t9).then(() => {
        this.resetState("leave"), this.beamSpeakerLabelsLogger && this.beamSpeakerLabelsLogger.stop().catch(S2.e), S2.i("left room");
      }).catch((o12) => {
        S2.e("error in leaving room - ", o12), this.setState((r9) => {
          r9.room.roomState = i10;
        }, "revertLeave");
      });
    });
  }
  setScreenShareEnabled(e14, t9) {
    return c2(this, null, function* () {
      typeof t9 == "boolean" && (t9 = { audioOnly: t9 });
      try {
        e14 ? yield this.startScreenShare(t9) : yield this.stopScreenShare();
      } catch (i10) {
        throw this.hmsNotifications.sendError(f4.convertException(i10)), i10;
      }
    });
  }
  addTrack(e14, t9 = "regular") {
    return c2(this, null, function* () {
      yield this.sdk.addTrack(e14, t9), this.syncRoomState("addTrack");
    });
  }
  removeTrack(e14) {
    return c2(this, null, function* () {
      yield this.sdk.removeTrack(e14), this.syncRoomState("removeTrack");
    });
  }
  setLocalAudioEnabled(e14) {
    return c2(this, null, function* () {
      let t9 = this.store.getState(b2);
      t9 && (yield this.setEnabledTrack(t9, e14));
    });
  }
  setLocalVideoEnabled(e14) {
    return c2(this, null, function* () {
      let t9 = this.store.getState(I2);
      t9 && (yield this.setEnabledTrack(t9, e14));
    });
  }
  setEnabledTrack(e14, t9) {
    return c2(this, null, function* () {
      var r9;
      if (((r9 = this.store.getState().tracks[e14]) == null ? void 0 : r9.enabled) === t9) {
        this.logPossibleInconsistency(`local track[${e14}] enabled state - ${t9}`);
        return;
      }
      this.setState((a4) => {
        a4.tracks[e14] ? a4.tracks[e14].displayEnabled = t9 : this.logPossibleInconsistency("track id not found for setEnabled");
      }, "displayEnabled");
      try {
        yield this.setEnabledSDKTrack(e14, t9), this.syncRoomState("setEnabled");
      } catch (a4) {
        throw this.setState((n18) => {
          n18.tracks[e14].displayEnabled = !t9;
        }, "rollbackDisplayEnabled"), this.hmsNotifications.sendError(f4.convertException(a4)), a4;
      }
      let o12 = t9 ? ie.TRACK_UNMUTED : ie.TRACK_MUTED;
      this.hmsNotifications.sendTrackUpdate(o12, e14);
    });
  }
  setAudioSettings(e14) {
    return c2(this, null, function* () {
      let t9 = this.store.getState(b2);
      t9 && (yield this.setSDKLocalAudioTrackSettings(t9, e14), this.syncRoomState("setAudioSettings"));
    });
  }
  setVideoSettings(e14) {
    return c2(this, null, function* () {
      let t9 = this.store.getState(I2);
      t9 && (yield this.setSDKLocalVideoTrackSettings(t9, e14), this.syncRoomState("setVideoSettings"));
    });
  }
  switchCamera() {
    return c2(this, null, function* () {
      let e14 = this.store.getState(I2);
      if (e14) {
        let t9 = this.hmsSDKTracks[e14];
        t9 && (yield t9.switchCamera(), this.syncRoomState("switchCamera"));
      }
    });
  }
  sendMessage(e14) {
    this.sendBroadcastMessage(e14);
  }
  sendBroadcastMessage(e14, t9) {
    return c2(this, null, function* () {
      let i10 = yield this.sdk.sendBroadcastMessage(e14, t9);
      this.updateMessageInStore(i10, { message: e14, type: t9 });
    });
  }
  sendGroupMessage(e14, t9, i10) {
    return c2(this, null, function* () {
      let o12 = this.store.getState(_3), r9 = t9.map((n18) => o12[n18]), a4 = yield this.sdk.sendGroupMessage(e14, r9, i10);
      this.updateMessageInStore(a4, { message: e14, recipientRoles: t9, type: i10 });
    });
  }
  sendDirectMessage(e14, t9, i10) {
    return c2(this, null, function* () {
      let o12 = this.getSDKHMSPeer(t9);
      if (!o12)
        throw S2.w("sendMessage", "Failed to send message"), Error(`sendMessage Failed - peer ${t9} not found`);
      let r9 = yield this.sdk.sendDirectMessage(e14, o12, i10);
      this.updateMessageInStore(r9, { message: e14, recipientPeer: o12.peerId, type: i10 });
    });
  }
  updateMessageInStore(e14, t9) {
    if (!e14)
      throw S2.w("sendMessage", "Failed to send message", t9), Error(`sendMessage Failed - ${JSON.stringify(t9)}`);
    let i10 = f4.convertMessage(e14);
    return i10.read = true, i10.senderName = "You", i10.ignored = this.ignoredMessageTypes.includes(i10.type), this.putMessageInStore(i10), i10;
  }
  setMessageRead(e14, t9) {
    this.setState((i10) => {
      t9 ? i10.messages.byID[t9] ? i10.messages.byID[t9].read = e14 : this.logPossibleInconsistency("no message with id is found") : i10.messages.allIDs.forEach((o12) => {
        i10.messages.byID[o12].read = e14;
      });
    }, "setMessageRead");
  }
  attachVideo(e14, t9) {
    return c2(this, null, function* () {
      if (this.localAndVideoUnmuting(e14))
        return new Promise((i10) => {
          let o12 = this.store.subscribe((r9) => c2(this, null, function* () {
            r9 && (yield this.attachVideoInternal(e14, t9), o12(), i10());
          }), Ie2);
        });
      yield this.attachVideoInternal(e14, t9);
    });
  }
  detachVideo(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.hmsSDKTracks[e14];
      (i10 == null ? void 0 : i10.type) === "video" ? yield this.sdk.detachVideo(i10, t9) : (t9 && (t9.srcObject = null), S2.d("possible inconsistency detected - no video track found to remove sink"));
    });
  }
  addPluginToVideoTrack(e14, t9) {
    return c2(this, null, function* () {
      return this.addRemoveVideoPlugin(e14, "add", t9);
    });
  }
  addPluginToAudioTrack(e14) {
    return c2(this, null, function* () {
      return this.addRemoveAudioPlugin(e14, "add");
    });
  }
  validateVideoPluginSupport(e14) {
    let t9 = {};
    if (t9.isSupported = false, !e14)
      return S2.w("no plugin passed in for checking support"), t9.errMsg = "no plugin passed in for checking support", t9;
    let i10 = this.store.getState(I2);
    if (!i10)
      return S2.w("video Track not added to local peer yet"), t9.errMsg = "call this function only after local peer has video track", t9;
    let o12 = this.hmsSDKTracks[i10];
    return o12 ? t9 = o12.validatePlugin(e14) : (S2.w(`track ${i10} not present, unable to validate plugin`), t9.errMsg = `track ${i10} not present, unable to validate plugin`), t9;
  }
  validateAudioPluginSupport(e14) {
    let t9 = {};
    if (t9.isSupported = false, !e14)
      return S2.w('no plugin passed in for checking support"'), t9.errMsg = 'no plugin passed in for checking support"', t9;
    let i10 = this.store.getState(b2);
    if (!i10)
      return S2.w("audio track not added to local peer yet"), t9.errMsg = "call this function only after local peer has audio track", t9;
    let o12 = this.hmsSDKTracks[i10];
    return o12 ? t9 = o12.validatePlugin(e14) : (S2.w(`track ${i10} not present, unable to validate plugin`), t9.errMsg = `track ${i10} not present, unable to validate plugin`), t9;
  }
  removePluginFromVideoTrack(e14) {
    return c2(this, null, function* () {
      return this.addRemoveVideoPlugin(e14, "remove");
    });
  }
  removePluginFromAudioTrack(e14) {
    return c2(this, null, function* () {
      return this.addRemoveAudioPlugin(e14, "remove");
    });
  }
  changeRole(e14, t9, i10 = false) {
    return c2(this, null, function* () {
      let o12 = this.getSDKHMSPeer(e14);
      if (!o12) {
        this.logPossibleInconsistency(`Unknown peer ID given ${e14} for changerole`);
        return;
      }
      yield this.sdk.changeRoleOfPeer(o12, t9, i10);
    });
  }
  changeRoleOfPeer(e14, t9, i10 = false) {
    return c2(this, null, function* () {
      let o12 = this.getSDKHMSPeer(e14);
      if (!o12) {
        this.logPossibleInconsistency(`Unknown peer ID given ${e14} for changerole`);
        return;
      }
      yield this.sdk.changeRoleOfPeer(o12, t9, i10);
    });
  }
  changeRoleOfPeersWithRoles(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.sdk.getRoles().filter((o12) => e14.includes(o12.name));
      yield this.sdk.changeRoleOfPeersWithRoles(i10, t9);
    });
  }
  acceptChangeRole(e14) {
    return c2(this, null, function* () {
      let t9 = e14.requestedBy ? this.getSDKHMSPeer(e14.requestedBy.id) : void 0;
      t9 || S2.w(`peer for which role change is requested no longer available - ${e14.requestedBy}`);
      let i10 = { requestedBy: t9, role: e14.role, token: e14.token };
      yield this.sdk.acceptChangeRole(i10), this.removeRoleChangeRequest(e14);
    });
  }
  initAppData(e14) {
    this.setState((t9) => {
      t9.appData = e14;
    }, "initAppData");
  }
  setAppData(e14, t9, i10) {
    let o12 = (t9 == null ? void 0 : t9.constructor.name) === "Object";
    this.setState((r9) => {
      if (r9.appData)
        i10 && o12 ? Object.assign(r9.appData[e14], t9) : r9.appData[e14] = t9;
      else {
        let a4 = { [e14]: t9 };
        r9.appData = a4;
      }
    }, `setAppData-${e14}`);
  }
  rejectChangeRole(e14) {
    this.removeRoleChangeRequest(e14);
  }
  endRoom(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.store.getState(Xe2);
      if (!(i10 != null && i10.endRoom)) {
        S2.w("You are not allowed to perform this action - endRoom");
        return;
      }
      let o12 = this.store.getState(E3);
      this.setState((r9) => {
        r9.room.roomState = "Disconnecting";
      }, "endingRoom");
      try {
        yield this.sdk.endRoom(e14, t9), this.resetState("endRoom");
      } catch (r9) {
        S2.e("error in ending room - ", r9), this.setState((a4) => {
          a4.room.roomState = o12;
        }, "revertEndRoom");
      }
    });
  }
  removePeer(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.getSDKHMSPeer(e14);
      if (i10 && !i10.isLocal)
        yield this.sdk.removePeer(i10, t9);
      else {
        this.logPossibleInconsistency(`No remote peer found for peerID - ${e14}`);
        return;
      }
    });
  }
  startRTMPOrRecording(e14) {
    return c2(this, null, function* () {
      yield this.sdk.startRTMPOrRecording(e14);
    });
  }
  stopRTMPAndRecording() {
    return c2(this, null, function* () {
      yield this.sdk.stopRTMPAndRecording();
    });
  }
  startHLSStreaming(e14) {
    return c2(this, null, function* () {
      yield this.sdk.startHLSStreaming(e14);
    });
  }
  stopHLSStreaming(e14) {
    return c2(this, null, function* () {
      yield this.sdk.stopHLSStreaming(e14);
    });
  }
  sendHLSTimedMetadata(e14) {
    return c2(this, null, function* () {
      yield this.sdk.sendHLSTimedMetadata(e14);
    });
  }
  changeName(e14) {
    return c2(this, null, function* () {
      yield this.sdk.changeName(e14);
    });
  }
  changeMetadata(e14) {
    return c2(this, null, function* () {
      typeof e14 != "string" && (e14 = JSON.stringify(e14)), yield this.sdk.changeMetadata(e14);
    });
  }
  setSessionMetadata(e14) {
    return c2(this, null, function* () {
      yield this.sdk.setSessionMetadata(e14), this.setState((t9) => {
        t9.sessionMetadata = e14;
      }, "setSessionMetadata"), this.setSessionStoreValueLocally({ key: "default", value: e14 }, "setSessionMetadata");
    });
  }
  populateSessionMetadata() {
    return c2(this, null, function* () {
      let e14 = yield this.sdk.getSessionMetadata();
      this.setState((t9) => {
        t9.sessionMetadata = e14;
      }, "populateSessionMetadata"), this.setSessionStoreValueLocally({ key: "default", value: e14 }, "populateSessionmetadata");
    });
  }
  setRemoteTrackEnabled(e14, t9) {
    return c2(this, null, function* () {
      if (typeof e14 == "string") {
        let i10 = this.hmsSDKTracks[e14];
        i10 && It2(i10) ? yield this.sdk.changeTrackState(i10, t9) : this.logPossibleInconsistency(`No remote track with ID ${e14} found for change track state`);
      } else
        Array.isArray(e14) && e14.forEach((i10) => this.setRemoteTrackEnabled(i10, t9));
    });
  }
  setRemoteTracksEnabled(e14) {
    return c2(this, null, function* () {
      let t9 = { enabled: e14.enabled, type: e14.type, source: e14.source };
      if (e14.roles) {
        let i10 = this.store.getState(_3);
        t9.roles = e14.roles.map((o12) => i10[o12]);
      }
      yield this.sdk.changeMultiTrackState(t9);
    });
  }
  setLogLevel(e14) {
    S2.level = e14, this.sdk.setLogLevel(e14);
  }
  setFrameworkInfo(e14) {
    this.sdk.setFrameworkInfo(e14);
  }
  ignoreMessageTypes(e14, t9 = false) {
    if (t9)
      this.ignoredMessageTypes = e14;
    else
      for (let i10 of e14)
        this.ignoredMessageTypes.includes(i10) || this.ignoredMessageTypes.push(i10);
  }
  enableBeamSpeakerLabelsLogging() {
    return c2(this, null, function* () {
      this.beamSpeakerLabelsLogger || (S2.i("enabling beam speaker labels logging"), this.beamSpeakerLabelsLogger = new he2(this.store, this), yield this.beamSpeakerLabelsLogger.start());
    });
  }
  resetState(e14 = "resetState") {
    this.isRoomJoinCalled = false, this.hmsSDKTracks = {}, S2.cleanup(), this.setState((t9) => {
      Object.assign(t9, ae2());
    }, e14);
  }
  sdkJoinWithListeners(e14) {
    return c2(this, null, function* () {
      yield this.sdk.join(e14, { onJoin: this.onJoin.bind(this), onRoomUpdate: this.onRoomUpdate.bind(this), onPeerUpdate: this.onPeerUpdate.bind(this), onTrackUpdate: this.onTrackUpdate.bind(this), onMessageReceived: this.onMessageReceived.bind(this), onError: this.onError.bind(this), onReconnected: this.onReconnected.bind(this), onReconnecting: this.onReconnecting.bind(this), onRoleChangeRequest: this.onRoleChangeRequest.bind(this), onRoleUpdate: this.onRoleUpdate.bind(this), onDeviceChange: this.onDeviceChange.bind(this), onChangeTrackStateRequest: this.onChangeTrackStateRequest.bind(this), onChangeMultiTrackStateRequest: this.onChangeMultiTrackStateRequest.bind(this), onRemovedFromRoom: this.onRemovedFromRoom.bind(this), onNetworkQuality: this.onNetworkQuality.bind(this), onSessionStoreUpdate: this.onSessionStoreUpdate.bind(this), onPollsUpdate: this.onPollsUpdate.bind(this) }), this.sdk.addAudioListener({ onAudioLevelUpdate: this.onAudioLevelUpdate.bind(this) }), this.sdk.addConnectionQualityListener({ onConnectionQualityUpdate: this.onConnectionQualityUpdate.bind(this) });
    });
  }
  onRemovedFromRoom(e14) {
    var o12;
    let t9 = this.store.getState(C2((o12 = e14.requestedBy) == null ? void 0 : o12.peerId));
    this.hmsNotifications.sendLeaveRoom(K2(h2({}, e14), { requestedBy: t9 || void 0 }));
    let i10 = e14.roomEnded || !t9 ? "roomEnded" : "removedFromRoom";
    S2.i(`resetting state after peer removed ${i10}`, e14), this.resetState(i10);
  }
  onDeviceChange(e14) {
    let t9 = e14.devices;
    if (!t9)
      return;
    let i10 = this.store.getState(v6);
    if (this.setState((o12) => {
      N3(o12.devices.audioInput, t9.audioInput) || (o12.devices.audioInput = t9.audioInput), N3(o12.devices.videoInput, t9.videoInput) || (o12.devices.videoInput = t9.videoInput), N3(o12.devices.audioOutput, t9.audioOutput) || (o12.devices.audioOutput = t9.audioOutput);
      let r9 = this.sdk.getLocalPeer();
      i10 != null && i10.id && r9 && Object.assign(o12.settings, this.getMediaSettings(r9));
    }, "deviceChange"), e14.selection) {
      let o12 = f4.convertDeviceChangeUpdate(e14);
      this.hmsNotifications.sendDeviceChange(o12);
    }
  }
  sdkPreviewWithListeners(e14) {
    return c2(this, null, function* () {
      yield this.sdk.preview(e14, { onPreview: this.onPreview.bind(this), onError: this.onError.bind(this), onReconnected: this.onReconnected.bind(this), onReconnecting: this.onReconnecting.bind(this), onDeviceChange: this.onDeviceChange.bind(this), onRoomUpdate: this.onRoomUpdate.bind(this), onPeerUpdate: this.onPeerUpdate.bind(this), onNetworkQuality: this.onNetworkQuality.bind(this) }), this.sdk.addAudioListener({ onAudioLevelUpdate: this.onAudioLevelUpdate.bind(this) });
    });
  }
  onNetworkQuality(e14) {
    this.setState((t9) => {
      var o12;
      let i10 = t9.room.localPeer || ((o12 = this.sdk.getLocalPeer()) == null ? void 0 : o12.peerId);
      i10 && (t9.connectionQualities[i10] = { peerID: i10, downlinkQuality: e14 });
    }, "ConnectionQuality");
  }
  onSessionStoreUpdate(e14) {
    this.setSessionStoreValueLocally(e14, "sessionStoreUpdate");
  }
  onPollsUpdate(e14, t9) {
    let i10 = fe2[e14];
    this.setState((o12) => {
      let r9 = t9.reduce((a4, n18) => {
        var l5;
        return a4[n18.id] = K2(h2({}, n18), { questions: (l5 = n18.questions) == null ? void 0 : l5.map((m4) => {
          var L3, x3;
          return K2(h2({}, m4), { answer: m4.answer ? h2({}, m4.answer) : void 0, options: (L3 = m4.options) == null ? void 0 : L3.map((H3) => h2({}, H3)), responses: (x3 = m4.responses) == null ? void 0 : x3.map((H3) => h2({}, H3)) });
        }) }), a4;
      }, {});
      kt2(o12.polls, r9);
    }, i10), t9.forEach((o12) => this.hmsNotifications.sendPollUpdate(e14, o12.id));
  }
  startScreenShare(e14) {
    return c2(this, null, function* () {
      this.store.getState(Ee2) ? this.logPossibleInconsistency("start screenshare is called while it's on") : (yield this.sdk.startScreenShare(() => this.syncRoomState("screenshareStopped"), e14), this.syncRoomState("startScreenShare"));
    });
  }
  stopScreenShare() {
    return c2(this, null, function* () {
      this.store.getState(Ee2) ? (yield this.sdk.stopScreenShare(), this.syncRoomState("stopScreenShare")) : this.logPossibleInconsistency("stop screenshare is called while it's not on");
    });
  }
  attachVideoInternal(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.hmsSDKTracks[e14];
      i10 && i10.type === "video" ? yield this.sdk.attachVideo(i10, t9) : this.logPossibleInconsistency("no video track found to add sink");
    });
  }
  syncRoomState(e14) {
    e14 = `${e14}_fullSync`, S2.time(`store-sync-${e14}`);
    let t9 = {}, i10 = [], o12 = {}, r9 = {}, a4 = {}, n18, l5 = this.sdk.getPeers();
    for (let H3 of l5) {
      let q3 = f4.convertPeer(H3);
      t9[q3.id] = q3, i10.push(q3.id);
      let ke2 = [H3.audioTrack, H3.videoTrack, ...H3.auxiliaryTracks];
      for (let O3 of ke2) {
        if (!O3)
          continue;
        let Ve2 = f4.convertTrack(O3);
        o12[Ve2.id] = Ve2, r9[O3.trackId] = O3;
      }
      if (H3.isLocal) {
        let O3 = H3;
        n18 = this.getPreviewFields(O3), Object.assign(a4, this.getMediaSettings(O3));
      }
    }
    let m4 = this.sdk.getRecordingState(), L3 = this.sdk.getRTMPState(), x3 = this.sdk.getHLSState();
    this.setState((H3) => {
      var O3;
      H3.room.peers = i10;
      let q3 = H3.peers, ke2 = H3.tracks;
      ht2(q3, t9), Pt2(ke2, o12), Object.assign(H3.settings, a4), this.hmsSDKTracks = r9, (O3 = H3.preview) != null && O3.localPeer && (n18 != null && n18.localPeer) ? Object.assign(H3.preview, n18) : H3.preview = n18, Object.assign(H3.roles, f4.convertRoles(this.sdk.getRoles())), Object.assign(H3.playlist, f4.convertPlaylist(this.sdk.getPlaylistManager())), Object.assign(H3.room, f4.convertRecordingStreamingState(m4, L3, x3)), Object.assign(H3.templateAppData, this.sdk.getTemplateAppData());
    }, e14), S2.timeEnd(`store-sync-${e14}`);
  }
  onPreview(e14) {
    this.setState((t9) => {
      var i10;
      Object.assign(t9.room, f4.convertRoom(e14, (i10 = this.sdk.getLocalPeer()) == null ? void 0 : i10.peerId)), t9.room.roomState = "Preview";
    }, "previewStart"), this.syncRoomState("previewSync");
  }
  onJoin(e14) {
    let t9 = this.sdk.getPlaylistManager();
    this.audioPlaylist = new ie2(t9, "audio", this.syncPlaylistState.bind(this), this.store), this.videoPlaylist = new ie2(t9, "video", this.syncRoomState.bind(this), this.store), this.syncRoomState("joinSync"), this.setState((i10) => {
      var o12;
      Object.assign(i10.room, f4.convertRoom(e14, (o12 = this.sdk.getLocalPeer()) == null ? void 0 : o12.peerId)), i10.room.isConnected = true, i10.room.roomState = "Connected";
    }, "joined"), t9.onProgress(this.setProgress), t9.onNewTrackStart((i10) => {
      this.syncPlaylistState(`${i10.type}PlaylistUpdate`);
    }), t9.onPlaylistEnded((i10) => {
      this.syncPlaylistState(`${i10}PlaylistEnded`);
    }), t9.onCurrentTrackEnded((i10) => {
      this.hmsNotifications.sendPlaylistTrackEnded(f4.convertPlaylistItem(t9, i10)), this.syncPlaylistState(`${i10.type}PlaylistItemEnded`);
    });
  }
  onRoomUpdate(e14, t9) {
    this.setState((i10) => {
      var o12;
      Object.assign(i10.room, f4.convertRoom(t9, (o12 = this.sdk.getLocalPeer()) == null ? void 0 : o12.peerId));
    }, e14);
  }
  onPeerUpdate(e14, t9) {
    if (![ct.BECAME_DOMINANT_SPEAKER, ct.RESIGNED_DOMINANT_SPEAKER].includes(e14)) {
      if (Array.isArray(t9)) {
        let i10 = this.store.getState(k3), o12 = t9.filter((a4) => !i10[a4.peerId]);
        if (this.syncRoomState("peersJoined"), this.store.getState(B3)) {
          let a4 = [];
          for (let n18 of t9) {
            let l5 = this.store.getState(C2(n18.peerId));
            l5 && a4.push(l5);
          }
          this.hmsNotifications.sendPeerList(a4);
        } else
          o12.forEach((a4) => {
            let n18 = this.store.getState(C2(a4.peerId));
            n18 && this.hmsNotifications.sendPeerUpdate(ct.PEER_JOINED, n18);
          });
        return;
      }
      this.sendPeerUpdateNotification(e14, t9);
    }
  }
  onTrackUpdate(e14, t9, i10) {
    if (e14 === ie.TRACK_REMOVED)
      this.hmsNotifications.sendTrackUpdate(e14, t9.trackId), this.handleTrackRemove(t9, i10);
    else if ([ie.TRACK_ADDED, ie.TRACK_REMOVED].includes(e14)) {
      let o12 = te2[e14];
      this.syncRoomState(o12), this.hmsNotifications.sendTrackUpdate(e14, t9.trackId);
    } else {
      let o12 = te2[e14] || "trackUpdate", r9 = f4.convertTrack(t9);
      this.setState((a4) => {
        let n18 = a4.tracks[r9.id];
        F2(n18, r9) && (Le2(n18, r9), Object.assign(n18, r9));
      }, o12), this.hmsNotifications.sendTrackUpdate(e14, t9.trackId);
    }
  }
  onMessageReceived(e14) {
    let t9 = f4.convertMessage(e14);
    t9.read = false, t9.ignored = this.ignoredMessageTypes.includes(t9.type), this.putMessageInStore(t9), this.hmsNotifications.sendMessageReceived(t9);
  }
  putMessageInStore(e14) {
    e14.ignored || this.setState((t9) => {
      t9.messages.byID[e14.id] = e14, t9.messages.allIDs.push(e14.id);
    }, "newMessage");
  }
  onAudioLevelUpdate(e14) {
    this.setState((t9) => {
      let i10 = {};
      e14.forEach((r9) => {
        if (!r9.track || !r9.peer)
          return;
        let a4 = r9.track.trackId;
        i10[a4] = r9.audioLevel, t9.speakers[a4] || (t9.speakers[a4] = { audioLevel: r9.audioLevel, peerID: r9.peer.peerId, trackID: a4 });
      });
      let o12 = Object.entries(t9.speakers);
      for (let [r9, a4] of o12)
        a4.audioLevel = i10[r9] || 0, a4.audioLevel === 0 && delete t9.speakers[r9];
    }, "audioLevel");
  }
  onConnectionQualityUpdate(e14) {
    this.setState((t9) => {
      let i10 = /* @__PURE__ */ new Set();
      e14.forEach((r9) => {
        let a4 = r9.peerID;
        a4 && (i10.add(a4), t9.connectionQualities[a4] ? Object.assign(t9.connectionQualities[a4], r9) : t9.connectionQualities[a4] = r9);
      });
      let o12 = Object.keys(t9.connectionQualities);
      for (let r9 of o12)
        i10.has(r9) || delete t9.connectionQualities[r9];
    }, "connectionQuality");
  }
  onChangeTrackStateRequest(e14) {
    var r9;
    let t9 = this.store.getState(C2((r9 = e14.requestedBy) == null ? void 0 : r9.peerId)), i10 = this.getStoreLocalTrackIDfromSDKTrack(e14.track), o12 = this.store.getState(ue2(i10));
    if (!o12)
      return this.logPossibleInconsistency(`Not found track for which track state change was requested, ${e14.track}`);
    e14.enabled || this.syncRoomState("changeTrackStateRequest"), this.hmsNotifications.sendChangeTrackStateRequest({ requestedBy: t9 || void 0, track: o12, enabled: e14.enabled });
  }
  onChangeMultiTrackStateRequest(e14) {
    var r9;
    let t9 = this.store.getState(C2((r9 = e14.requestedBy) == null ? void 0 : r9.peerId));
    e14.enabled || this.syncRoomState("changeMultiTrackStateRequest");
    let i10 = [], o12 = this.store.getState(T);
    for (let a4 of e14.tracks) {
      let n18 = this.getStoreLocalTrackIDfromSDKTrack(a4);
      n18 && o12[n18] && i10.push(o12[n18]);
    }
    this.hmsNotifications.sendChangeMultiTrackStateRequest({ requestedBy: t9 || void 0, tracks: i10, enabled: e14.enabled, type: e14.type, source: e14.source });
  }
  onReconnected() {
    this.syncRoomState("reconnectedSync"), this.hmsNotifications.sendReconnected(), this.setState((e14) => {
      e14.room.roomState = e14.room.isConnected ? "Connected" : "Preview";
    }, "reconnected");
  }
  onReconnecting(e14) {
    let t9 = f4.convertException(e14);
    S2.e("Reconnection: received error from sdk", t9), this.hmsNotifications.sendReconnecting(t9), this.setState((i10) => {
      i10.room.roomState = "Reconnecting", i10.errors.push(t9);
    }, "reconnecting");
  }
  onError(e14) {
    let t9 = f4.convertException(e14);
    t9.isTerminal ? (this.leave().then(() => S2.e("error from SDK, left room.")), this.setState((i10) => {
      i10.room.roomState = "Failed", i10.errors.push(t9);
    }, "errorTerminal")) : this.store.getState().errors.length < 50 && this.setState((o12) => {
      o12.errors.push(t9);
    }, "error"), this.syncRoomState("errorSync"), this.hmsNotifications.sendError(t9), S2.e("received error from sdk", t9 instanceof v ? `${t9}` : t9);
  }
  handleTrackRemove(e14, t9) {
    this.setState((i10) => {
      let o12 = i10.peers[t9.peerId], r9 = i10.tracks, a4 = e14.trackId;
      if (this.isSameStoreSDKTrack(a4, o12 == null ? void 0 : o12.audioTrack))
        o12 == null || delete o12.audioTrack;
      else if (this.isSameStoreSDKTrack(a4, o12 == null ? void 0 : o12.videoTrack))
        o12 == null || delete o12.videoTrack;
      else {
        let n18 = o12 == null ? void 0 : o12.auxiliaryTracks.indexOf(a4);
        n18 > -1 && this.isSameStoreSDKTrack(a4, o12 == null ? void 0 : o12.auxiliaryTracks[n18]) && (o12 == null || o12.auxiliaryTracks.splice(n18, 1));
      }
      delete r9[a4], delete this.hmsSDKTracks[a4];
    }, "trackRemoved");
  }
  setEnabledSDKTrack(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.hmsSDKTracks[e14];
      i10 ? yield i10.setEnabled(t9) : this.logPossibleInconsistency(`track ${e14} not present, unable to enabled/disable`);
    });
  }
  setSDKLocalVideoTrackSettings(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.hmsSDKTracks[e14];
      i10 ? yield i10.setSettings(t9) : this.logPossibleInconsistency(`local track ${e14} not present, unable to set settings`);
    });
  }
  setSDKLocalAudioTrackSettings(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.hmsSDKTracks[e14];
      i10 ? yield i10.setSettings(t9) : this.logPossibleInconsistency(`local track ${e14} not present, unable to set settings`);
    });
  }
  getMediaSettings(e14) {
    var r9;
    let t9 = this.store.getState(We2), i10 = e14.audioTrack, o12 = e14.videoTrack;
    return { audioInputDeviceId: (i10 == null ? void 0 : i10.settings.deviceId) || t9.audioInputDeviceId, videoInputDeviceId: (o12 == null ? void 0 : o12.settings.deviceId) || t9.videoInputDeviceId, audioOutputDeviceId: (r9 = this.sdk.getAudioOutput().getDevice()) == null ? void 0 : r9.deviceId };
  }
  getPreviewFields(e14) {
    var i10, o12;
    if (!e14.isInPreview())
      return;
    let t9 = f4.convertPeer(e14);
    return { localPeer: t9.id, audioTrack: t9.audioTrack, videoTrack: t9.videoTrack, asRole: ((i10 = e14.asRole) == null ? void 0 : i10.name) || ((o12 = e14.role) == null ? void 0 : o12.name) };
  }
  setTrackVolume(e14, t9) {
    return c2(this, null, function* () {
      let i10 = this.hmsSDKTracks[t9];
      i10 ? i10 instanceof Te ? (yield i10.setVolume(e14), this.setState((o12) => {
        let r9 = o12.tracks[t9];
        r9 && r9.type === "audio" && (r9.volume = e14);
      }, "trackVolume")) : S2.w(`track ${t9} is not an audio track`) : this.logPossibleInconsistency(`track ${t9} not present, unable to set volume`);
    });
  }
  localAndVideoUnmuting(e14) {
    let t9 = this.store.getState(v6);
    if ((t9 == null ? void 0 : t9.videoTrack) !== e14)
      return false;
    let i10 = this.store.getState(Ye2), o12 = this.store.getState(Ie2);
    return i10 && !o12;
  }
  logPossibleInconsistency(e14) {
    S2.w("possible inconsistency detected - ", e14);
  }
  addRemoveVideoPlugin(e14, t9, i10) {
    return c2(this, null, function* () {
      if (!e14) {
        S2.w("Invalid plugin received in store");
        return;
      }
      let o12 = this.store.getState(I2);
      if (o12) {
        let r9 = this.hmsSDKTracks[o12];
        r9 ? (t9 === "add" ? yield r9.addPlugin(e14, i10) : t9 === "remove" && (yield r9.removePlugin(e14)), this.syncRoomState(`${t9}VideoPlugin`)) : this.logPossibleInconsistency(`track ${o12} not present, unable to remove plugin`);
      }
    });
  }
  addRemoveAudioPlugin(e14, t9) {
    return c2(this, null, function* () {
      if (!e14) {
        S2.w("Invalid plugin received in store");
        return;
      }
      let i10 = this.store.getState(b2);
      if (i10) {
        let o12 = this.hmsSDKTracks[i10];
        o12 ? (t9 === "add" ? yield o12.addPlugin(e14) : t9 === "remove" && (yield o12.removePlugin(e14)), this.syncRoomState(`${t9}AudioPlugin`)) : this.logPossibleInconsistency(`track ${i10} not present, unable to remove plugin`);
      }
    });
  }
  isSameStoreSDKTrack(e14, t9) {
    var i10;
    return t9 ? ((i10 = this.hmsSDKTracks[t9]) == null ? void 0 : i10.trackId) === e14 : false;
  }
  onRoleChangeRequest(e14) {
    this.setState((t9) => {
      t9.roleChangeRequests.length === 0 && t9.roleChangeRequests.push(f4.convertRoleChangeRequest(e14));
    }, "roleChangeRequest");
  }
  removeRoleChangeRequest(e14) {
    this.setState((t9) => {
      let i10 = t9.roleChangeRequests.findIndex((o12) => o12.token === e14.token);
      i10 !== -1 && t9.roleChangeRequests.splice(i10, 1);
    }, "removeRoleChangeRequest");
  }
  onRoleUpdate() {
    this.syncRoomState("roleUpdate");
  }
  getStoreLocalTrackIDfromSDKTrack(e14) {
    return this.store.getState(Je2).find((i10) => this.hmsSDKTracks[i10].trackId === e14.trackId);
  }
  setSessionStoreValueLocally(e14, t9 = "setSessionStore") {
    let i10 = Array.isArray(e14) ? e14 : [e14];
    this.setState((o12) => {
      i10.forEach((r9) => {
        o12.sessionStore[r9.key] = r9.value;
      });
    }, t9);
  }
};
var oe2 = class s3 {
  constructor(e14, t9, i10) {
    this.getStats = () => (this.stats || (this.stats = new re2(this.store, this.sdk)), this.stats);
    e14 ? this.store = e14 : this.store = s3.createNewHMSStore(Te2("HMSStore"), ae2), i10 ? this.notifications = i10 : this.notifications = new me2(this.store), t9 ? this.actions = t9 : (this.sdk = new cr(), this.actions = new Pe2(this.store, this.sdk, this.notifications)), this.actions.setFrameworkInfo({ type: "js", sdkVersion: At2().version }), this.initialTriggerOnSubscribe = false, w && (window.__hms = this);
  }
  triggerOnSubscribe() {
    this.initialTriggerOnSubscribe || (s3.makeStoreTriggerOnSubscribe(this.store), this.initialTriggerOnSubscribe = true);
  }
  getStore() {
    return this.store;
  }
  getHMSActions() {
    return this.actions;
  }
  getActions() {
    return this.actions;
  }
  getNotifications() {
    return { onNotification: this.notifications.onNotification };
  }
  static createNewHMSStore(e14, t9) {
    let i10 = vanilla_default(() => t9()), o12 = i10.setState;
    i10.setState = (n18) => {
      let l5 = typeof n18 == "function" ? fn(n18) : n18;
      o12(l5);
    };
    let r9 = i10.getState;
    i10.getState = (n18) => n18 ? n18(r9()) : r9(), s3.compareWithShallowCheckInSubscribe(i10);
    let a4 = s3.setUpDevtools(i10, e14);
    return K2(h2({}, i10), { namedSetState: a4 });
  }
  static makeStoreTriggerOnSubscribe(e14) {
    let t9 = e14.subscribe;
    e14.subscribe = (i10, o12, r9) => (i10(e14.getState(o12), void 0), t9(i10, o12, r9));
  }
  static compareWithShallowCheckInSubscribe(e14) {
    let t9 = e14.subscribe;
    e14.subscribe = (i10, o12, r9) => (o12 || (o12 = (a4) => a4), r9 = r9 || shallow_default, t9(i10, o12, r9));
  }
  static setUpDevtools(e14, t9) {
    let i10;
    try {
      i10 = window.__REDUX_DEVTOOLS_EXTENSION__ || window.top.__REDUX_DEVTOOLS_EXTENSION__;
    } catch (a4) {
    }
    if (!i10)
      return (a4) => {
        e14.setState(a4);
      };
    let o12 = i10.connect(s3.devtoolsOptions(t9));
    o12.prefix = t9 ? `${t9} > ` : "";
    let r9 = e14.setState;
    return e14.setState = (a4) => {
      r9(a4), o12.send(`${o12.prefix}setState`, e14.getState());
    }, o12.subscribe(s3.devtoolsSubscribe(o12, e14, r9)), o12.send("setUpStore", e14.getState()), (a4, n18) => {
      r9(a4);
      let l5 = n18 || `${o12.prefix}action`;
      o12.send(l5, e14.getState());
    };
  }
  static devtoolsOptions(e14) {
    return { name: e14, actionsBlacklist: ["audioLevel", "playlistProgress", "connectionQuality"] };
  }
  static devtoolsSubscribe(e14, t9, i10) {
    return (o12) => {
      var r9, a4, n18, l5;
      if (o12.type === "DISPATCH" && o12.state)
        ["JUMP_TO_ACTION", "JUMP_TO_STATE"].includes(o12.payload.type) ? i10(JSON.parse(o12.state)) : t9.setState(JSON.parse(o12.state));
      else if (o12.type === "DISPATCH" && ((r9 = o12.payload) == null ? void 0 : r9.type) === "COMMIT")
        e14.init(t9.getState());
      else if (o12.type === "DISPATCH" && ((a4 = o12.payload) == null ? void 0 : a4.type) === "IMPORT_STATE") {
        let m4 = (n18 = o12.payload.nextLiftedState) == null ? void 0 : n18.actionsById;
        (((l5 = o12.payload.nextLiftedState) == null ? void 0 : l5.computedStates) || []).forEach(({ state: x3 }, H3) => {
          let q3 = m4[H3] || `${e14.prefix}setState`;
          H3 === 0 ? e14.init(x3) : (i10(x3), e14.send(q3, t9.getState()));
        });
      }
    };
  }
};
var re2 = class {
  constructor(e14, t9) {
    this.hmsStore = e14;
    this.sdk = t9;
    this.store = oe2.createNewHMSStore(Te2("HMSStatsStore"), ne2), this.getState = this.store.getState, this.subscribe = this.store.subscribe, this.getPublishPeerConnection = () => new Promise((i10) => {
      var o12, r9;
      this.hmsStore.getState(E3) === "Connected" ? i10((r9 = (o12 = this.sdk) == null ? void 0 : o12.getWebrtcInternals()) == null ? void 0 : r9.getPublishPeerConnection()) : this.hmsStore.subscribe((a4) => {
        var n18, l5;
        a4 === "Connected" && i10((l5 = (n18 = this.sdk) == null ? void 0 : n18.getWebrtcInternals()) == null ? void 0 : l5.getPublishPeerConnection());
      }, E3);
    }), this.getSubscribePeerConnection = () => new Promise((i10) => {
      var o12, r9;
      this.hmsStore.getState(E3) === "Connected" ? i10((r9 = (o12 = this.sdk) == null ? void 0 : o12.getWebrtcInternals()) == null ? void 0 : r9.getSubscribePeerConnection()) : this.hmsStore.subscribe((a4) => {
        var n18, l5;
        a4 === "Connected" && i10((l5 = (n18 = this.sdk) == null ? void 0 : n18.getWebrtcInternals()) == null ? void 0 : l5.getSubscribePeerConnection());
      }, E3);
    }), this.sdk && vt2(this.sdk, this.store, this.hmsStore);
  }
};
var Ns = (s11) => s11.localPeer.id;
var Ls = (s11) => s11.localPeer.audioTrack;
var xs = (s11) => s11.localPeer.videoTrack;
var Os = (s11, e14) => e14;
var Ct2 = (s11, e14) => e14;
var _s = (s11) => s11.remoteTrackStats;
var Nt2 = (s11) => s11.peerStats;
var we2 = (s11) => s11.localTrackStats;
var V2 = createSelector([Nt2, Ns], (s11, e14) => s11[e14]);
var ws = createSelector(V2, (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.subscribe) == null ? void 0 : e14.packetsLost;
});
var Us = createSelector(V2, (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.subscribe) == null ? void 0 : e14.jitter;
});
var Vs = createSelector(V2, (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.publish) == null ? void 0 : e14.bitrate;
});
var Ks = createSelector(V2, (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.subscribe) == null ? void 0 : e14.bitrate;
});
var Bs = createSelector(V2, (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.publish) == null ? void 0 : e14.availableOutgoingBitrate;
});
var qs = createSelector(V2, (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.subscribe) == null ? void 0 : e14.availableIncomingBitrate;
});
var js = createSelector(V2, (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.publish) == null ? void 0 : e14.bytesSent;
});
var Gs = createSelector(V2, (s11) => {
  var e14;
  return (e14 = s11 == null ? void 0 : s11.subscribe) == null ? void 0 : e14.bytesReceived;
});
var Fs = createSelector([Nt2, Os], (s11, e14) => e14 ? s11[e14] : void 0);
var Qs = createSelector([_s, Ct2], (s11, e14) => e14 ? s11[e14] : void 0);
var Ue2 = createSelector([we2, Ct2], (s11, e14) => e14 ? s11[e14] : void 0);
var $s = u2(Fs);
var Ws = u2(Qs);
var Js = createSelector([we2, Ls], (s11, e14) => {
  var t9;
  return e14 ? (t9 = s11[e14]) == null ? void 0 : t9[0] : void 0;
});
var Ys = u2(createSelector(Ue2, (s11) => s11 == null ? void 0 : s11[0]));
var zs = createSelector([we2, xs], (s11, e14) => {
  var t9;
  return e14 ? (t9 = s11[e14]) == null ? void 0 : t9[0] : void 0;
});
var Xs = u2(createSelector(Ue2, (s11) => s11));
var Zs = (s11) => u2(createSelector(Ue2, (e14) => {
  let t9 = Object.keys(Yt).find((i10) => Yt[i10] === s11);
  return s11 && (e14 == null ? void 0 : e14.find((i10) => i10.rid === t9)) || (e14 == null ? void 0 : e14[0]);
}));
var ei2 = { localPeerStats: V2, packetsLost: ws, jitter: Us, publishBitrate: Vs, subscribeBitrate: Ks, availablePublishBitrate: Bs, availableSubscribeBitrate: qs, totalBytesSent: js, totalBytesReceived: Gs, peerStatsByID: $s, trackStatsByID: Ws, localAudioTrackStatsByID: Ys, localVideoTrackStatsByID: Xs, localVideoTrackStatsByLayer: Zs, localAudioTrackStats: Js, localVideoTrackStats: zs };

// node_modules/@100mslive/react-sdk/dist/primitives/store.js
init_define_process_env();
var import_react2 = __toESM(require_react());

// node_modules/@100mslive/react-sdk/dist/packages/react-sdk/node_modules/zustand/esm/shallow.js
init_define_process_env();
function t2(t9, e14) {
  if (Object.is(t9, e14))
    return true;
  if ("object" != typeof t9 || null === t9 || "object" != typeof e14 || null === e14)
    return false;
  const r9 = Object.keys(t9);
  if (r9.length !== Object.keys(e14).length)
    return false;
  for (let n18 = 0; n18 < r9.length; n18++)
    if (!Object.prototype.hasOwnProperty.call(e14, r9[n18]) || !Object.is(t9[r9[n18]], e14[r9[n18]]))
      return false;
  return true;
}

// node_modules/@100mslive/react-sdk/dist/utils/logger.js
init_define_process_env();
var s4;
var e;
(e = s4 || (s4 = {}))[e.VERBOSE = 0] = "VERBOSE", e[e.DEBUG = 1] = "DEBUG", e[e.INFO = 2] = "INFO", e[e.WARN = 3] = "WARN", e[e.ERROR = 4] = "ERROR", e[e.NONE = 5] = "NONE";
var o3 = class {
  static v(e14, ...o12) {
    this.log(s4.VERBOSE, e14, ...o12);
  }
  static d(e14, ...o12) {
    this.log(s4.DEBUG, e14, ...o12);
  }
  static i(e14, ...o12) {
    this.log(s4.INFO, e14, ...o12);
  }
  static w(e14, ...o12) {
    this.log(s4.WARN, e14, ...o12);
  }
  static e(e14, ...o12) {
    this.log(s4.ERROR, e14, ...o12);
  }
  static log(e14, o12, ...t9) {
    if (!(this.level.valueOf() > e14.valueOf()))
      switch (e14) {
        case s4.VERBOSE:
          console.log("HMSui-components: ", o12, ...t9);
          break;
        case s4.DEBUG:
          console.debug("HMSui-components: ", o12, ...t9);
          break;
        case s4.INFO:
          console.info("HMSui-components: ", o12, ...t9);
          break;
        case s4.WARN:
          console.warn("HMSui-components: ", o12, ...t9);
          break;
        case s4.ERROR:
          console.error("HMSui-components: ", o12, ...t9);
      }
  }
};
o3.level = s4.VERBOSE;

// node_modules/@100mslive/react-sdk/dist/primitives/store.js
var r2 = "It seems like you forgot to add your component within a top level HMSRoomProvider, please refer to 100ms react docs(https://docs.100ms.live/javascript/v2/features/integration#react-hooks) to check on the required steps for using this hook.";
function s5(s11) {
  return (n18, a4 = t2) => {
    n18 || o3.w("fetching full store without passing any selector may have a heavy performance impact on your website.");
    const i10 = (0, import_react2.useContext)(s11);
    if (!i10)
      throw new Error(r2);
    return (0, i10.store)(n18, a4);
  };
}
function n9(s11) {
  return (n18, a4 = t2) => {
    n18 || o3.w("fetching full store without passing any selector may have a heavy performance impact on your website.");
    const i10 = (0, import_react2.useContext)(s11);
    if (!i10)
      throw new Error(r2);
    const c5 = i10.statsStore;
    return null == c5 ? void 0 : c5(n18, a4);
  };
}

// node_modules/@100mslive/react-sdk/dist/utils/isBrowser.js
init_define_process_env();
var e3 = "undefined" != typeof window;

// node_modules/@100mslive/react-sdk/dist/primitives/HmsRoomProvider.js
var d3 = (0, import_react3.createContext)(null);
var l2 = ({ children: e14, actions: s11, store: n18, notifications: c5, stats: f5, isHMSStatsOn: u5 = false, leaveOnUnload: l5 = true }) => {
  const m4 = (0, import_react3.useMemo)(() => {
    let e15;
    const o12 = () => {
      throw new Error("modifying store is not allowed");
    };
    if (s11 && n18)
      e15 = { actions: s11, store: create(Object.assign(Object.assign({}, n18), { setState: o12, destroy: o12 })) }, c5 && (e15.notifications = c5), f5 && (e15.statsStore = create({ getState: f5.getState, subscribe: f5.subscribe, setState: o12, destroy: o12 }));
    else {
      const t9 = new oe2();
      if (e15 = { actions: t9.getActions(), store: create(Object.assign(Object.assign({}, t9.getStore()), { setState: o12, destroy: o12 })), notifications: t9.getNotifications() }, u5) {
        const r9 = t9.getStats();
        e15.statsStore = create({ getState: r9.getState, subscribe: r9.subscribe, setState: o12, destroy: o12 });
      }
    }
    return e15.actions.setFrameworkInfo({ type: "react-web", version: import_react3.default.version, sdkVersion: "0.8.10" }), e15;
  }, [s11, n18, c5, f5, u5]);
  return (0, import_react3.useEffect)(() => {
    if (e3 && l5) {
      const t9 = () => m4.actions.leave();
      return window.addEventListener("beforeunload", t9), () => {
        window.removeEventListener("beforeunload", t9);
      };
    }
    return () => {
    };
  }, [l5, m4]), import_react3.default.createElement(d3.Provider, { value: m4 }, e14);
};
var m = s5(d3);
var b3 = n9(d3);
var S3 = () => {
  const t9 = (0, import_react3.useContext)(d3);
  if (!t9)
    throw new Error(r2);
  return t9.store;
};
var g3 = () => {
  const t9 = (0, import_react3.useContext)(d3);
  if (!t9)
    throw new Error(r2);
  return t9.notifications;
};
var v7 = () => {
  const t9 = (0, import_react3.useContext)(d3);
  if (!t9)
    throw new Error(r2);
  return t9.actions;
};
var E4 = (t9) => {
  const e14 = (0, import_react3.useContext)(d3), [o12, i10] = (0, import_react3.useState)(null);
  if (!e14)
    throw new Error(r2);
  return (0, import_react3.useEffect)(() => {
    if (!e14.notifications)
      return;
    return e14.notifications.onNotification((t10) => {
      i10(t10);
    }, t9);
  }, [e14.notifications, t9]), o12;
};

// node_modules/@100mslive/react-sdk/dist/hooks/usePreviewJoin.js
init_define_process_env();

// node_modules/@100mslive/react-sdk/dist/node_modules/tslib/tslib.es6.mjs.js
init_define_process_env();
function n11(n18, t9, e14, c5) {
  return new (e14 || (e14 = Promise))(function(o12, u5) {
    function i10(n19) {
      try {
        a4(c5.next(n19));
      } catch (n20) {
        u5(n20);
      }
    }
    function r9(n19) {
      try {
        a4(c5.throw(n19));
      } catch (n20) {
        u5(n20);
      }
    }
    function a4(n19) {
      var t10;
      n19.done ? o12(n19.value) : (t10 = n19.value, t10 instanceof e14 ? t10 : new e14(function(n20) {
        n20(t10);
      })).then(i10, r9);
    }
    a4((c5 = c5.apply(n18, t9 || [])).next());
  });
}

// node_modules/@100mslive/react-sdk/dist/hooks/usePreviewJoin.js
var import_react5 = __toESM(require_react());

// node_modules/@100mslive/react-sdk/dist/utils/commons.js
init_define_process_env();
var import_react4 = __toESM(require_react());
var n12 = (e14, r9) => o3.e("react-sdk", r9, e14);
var i2 = (e14) => {
  throw e14;
};
function s7(o12) {
  const t9 = (0, import_react4.useRef)();
  return (0, import_react4.useEffect)(() => {
    t9.current = o12;
  }), t9.current;
}
var m2 = ["chrome", "brave", "opera", "edge"].some((e14) => {
  var r9, t9;
  return (null === (t9 = null === (r9 = oe.getBrowser()) || void 0 === r9 ? void 0 : r9.name) || void 0 === t9 ? void 0 : t9.toLowerCase()) === e14;
});
var a2 = "https://pdf-annotation.100ms.live/generic/web/viewer.html";

// node_modules/@100mslive/react-sdk/dist/hooks/usePreviewJoin.js
var d4 = ({ name: d6 = "", token: c5, metadata: v10, handleError: l5 = n12, initEndpoint: u5, initialSettings: p4, captureNetworkQualityInPreview: f5, asRole: k4, autoManageVideo: w4, autoManageWakeLock: j4 }) => {
  const y2 = v7(), g4 = m(E3), h4 = m(B3) || false, b4 = g4 === Re2.Preview, M3 = (0, import_react5.useMemo)(() => ({ userName: d6, authToken: c5, metaData: v10, rememberDeviceSelection: true, settings: p4, initEndpoint: u5, asRole: k4, captureNetworkQualityInPreview: f5, autoManageVideo: w4, autoManageWakeLock: j4 }), [d6, c5, v10, u5, p4, f5, k4, w4, j4]), P4 = (0, import_react5.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    if (c5 && g4 === Re2.Disconnected) {
      h4 && (yield y2.leave());
      try {
        yield y2.preview(M3);
      } catch (e14) {
        l5(e14, "preview");
      }
    }
  }), [y2, l5, c5, g4, M3, h4]);
  return { enableJoin: b4, join: (0, import_react5.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    if (c5)
      try {
        yield y2.join(M3);
      } catch (e14) {
        l5(e14, "join");
      }
  }), [y2, M3, l5, c5]), isConnected: h4, preview: P4 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useAVToggle.js
init_define_process_env();
var import_react6 = __toESM(require_react());
var v8 = (v10 = n12) => {
  const c5 = m(yi2), a4 = m(Ie2), u5 = m(Ei2), g4 = m(u5 ? xr : Lr2), f5 = v7(), p4 = (0, import_react6.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    try {
      yield f5.setLocalAudioEnabled(!c5);
    } catch (o12) {
      v10(o12, "toggleAudio");
    }
  }), [f5, c5, v10]), b4 = (0, import_react6.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    try {
      yield f5.setLocalVideoEnabled(!a4);
    } catch (o12) {
      v10(o12, "toggleVideo");
    }
  }), [f5, a4, v10]);
  return { isLocalAudioEnabled: c5, isLocalVideoEnabled: a4, toggleAudio: (null == g4 ? void 0 : g4.audio) ? p4 : void 0, toggleVideo: (null == g4 ? void 0 : g4.video) ? b4 : void 0 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useVideo.js
init_define_process_env();
var import_react7 = __toESM(require_react());
var u3 = ({ trackId: u5, attach: l5 }) => {
  const v10 = v7(), s11 = (0, import_react7.useRef)(null), a4 = m(ut2(u5)), m4 = (0, import_react7.useRef)(), f5 = (0, import_react7.useCallback)((r9) => {
    r9 && (s11.current = r9);
  }, []);
  return (0, import_react7.useEffect)(() => {
    m4.current ? (null == a4 ? void 0 : a4.id) && m4.current !== (null == a4 ? void 0 : a4.id) && n11(void 0, void 0, void 0, function* () {
      if (s11.current)
        try {
          o3.d("detaching because different track is passed"), yield v10.detachVideo(m4.current, s11.current);
        } catch (r9) {
          o3.w("detach video error for track", m4.current, r9);
        }
      m4.current = null == a4 ? void 0 : a4.id;
    }) : m4.current = null == a4 ? void 0 : a4.id;
  }, [null == a4 ? void 0 : a4.id, v10]), (0, import_react7.useEffect)(() => {
    n11(void 0, void 0, void 0, function* () {
      (null == a4 ? void 0 : a4.id) && s11.current && (false !== l5 ? yield v10.attachVideo(a4.id, s11.current) : yield v10.detachVideo(a4.id, s11.current));
    });
  }, [a4, l5, v10]), (0, import_react7.useEffect)(() => () => {
    n11(void 0, void 0, void 0, function* () {
      if (s11.current && a4)
        try {
          yield v10.detachVideo(a4.id, s11.current);
        } catch (r9) {
          o3.w("detach video error for track", a4.id, r9);
        }
    });
  }, []), { videoRef: f5 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useScreenShare.js
init_define_process_env();
var import_react8 = __toESM(require_react());
var s8 = (s11 = n12) => {
  var t9, a4;
  const v10 = v7(), c5 = m(Ee2), u5 = m(Ft2), S4 = m(Mt2(null == u5 ? void 0 : u5.id)), h4 = (0, import_react8.useCallback)((o12) => n11(void 0, void 0, void 0, function* () {
    try {
      yield v10.setScreenShareEnabled(!c5, o12);
    } catch (e14) {
      s11(e14, "toggleScreenShare");
    }
  }), [v10, c5, s11]);
  return { amIScreenSharing: c5, screenSharingPeerId: null == u5 ? void 0 : u5.id, screenSharingPeerName: null == u5 ? void 0 : u5.name, screenShareVideoTrackId: null === (t9 = null == S4 ? void 0 : S4.video) || void 0 === t9 ? void 0 : t9.id, screenShareAudioTrackId: null === (a4 = null == S4 ? void 0 : S4.audio) || void 0 === a4 ? void 0 : a4.id, toggleScreenShare: h4 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useRemoteAVToggle.js
init_define_process_env();
var import_react9 = __toESM(require_react());
var v9 = (i10, e14, d6) => n11(void 0, void 0, void 0, function* () {
  if (e14)
    try {
      yield i10.setRemoteTrackEnabled(e14.id, !e14.enabled);
    } catch (o12) {
      d6(o12, "remoteToggle");
    }
});
var r5 = (r9, s11, a4 = n12) => {
  const c5 = v7(), b4 = m(Xo(r9)), f5 = m(ut2(s11)), g4 = m(ft2(null == b4 ? void 0 : b4.id)), p4 = m(Xe2), j4 = (null == f5 ? void 0 : f5.enabled) ? null == p4 ? void 0 : p4.mute : null == p4 ? void 0 : p4.unmute, y2 = (null == b4 ? void 0 : b4.enabled) ? null == p4 ? void 0 : p4.mute : null == p4 ? void 0 : p4.unmute, V3 = (0, import_react9.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    yield v9(c5, b4, a4);
  }), [c5, b4, a4]), E5 = (0, import_react9.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    yield v9(c5, f5, a4);
  }), [c5, a4, f5]), h4 = (0, import_react9.useCallback)((o12) => {
    b4 && c5.setVolume(o12, b4.id);
  }, [c5, b4]);
  return { isAudioEnabled: !!(null == b4 ? void 0 : b4.enabled), isVideoEnabled: !!(null == f5 ? void 0 : f5.enabled), volume: g4, toggleAudio: b4 && y2 ? V3 : void 0, toggleVideo: "regular" === (null == f5 ? void 0 : f5.source) && j4 ? E5 : void 0, setVolume: b4 ? h4 : void 0 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useVideoList.js
init_define_process_env();
var import_react11 = __toESM(require_react());

// node_modules/react-resize-detector/build/index.esm.js
init_define_process_env();
var React = __toESM(require_react());
var import_react10 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var extendStatics = function(d6, b4) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d7, b5) {
    d7.__proto__ = b5;
  } || function(d7, b5) {
    for (var p4 in b5)
      if (Object.prototype.hasOwnProperty.call(b5, p4))
        d7[p4] = b5[p4];
  };
  return extendStatics(d6, b4);
};
function __extends(d6, b4) {
  if (typeof b4 !== "function" && b4 !== null)
    throw new TypeError("Class extends value " + String(b4) + " is not a constructor or null");
  extendStatics(d6, b4);
  function __() {
    this.constructor = d6;
  }
  d6.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t9) {
    for (var s11, i10 = 1, n18 = arguments.length; i10 < n18; i10++) {
      s11 = arguments[i10];
      for (var p4 in s11)
        if (Object.prototype.hasOwnProperty.call(s11, p4))
          t9[p4] = s11[p4];
    }
    return t9;
  };
  return __assign.apply(this, arguments);
};
function __rest(s11, e14) {
  var t9 = {};
  for (var p4 in s11)
    if (Object.prototype.hasOwnProperty.call(s11, p4) && e14.indexOf(p4) < 0)
      t9[p4] = s11[p4];
  if (s11 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i10 = 0, p4 = Object.getOwnPropertySymbols(s11); i10 < p4.length; i10++) {
      if (e14.indexOf(p4[i10]) < 0 && Object.prototype.propertyIsEnumerable.call(s11, p4[i10]))
        t9[p4[i10]] = s11[p4[i10]];
    }
  return t9;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function isObject$3(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_1 = isObject$3;
var freeGlobal$1 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var _freeGlobal = freeGlobal$1;
var freeGlobal = _freeGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root$2 = freeGlobal || freeSelf || Function("return this")();
var _root = root$2;
var root$1 = _root;
var now$1 = function() {
  return root$1.Date.now();
};
var now_1 = now$1;
var reWhitespace = /\s/;
function trimmedEndIndex$1(string) {
  var index = string.length;
  while (index-- && reWhitespace.test(string.charAt(index))) {
  }
  return index;
}
var _trimmedEndIndex = trimmedEndIndex$1;
var trimmedEndIndex = _trimmedEndIndex;
var reTrimStart = /^\s+/;
function baseTrim$1(string) {
  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
var _baseTrim = baseTrim$1;
var root = _root;
var Symbol$2 = root.Symbol;
var _Symbol = Symbol$2;
var Symbol$1 = _Symbol;
var objectProto$1 = Object.prototype;
var hasOwnProperty = objectProto$1.hasOwnProperty;
var nativeObjectToString$1 = objectProto$1.toString;
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
function getRawTag$1(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag = value[symToStringTag$1];
  try {
    value[symToStringTag$1] = void 0;
    var unmasked = true;
  } catch (e14) {
  }
  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}
var _getRawTag = getRawTag$1;
var objectProto = Object.prototype;
var nativeObjectToString = objectProto.toString;
function objectToString$1(value) {
  return nativeObjectToString.call(value);
}
var _objectToString = objectToString$1;
var Symbol2 = _Symbol;
var getRawTag = _getRawTag;
var objectToString = _objectToString;
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
function baseGetTag$1(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
var _baseGetTag = baseGetTag$1;
function isObjectLike$1(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_1 = isObjectLike$1;
var baseGetTag = _baseGetTag;
var isObjectLike = isObjectLike_1;
var symbolTag = "[object Symbol]";
function isSymbol$1(value) {
  return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
var isSymbol_1 = isSymbol$1;
var baseTrim = _baseTrim;
var isObject$2 = isObject_1;
var isSymbol = isSymbol_1;
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber$1(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject$2(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject$2(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_1 = toNumber$1;
var isObject$1 = isObject_1;
var now = now_1;
var toNumber = toNumber_1;
var FUNC_ERROR_TEXT$1 = "Expected a function";
var nativeMax = Math.max;
var nativeMin = Math.min;
function debounce$1(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  wait = toNumber(wait) || 0;
  if (isObject$1(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now());
  }
  function debounced() {
    var time = now(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_1 = debounce$1;
var debounce = debounce_1;
var isObject2 = isObject_1;
var FUNC_ERROR_TEXT = "Expected a function";
function throttle(func, wait, options) {
  var leading = true, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject2(options)) {
    leading = "leading" in options ? !!options.leading : leading;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    "leading": leading,
    "maxWait": wait,
    "trailing": trailing
  });
}
var throttle_1 = throttle;
var patchResizeHandler = function(resizeCallback, refreshMode, refreshRate, refreshOptions) {
  switch (refreshMode) {
    case "debounce":
      return debounce_1(resizeCallback, refreshRate, refreshOptions);
    case "throttle":
      return throttle_1(resizeCallback, refreshRate, refreshOptions);
    default:
      return resizeCallback;
  }
};
var isFunction = function(fn2) {
  return typeof fn2 === "function";
};
var isSSR2 = function() {
  return typeof window === "undefined";
};
var isDOMElement = function(element) {
  return element instanceof Element || element instanceof HTMLDocument;
};
var createNotifier = function(onResize, setSize, handleWidth, handleHeight) {
  return function(_a) {
    var width = _a.width, height = _a.height;
    setSize(function(prev) {
      if (prev.width === width && prev.height === height) {
        return prev;
      }
      if (prev.width === width && !handleHeight || prev.height === height && !handleWidth) {
        return prev;
      }
      if (onResize && isFunction(onResize)) {
        onResize(width, height);
      }
      return { width, height };
    });
  };
};
var ResizeDetector = function(_super) {
  __extends(ResizeDetector2, _super);
  function ResizeDetector2(props) {
    var _this = _super.call(this, props) || this;
    _this.cancelHandler = function() {
      if (_this.resizeHandler && _this.resizeHandler.cancel) {
        _this.resizeHandler.cancel();
        _this.resizeHandler = null;
      }
    };
    _this.attachObserver = function() {
      var _a2 = _this.props, targetRef = _a2.targetRef, observerOptions = _a2.observerOptions;
      if (isSSR2()) {
        return;
      }
      if (targetRef && targetRef.current) {
        _this.targetRef.current = targetRef.current;
      }
      var element = _this.getElement();
      if (!element) {
        return;
      }
      if (_this.observableElement && _this.observableElement === element) {
        return;
      }
      _this.observableElement = element;
      _this.resizeObserver.observe(element, observerOptions);
    };
    _this.getElement = function() {
      var _a2 = _this.props, querySelector = _a2.querySelector, targetDomEl = _a2.targetDomEl;
      if (isSSR2())
        return null;
      if (querySelector)
        return document.querySelector(querySelector);
      if (targetDomEl && isDOMElement(targetDomEl))
        return targetDomEl;
      if (_this.targetRef && isDOMElement(_this.targetRef.current))
        return _this.targetRef.current;
      var currentElement = (0, import_react_dom.findDOMNode)(_this);
      if (!currentElement)
        return null;
      var renderType = _this.getRenderType();
      switch (renderType) {
        case "renderProp":
          return currentElement;
        case "childFunction":
          return currentElement;
        case "child":
          return currentElement;
        case "childArray":
          return currentElement;
        default:
          return currentElement.parentElement;
      }
    };
    _this.createResizeHandler = function(entries) {
      var _a2 = _this.props, _b = _a2.handleWidth, handleWidth = _b === void 0 ? true : _b, _c = _a2.handleHeight, handleHeight = _c === void 0 ? true : _c, onResize = _a2.onResize;
      if (!handleWidth && !handleHeight)
        return;
      var notifyResize = createNotifier(onResize, _this.setState.bind(_this), handleWidth, handleHeight);
      entries.forEach(function(entry) {
        var _a3 = entry && entry.contentRect || {}, width = _a3.width, height = _a3.height;
        var shouldSetSize = !_this.skipOnMount && !isSSR2();
        if (shouldSetSize) {
          notifyResize({ width, height });
        }
        _this.skipOnMount = false;
      });
    };
    _this.getRenderType = function() {
      var _a2 = _this.props, render = _a2.render, children = _a2.children;
      if (isFunction(render)) {
        return "renderProp";
      }
      if (isFunction(children)) {
        return "childFunction";
      }
      if ((0, import_react10.isValidElement)(children)) {
        return "child";
      }
      if (Array.isArray(children)) {
        return "childArray";
      }
      return "parent";
    };
    var skipOnMount = props.skipOnMount, refreshMode = props.refreshMode, _a = props.refreshRate, refreshRate = _a === void 0 ? 1e3 : _a, refreshOptions = props.refreshOptions;
    _this.state = {
      width: void 0,
      height: void 0
    };
    _this.skipOnMount = skipOnMount;
    _this.targetRef = (0, import_react10.createRef)();
    _this.observableElement = null;
    if (isSSR2()) {
      return _this;
    }
    _this.resizeHandler = patchResizeHandler(_this.createResizeHandler, refreshMode, refreshRate, refreshOptions);
    _this.resizeObserver = new window.ResizeObserver(_this.resizeHandler);
    return _this;
  }
  ResizeDetector2.prototype.componentDidMount = function() {
    this.attachObserver();
  };
  ResizeDetector2.prototype.componentDidUpdate = function() {
    this.attachObserver();
  };
  ResizeDetector2.prototype.componentWillUnmount = function() {
    if (isSSR2()) {
      return;
    }
    this.observableElement = null;
    this.resizeObserver.disconnect();
    this.cancelHandler();
  };
  ResizeDetector2.prototype.render = function() {
    var _a = this.props, render = _a.render, children = _a.children, _b = _a.nodeType, WrapperTag = _b === void 0 ? "div" : _b;
    var _c = this.state, width = _c.width, height = _c.height;
    var childProps = { width, height, targetRef: this.targetRef };
    var renderType = this.getRenderType();
    var typedChildren;
    switch (renderType) {
      case "renderProp":
        return render && render(childProps);
      case "childFunction":
        typedChildren = children;
        return typedChildren(childProps);
      case "child":
        typedChildren = children;
        if (typedChildren.type && typeof typedChildren.type === "string") {
          childProps.targetRef;
          var nativeProps = __rest(childProps, ["targetRef"]);
          return (0, import_react10.cloneElement)(typedChildren, nativeProps);
        }
        return (0, import_react10.cloneElement)(typedChildren, childProps);
      case "childArray":
        typedChildren = children;
        return typedChildren.map(function(el) {
          return !!el && (0, import_react10.cloneElement)(el, childProps);
        });
      default:
        return React.createElement(WrapperTag, null);
    }
  };
  return ResizeDetector2;
}(import_react10.PureComponent);
var useEnhancedEffect = isSSR2() ? import_react10.useEffect : import_react10.useLayoutEffect;
function useResizeDetector(props) {
  if (props === void 0) {
    props = {};
  }
  var _a = props.skipOnMount, skipOnMount = _a === void 0 ? false : _a, refreshMode = props.refreshMode, _b = props.refreshRate, refreshRate = _b === void 0 ? 1e3 : _b, refreshOptions = props.refreshOptions, _c = props.handleWidth, handleWidth = _c === void 0 ? true : _c, _d = props.handleHeight, handleHeight = _d === void 0 ? true : _d, targetRef = props.targetRef, observerOptions = props.observerOptions, onResize = props.onResize;
  var skipResize = (0, import_react10.useRef)(skipOnMount);
  var localRef = (0, import_react10.useRef)(null);
  var ref = targetRef !== null && targetRef !== void 0 ? targetRef : localRef;
  var resizeHandler = (0, import_react10.useRef)();
  var _e2 = (0, import_react10.useState)({
    width: void 0,
    height: void 0
  }), size = _e2[0], setSize = _e2[1];
  useEnhancedEffect(function() {
    if (isSSR2()) {
      return;
    }
    var notifyResize = createNotifier(onResize, setSize, handleWidth, handleHeight);
    var resizeCallback = function(entries) {
      if (!handleWidth && !handleHeight)
        return;
      entries.forEach(function(entry) {
        var _a2 = entry && entry.contentRect || {}, width = _a2.width, height = _a2.height;
        var shouldSetSize = !skipResize.current && !isSSR2();
        if (shouldSetSize) {
          notifyResize({ width, height });
        }
        skipResize.current = false;
      });
    };
    resizeHandler.current = patchResizeHandler(resizeCallback, refreshMode, refreshRate, refreshOptions);
    var resizeObserver = new window.ResizeObserver(resizeHandler.current);
    if (ref.current) {
      resizeObserver.observe(ref.current, observerOptions);
    }
    return function() {
      resizeObserver.disconnect();
      var patchedResizeHandler = resizeHandler.current;
      if (patchedResizeHandler && patchedResizeHandler.cancel) {
        patchedResizeHandler.cancel();
      }
    };
  }, [refreshMode, refreshRate, refreshOptions, handleWidth, handleHeight, onResize, observerOptions, ref.current]);
  return __assign({ ref }, size);
}

// node_modules/@100mslive/react-sdk/dist/utils/layout.js
init_define_process_env();
var t5 = (t9, e14, i10) => t9.reduce((t10, a4, r9) => {
  const h4 = Math.floor(r9 / e14);
  return h4 > 0 && i10 || (t10[h4] || (t10[h4] = []), t10[h4].push(a4)), t10;
}, []);
var e7 = ({ elements: e14, tilesInFirstPage: i10, onlyOnePage: a4, isLastPageDifferentFromFirstPage: r9, defaultWidth: h4, defaultHeight: n18, lastPageWidth: s11, lastPageHeight: o12 }) => {
  const l5 = t5(e14, i10, a4);
  return l5.map((t9, e15) => t9.map((t10) => {
    const i11 = e15 === l5.length - 1, a5 = r9 && i11 ? s11 : h4, g4 = r9 && i11 ? o12 : n18;
    return Object.assign(Object.assign({}, t10), { height: g4, width: a5 });
  }));
};
function i7(t9) {
  if (0 === t9.length)
    return null;
  const e14 = {};
  let i10 = t9[0], a4 = 1;
  for (let r9 = 0; r9 < t9.length; r9++) {
    const h4 = t9[r9];
    null === e14[h4] ? e14[h4] = 1 : e14[h4]++, e14[h4] > a4 && (i10 = h4, a4 = e14[h4]);
  }
  return i10;
}
var a3 = (t9) => i7(t9.filter((t10) => {
  var e14, i10;
  return (null === (e14 = t10.track) || void 0 === e14 ? void 0 : e14.width) && (null === (i10 = t10.track) || void 0 === i10 ? void 0 : i10.height);
}).map((t10) => {
  var e14, i10;
  return ((null === (e14 = t10.track) || void 0 === e14 ? void 0 : e14.width) || 1) / ((null === (i10 = t10.track) || void 0 === i10 ? void 0 : i10.height) || 1);
}));
var r6 = (t9, e14, i10, a4, r9) => {
  if (t9 < 0 || e14 < 0)
    throw new Error("Container must have a non-negative area");
  if (i10 < 1 || !Number.isInteger(i10))
    throw new Error("Number of shapes to place must be a positive integer");
  const h4 = a4 && r9 && a4 / r9;
  if (void 0 !== h4 && isNaN(h4))
    throw new Error("Aspect ratio must be a number");
  let n18 = { area: 0, cols: 0, rows: 0, width: 0, height: 0 };
  if (void 0 !== h4)
    for (let a5 = i10; a5 > 0; a5 += -1) {
      const r10 = Math.ceil(i10 / a5);
      let s11, o12;
      t9 / (a5 * h4) <= e14 / r10 ? (s11 = t9 / a5, o12 = s11 / h4) : (o12 = e14 / r10, s11 = o12 * h4);
      const l5 = s11 * o12;
      l5 > n18.area && (n18 = { area: l5, width: s11, height: o12, rows: r10, cols: a5 });
    }
  return n18;
};
var h3 = ({ parentWidth: t9, parentHeight: e14, count: i10, maxCount: a4, aspectRatio: r9 }) => {
  let h4 = 0, n18 = 0, s11 = 0, o12 = 0, l5 = false, g4 = 0, d6 = 0;
  const u5 = Math.min(Math.ceil(Math.sqrt(i10 * (t9 / e14) / (r9.width / r9.height))), a4);
  let c5 = t9 / u5, f5 = c5 / (r9.width / r9.height);
  f5 > e14 && (f5 = e14, c5 = f5 / (r9.height / r9.width));
  const P4 = Math.floor(e14 / f5);
  if (n18 = f5, h4 = c5, g4 = Math.min(i10, P4 * u5), d6 = i10 % (P4 * u5), l5 = d6 > 0 && i10 > P4 * u5, l5) {
    let i11 = t9 / Math.min(Math.ceil(Math.sqrt(d6 * (t9 / e14) / (r9.width / r9.height))), a4), h5 = i11 / (r9.width / r9.height);
    h5 > e14 && (h5 = e14, i11 = h5 / (r9.height / r9.width)), o12 = h5, s11 = i11;
  }
  return { tilesInFirstPage: g4, defaultWidth: h4, defaultHeight: n18, lastPageWidth: s11, lastPageHeight: o12, isLastPageDifferentFromFirstPage: l5 };
};
var n13 = ({ parentWidth: t9, parentHeight: e14, count: i10, maxCount: a4, aspectRatio: h4 }) => {
  let n18 = 0, s11 = 0, o12 = 0, l5 = 0, g4 = false, d6 = 0, u5 = 0;
  const { width: c5, height: f5 } = r6(t9, e14, Math.min(i10, a4), h4.width, h4.height);
  if (n18 = c5, s11 = f5, d6 = Math.min(i10, a4), u5 = i10 % a4, g4 = u5 > 0 && i10 > a4, g4) {
    const { width: i11, height: a5 } = r6(t9, e14, u5, h4.width, h4.height);
    o12 = i11, l5 = a5;
  }
  return { tilesInFirstPage: d6, defaultWidth: n18, defaultHeight: s11, lastPageWidth: o12, lastPageHeight: l5, isLastPageDifferentFromFirstPage: g4 };
};
var s9 = ({ parentWidth: t9, parentHeight: e14, count: i10, maxCount: a4, aspectRatio: r9 }) => {
  let h4 = 0, n18 = 0, s11 = 0, o12 = 0, l5 = false, g4 = 0, d6 = 0;
  const u5 = Math.min(Math.ceil(Math.sqrt(i10 * (r9.width / r9.height) / (t9 / e14))), a4), c5 = e14 / u5, f5 = c5 * (r9.width / r9.height), P4 = Math.floor(t9 / f5);
  if (h4 = f5, n18 = c5, g4 = Math.min(i10, u5 * P4), d6 = i10 % (u5 * P4), l5 = d6 > 0 && i10 > u5 * P4, l5) {
    const i11 = e14 / Math.min(Math.ceil(Math.sqrt(d6 * (r9.width / r9.height) / (t9 / e14))), a4);
    o12 = i11, s11 = i11 * (r9.width / r9.height);
  }
  return { tilesInFirstPage: g4, defaultWidth: h4, defaultHeight: n18, lastPageWidth: s11, lastPageHeight: o12, isLastPageDifferentFromFirstPage: l5 };
};
function o7({ count: t9, parentWidth: e14, parentHeight: i10, maxTileCount: a4, maxRowCount: o12, maxColCount: l5, aspectRatio: g4 }) {
  let d6 = 0, u5 = 0, c5 = 0, f5 = 0, P4 = false, p4 = 0;
  if (0 === t9)
    return { tilesInFirstPage: p4, defaultWidth: d6, defaultHeight: u5, lastPageWidth: c5, lastPageHeight: f5, isLastPageDifferentFromFirstPage: P4 };
  if (a4)
    ({ tilesInFirstPage: p4, defaultWidth: d6, defaultHeight: u5, lastPageWidth: c5, lastPageHeight: f5, isLastPageDifferentFromFirstPage: P4 } = n13({ parentWidth: e14, parentHeight: i10, count: t9, maxCount: a4, aspectRatio: g4 }));
  else if (o12)
    ({ tilesInFirstPage: p4, defaultWidth: d6, defaultHeight: u5, lastPageWidth: c5, lastPageHeight: f5, isLastPageDifferentFromFirstPage: P4 } = s9({ parentWidth: e14, parentHeight: i10, count: t9, maxCount: o12, aspectRatio: g4 }));
  else if (l5)
    ({ tilesInFirstPage: p4, defaultWidth: d6, defaultHeight: u5, lastPageWidth: c5, lastPageHeight: f5, isLastPageDifferentFromFirstPage: P4 } = h3({ parentWidth: e14, parentHeight: i10, count: t9, maxCount: l5, aspectRatio: g4 }));
  else {
    const { width: a5, height: h4 } = r6(e14, i10, t9, g4.width, g4.height);
    d6 = a5, u5 = h4, p4 = t9;
  }
  return { tilesInFirstPage: p4, defaultWidth: d6, defaultHeight: u5, lastPageWidth: c5, lastPageHeight: f5, isLastPageDifferentFromFirstPage: P4 };
}
var l3 = (t9, e14, i10, a4 = true) => {
  if (!t9 || !e14 || !i10)
    return [];
  const r9 = [];
  for (const h4 of t9) {
    if (void 0 === h4.videoTrack && h4.audioTrack && e14[h4.audioTrack] ? r9.push({ peer: h4 }) : h4.videoTrack && e14[h4.videoTrack] ? r9.push({ track: e14[h4.videoTrack], peer: h4 }) : a4 || r9.push({ peer: h4 }), h4.auxiliaryTracks.length > 0 && h4.auxiliaryTracks.forEach((t10) => {
      const i11 = e14[t10];
      "video" === (null == i11 ? void 0 : i11.type) && "regular" === (null == i11 ? void 0 : i11.source) && r9.push({ track: i11, peer: h4 });
    }), i10(h4) && h4.auxiliaryTracks.length > 0) {
      const t10 = h4.auxiliaryTracks.find((t11) => {
        const i11 = e14[t11];
        return "video" === (null == i11 ? void 0 : i11.type) && "screen" === (null == i11 ? void 0 : i11.source);
      });
      t10 && r9.push({ track: e14[t10], peer: h4 });
    }
  }
  return r9;
};

// node_modules/@100mslive/react-sdk/dist/hooks/useVideoList.js
var n14 = { width: 1, height: 1 };
var l4 = ({ peers: l5, maxTileCount: m4, maxColCount: g4, maxRowCount: f5, includeScreenShareForPeer: u5 = () => false, aspectRatio: d6 = n14, filterNonPublishingPeers: P4 = true, offsetY: p4 = 0 }) => {
  const { width: c5 = 0, height: C3 = 0, ref: x3 } = useResizeDetector(), F3 = S3().getState(T), H3 = l3(l5, F3, u5, P4), W4 = (0, import_react11.useMemo)(() => {
    if (d6)
      return d6;
    return { width: a3(H3) || 1, height: 1 };
  }, [d6, H3]), w4 = H3.length, { tilesInFirstPage: R3, defaultWidth: v10, defaultHeight: M3, lastPageWidth: S4, lastPageHeight: T2, isLastPageDifferentFromFirstPage: j4 } = (0, import_react11.useMemo)(() => o7({ count: w4, parentWidth: Math.floor(c5), parentHeight: Math.floor(C3) - Math.min(C3, p4), maxTileCount: m4, maxRowCount: f5, maxColCount: g4, aspectRatio: W4 }), [w4, c5, C3, m4, f5, g4, W4, p4]);
  return { pagesWithTiles: (0, import_react11.useMemo)(() => e7({ elements: H3, tilesInFirstPage: R3, onlyOnePage: false, isLastPageDifferentFromFirstPage: j4, defaultWidth: v10, defaultHeight: M3, lastPageWidth: S4, lastPageHeight: T2 }), [H3, R3, j4, v10, M3, S4, T2]), ref: x3 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useAudioLevelStyles.js
init_define_process_env();
var import_react12 = __toESM(require_react());
function e8({ trackId: e14, getStyle: i10, ref: s11 }) {
  const m4 = S3();
  (0, import_react12.useEffect)(() => m4.subscribe((r9) => {
    if (!s11.current)
      return;
    const t9 = i10(r9);
    for (const r10 in t9)
      s11.current.style[r10] = t9[r10];
  }, ir2(e14)), [i10, s11, m4, e14]);
}

// node_modules/@100mslive/react-sdk/dist/hooks/useDevices.js
init_define_process_env();
var import_react13 = __toESM(require_react());
var c3 = (c5 = n12) => {
  const a4 = v7(), r9 = m(ui2), m4 = m(We2), n18 = m(Lr2), I3 = { [Or.audioOutput]: m4.audioOutputDeviceId }, l5 = { [Or.audioOutput]: r9.audioOutput };
  n18.video && (l5[Or.videoInput] = r9.videoInput, I3[Or.videoInput] = m4.videoInputDeviceId), n18.audio && (l5[Or.audioInput] = r9.audioInput, I3[Or.audioInput] = m4.audioInputDeviceId);
  return { allDevices: l5, selectedDeviceIDs: I3, updateDevice: (0, import_react13.useCallback)(({ deviceType: i10, deviceId: t9 }) => n11(void 0, void 0, void 0, function* () {
    try {
      switch (i10) {
        case Or.audioInput:
          yield a4.setAudioSettings({ deviceId: t9 });
          break;
        case Or.videoInput:
          yield a4.setVideoSettings({ deviceId: t9 });
          break;
        case Or.audioOutput:
          yield a4.setAudioOutputDevice(t9);
      }
    } catch (e14) {
      c5(e14, "updateDevices");
    }
  }), [c5, a4]) };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useParticipantList.js
init_define_process_env();
var import_react14 = __toESM(require_react());

// node_modules/@100mslive/react-sdk/dist/utils/groupBy.js
init_define_process_env();
var e9 = (e14) => e14 && Array.isArray(e14) && 0 !== e14.length ? e14.reduce((e15, r9) => r9.roleName ? (e15[r9.roleName] || (e15[r9.roleName] = []), e15[r9.roleName].push(r9), e15) : e15, {}) : {};

// node_modules/@100mslive/react-sdk/dist/hooks/useParticipantList.js
var p3 = () => {
  const p4 = m(B3), n18 = m(p4 ? w3 : fi2), c5 = m(Mi2), f5 = (0, import_react14.useMemo)(() => e9(n18), [n18]);
  return { roles: Object.keys(f5), participantsByRoles: f5, peerCount: c5, isConnected: p4 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useRecordingStreaming.js
init_define_process_env();
var e10 = () => {
  const e14 = m(Ni2), o12 = m(Li), g4 = m(xi2), m4 = e14.server.running, u5 = e14.browser.running, t9 = e14.hls.running, R3 = m4 || u5 || t9;
  return { isServerRecordingOn: m4, isBrowserRecordingOn: u5, isHLSRecordingOn: t9, isStreamingOn: g4.running || o12.running, isHLSRunning: g4.running, isRTMPRunning: o12.running, isRecordingOn: R3 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useAutoplayError.js
init_define_process_env();
var import_react15 = __toESM(require_react());
var d5 = () => {
  const d6 = E4(De2.ERROR), [l5, n18] = (0, import_react15.useState)(""), u5 = v7(), v10 = (0, import_react15.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    yield u5.unblockAudio();
  }), [u5]);
  return (0, import_react15.useEffect)(() => {
    3008 === (null == d6 ? void 0 : d6.data.code) && n18(null == d6 ? void 0 : d6.data.message);
  }, [d6]), { error: l5, unblockAudio: v10, resetError: () => n18("") };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useCustomEvent.js
init_define_process_env();
var import_react16 = __toESM(require_react());
var m3 = ({ type: m4, json: d6 = true, onEvent: a4, handleError: l5 = n12 }) => {
  const c5 = v7(), p4 = g3();
  (0, import_react16.useEffect)(() => {
    c5.ignoreMessageTypes([m4]);
  }, [c5, m4]), (0, import_react16.useEffect)(() => {
    if (!p4)
      return;
    return p4.onNotification((e14) => {
      const s11 = e14.data;
      if (s11 && s11.type === m4)
        try {
          const e15 = d6 ? JSON.parse(s11.message) : s11.message;
          null == a4 || a4(e15);
        } catch (e15) {
          l5(e15, "handleCustomEvent");
        }
    }, De2.NEW_MESSAGE);
  }, [p4, m4, d6, a4, l5]);
  return { sendEvent: (0, import_react16.useCallback)((s11, o12) => n11(void 0, void 0, void 0, function* () {
    try {
      const e14 = ((e15, s12) => s12 ? JSON.stringify(e15 || "") : e15)(s11, d6);
      o12 && Array.isArray(null == o12 ? void 0 : o12.roleNames) ? yield c5.sendGroupMessage(e14, o12.roleNames, m4) : "string" == typeof (null == o12 ? void 0 : o12.peerId) ? yield c5.sendDirectMessage(e14, o12.peerId, m4) : yield c5.sendBroadcastMessage(e14, m4), null == a4 || a4(s11);
    } catch (e14) {
      l5(e14, "sendCustomEvent");
    }
  }), [c5, l5, a4, m4, d6]) };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useParticipants.js
init_define_process_env();
var n15 = (n18) => {
  var d6;
  const m4 = m(B3), v10 = m(Mi2), c5 = m(Ai2);
  let u5 = m(m4 ? w3 : fi2);
  const p4 = Array.from(new Set(u5.map((e14) => e14.roleName))), f5 = S3();
  if ((null === (d6 = null == n18 ? void 0 : n18.metadata) || void 0 === d6 ? void 0 : d6.isHandRaised) && (u5 = u5.filter((e14) => f5.getState(Dr2(e14.id)).isHandRaised)), (null == n18 ? void 0 : n18.role) && c5.includes(n18.role) && (u5 = u5.filter((e14) => e14.roleName === n18.role)), null == n18 ? void 0 : n18.search) {
    const e14 = n18.search.toLowerCase();
    u5 = u5.filter((o12) => {
      var r9;
      return (null === (r9 = o12.roleName) || void 0 === r9 ? void 0 : r9.toLowerCase().includes(e14)) || o12.name.toLowerCase().includes(e14);
    });
  }
  return { participants: u5, isConnected: m4, peerCount: v10, rolesWithParticipants: p4 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/useEmbedShare.js
init_define_process_env();
var import_react17 = __toESM(require_react());
var u4 = (u5) => {
  const a4 = (0, import_react17.useRef)(null), [f5, l5] = (0, import_react17.useState)(false), m4 = (0, import_react17.useCallback)(() => {
    throw new Error("unable to start screen share");
  }, []), d6 = (0, import_react17.useRef)(false), { amIScreenSharing: h4, toggleScreenShare: S4 } = s8(m4), b4 = s7(h4), p4 = (0, import_react17.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    h4 && (yield null == S4 ? void 0 : S4(), a4.current = null);
  }), [h4, S4]), v10 = (0, import_react17.useCallback)((e14) => n11(void 0, void 0, void 0, function* () {
    if (!d6.current) {
      if (!e14)
        throw new Error("URL not found");
      if (h4)
        throw new Error("You are already sharing");
      if (!a4.current)
        throw new Error("Attach a reference `iframeRef` to iframe for sharing");
      a4.current.src = e14, d6.current = true, l5(true), yield null == S4 ? void 0 : S4({ forceCurrentTab: m2, cropElement: a4.current, preferCurrentTab: m2 });
    }
  }), [h4, S4]);
  return (0, import_react17.useEffect)(() => {
    b4 && !h4 && (null == u5 || u5(), a4.current && (a4.current.src = ""), d6.current = false, l5(false));
  }, [h4, b4, u5]), { startEmbedShare: v10, stopEmbedShare: p4, iframeRef: a4, isEmbedShareInProgress: f5 };
};

// node_modules/@100mslive/react-sdk/dist/hooks/usePDFShare.js
init_define_process_env();
var import_react18 = __toESM(require_react());
var c4 = (c5) => {
  const l5 = (0, import_react18.useRef)(null), [f5, m4] = (0, import_react18.useState)(false), d6 = (0, import_react18.useCallback)(() => {
    throw new Error("unable to start screen share");
  }, []), h4 = (0, import_react18.useRef)(false), { amIScreenSharing: v10, toggleScreenShare: p4 } = s8(d6), w4 = s7(v10), S4 = (0, import_react18.useCallback)((r9) => {
    var e14;
    l5.current && (null === (e14 = l5.current.contentWindow) || void 0 === e14 || e14.postMessage({ theme: 2, file: r9 }, "*"));
  }, []), g4 = (0, import_react18.useCallback)(() => n11(void 0, void 0, void 0, function* () {
    v10 && (yield null == p4 ? void 0 : p4());
  }), [v10, p4]), b4 = (0, import_react18.useCallback)((e14) => n11(void 0, void 0, void 0, function* () {
    if (!h4.current) {
      if (!e14)
        throw new Error("File or url not found");
      if (v10)
        throw new Error("You are already sharing");
      if (!l5.current)
        throw new Error("Attach a reference `iframeRef` to iframe for sharing");
      l5.current.src = `${a2}${"string" == typeof e14 ? `?file=${e14}` : ""}`, l5.current.onload = () => {
        requestAnimationFrame(() => {
          e14 instanceof File && S4(e14);
        });
      }, h4.current = true, m4(true), yield null == p4 ? void 0 : p4({ forceCurrentTab: m2, cropElement: l5.current, preferCurrentTab: m2 });
    }
  }), [v10, S4, p4]);
  return (0, import_react18.useEffect)(() => {
    w4 && !v10 && (null == c5 || c5(), l5.current && l5.current.removeAttribute("src"), h4.current = false, m4(false));
  }, [v10, w4, c5]), { startPDFShare: b4, stopPDFShare: g4, iframeRef: l5, isPDFShareInProgress: f5 };
};
export {
  Or as DeviceType,
  Ci as HMSAudioPluginType,
  Pr as HMSLogLevel,
  Vt2 as HMSMessageType,
  qe2 as HMSNotificationSeverity,
  De2 as HMSNotificationTypes,
  je2 as HMSPlaylistType,
  oe2 as HMSReactiveStore,
  l2 as HMSRoomProvider,
  Re2 as HMSRoomState,
  re2 as HMSStats,
  ii as HMSVideoPluginCanvasContextType,
  ti as HMSVideoPluginType,
  ne2 as createDefaultStatsStore,
  ae2 as createDefaultStoreState,
  oe as parsedUserAgent,
  Wo as selectAppData,
  Yo as selectAppDataByPath,
  ct2 as selectAudioPlaylist,
  Sr2 as selectAudioPlaylistTrackByPeerID,
  Xo as selectAudioTrackByID,
  as2 as selectAudioTrackByPeerID,
  ft2 as selectAudioTrackVolume,
  Tr as selectAudioVolumeByPeerID,
  ar as selectAuxiliaryAudioByPeerID,
  sr2 as selectAuxiliaryTracksByPeerID,
  Ai2 as selectAvailableRoleNames,
  cs as selectBroadcastMessages,
  mr2 as selectBroadcastMessagesUnreadCount,
  tr2 as selectCameraStreamByPeerID,
  pi as selectConnectionQualities,
  rr2 as selectConnectionQualityByPeerID,
  Di2 as selectDegradedTracks,
  ui2 as selectDevices,
  Gr2 as selectDidIJoinWithin,
  mi2 as selectDominantSpeaker,
  Bt2 as selectErrors,
  ve2 as selectFullAppData,
  xi2 as selectHLSState,
  Se2 as selectHMSMessages,
  vi as selectHMSMessagesCount,
  ei2 as selectHMSStats,
  xr as selectIsAllowedToPreviewMedia,
  Lr2 as selectIsAllowedToPublish,
  Ci2 as selectIsAllowedToSubscribe,
  Ht2 as selectIsAudioLocallyMuted,
  B3 as selectIsConnectedToRoom,
  Ei2 as selectIsInPreview,
  yi2 as selectIsLocalAudioEnabled,
  Br2 as selectIsLocalAudioPluginPresent,
  Ee2 as selectIsLocalScreenShared,
  Ye2 as selectIsLocalVideoDisplayEnabled,
  Ie2 as selectIsLocalVideoEnabled,
  Kr2 as selectIsLocalVideoPluginPresent,
  pr2 as selectIsLocallyMutedByPeerID,
  dr2 as selectIsPeerAudioEnabled,
  ur2 as selectIsPeerVideoEnabled,
  Vr as selectIsRoleAllowedToPublish,
  Mr as selectIsScreenShareLocallyMutedByPeerID,
  gi as selectIsSomeoneScreenSharing,
  b2 as selectLocalAudioTrackID,
  We2 as selectLocalMediaSettings,
  v6 as selectLocalPeer,
  G2 as selectLocalPeerID,
  Ti2 as selectLocalPeerName,
  le2 as selectLocalPeerRole,
  Hi2 as selectLocalPeerRoleName,
  Je2 as selectLocalTrackIDs,
  I2 as selectLocalVideoTrackID,
  $e2 as selectMessageIDsInOrder,
  yr as selectMessagesByPeerID,
  gr as selectMessagesByRole,
  Qe2 as selectMessagesMap,
  Pr2 as selectMessagesUnreadCountByPeerID,
  hr2 as selectMessagesUnreadCountByRole,
  or2 as selectPeerAudioByID,
  qr as selectPeerByCondition,
  C2 as selectPeerByID,
  Mi2 as selectPeerCount,
  Dr2 as selectPeerMetadata,
  vr2 as selectPeerName,
  zo as selectPeerNameByID,
  Ft2 as selectPeerScreenSharing,
  hi as selectPeerSharingAudio,
  Ri as selectPeerSharingAudioPlaylist,
  ki2 as selectPeerSharingVideoPlaylist,
  w3 as selectPeers,
  jr as selectPeersByCondition,
  kr as selectPeersByRole,
  Rr2 as selectPeersByRoles,
  k3 as selectPeersMap,
  Pi2 as selectPeersScreenSharing,
  Cr2 as selectPeersWithAudioStatus,
  Xe2 as selectPermissions,
  gt2 as selectPollByID,
  os as selectPollByIDBare,
  Vi2 as selectPolls,
  Ze2 as selectPollsMap,
  ze2 as selectPreviewRole,
  Qt2 as selectPreviewRoleName,
  Li as selectRTMPState,
  li2 as selectRecentError,
  Ni2 as selectRecordingState,
  fi2 as selectRemotePeers,
  us as selectRoleByRoleName,
  Nr2 as selectRoleChangeRequest,
  _3 as selectRolesMap,
  P3 as selectRoom,
  di2 as selectRoomID,
  _i2 as selectRoomStartTime,
  bi2 as selectRoomStarted,
  E3 as selectRoomState,
  Zo as selectScreenAudioTrackByID,
  Tt2 as selectScreenShareAudioByPeerID,
  lr2 as selectScreenShareByPeerID,
  Mt2 as selectScreenSharesByPeerId,
  er2 as selectScreenVideoTrackByID,
  Hr2 as selectScreenshareAudioVolumeByPeerID,
  Oi2 as selectSessionId,
  Ui2 as selectSessionMetadata,
  Jo as selectSessionStore,
  fr2 as selectSimulcastLayerByTrack,
  qt2 as selectSpeakers,
  wi as selectTemplateAppData,
  ir2 as selectTrackAudioByID,
  ue2 as selectTrackByID,
  T as selectTracksMap,
  Ii2 as selectUnreadHMSMessagesCount,
  St2 as selectVideoPlaylist,
  cr2 as selectVideoPlaylistAudioTrackByPeerID,
  nr2 as selectVideoPlaylistVideoTrackByPeerID,
  ut2 as selectVideoTrackByID,
  rs as selectVideoTrackByPeerID,
  Yt as simulcastMapping,
  i2 as throwErrorHandler,
  v8 as useAVToggle,
  e8 as useAudioLevelStyles,
  d5 as useAutoplayError,
  m3 as useCustomEvent,
  c3 as useDevices,
  u4 as useEmbedShare,
  v7 as useHMSActions,
  E4 as useHMSNotifications,
  b3 as useHMSStatsStore,
  m as useHMSStore,
  g3 as useHMSVanillaNotifications,
  S3 as useHMSVanillaStore,
  c4 as usePDFShare,
  p3 as useParticipantList,
  n15 as useParticipants,
  d4 as usePreviewJoin,
  e10 as useRecordingStreaming,
  r5 as useRemoteAVToggle,
  s8 as useScreenShare,
  u3 as useVideo,
  l4 as useVideoList
};
/*!
 * EventEmitter2
 * https://github.com/hij1nx/EventEmitter2
 *
 * Copyright (c) 2013 hij1nx
 * Licensed under the MIT license.
 */
//# sourceMappingURL=@100mslive_react-sdk.js.map
